plugins {
    id 'java-library'
    id "org.sonarqube" version "3.3"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.github.ben-manes.versions" version "0.39.0"
    id 'signing'
    id 'maven-publish'
}

group = 'de.codemakers.netbox'
version = "3.3.8-SNAPSHOT"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

ext {
    jakarta_annotation_version = "1.3.5"
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.6.6'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'javax.ws.rs:jsr311-api:1.1.1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.mockito:mockito-core:4.7.0'
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
}

test {
    useJUnitPlatform()
}

shadowJar {
    getDestinationDirectory().set(new File(projectDir, "./dist"))
}

javadoc {
    options.tags = ["http.response.details:a:Http Response Details"]
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'netbox-java-client'
            from components.java
            pom {
                name = 'OpenAPI NetBox Java Client'
                description = 'A generated java client api for NetBox'
                url = 'https://github.com/Panzer1119/netbox-java-client'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'panzer1119'
                        name = 'Paul Hagedorn'
                        email = 'panzer1119@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:Panzer1119/netbox-java-client.git'
                    developerConnection = 'scm:git:git@github.com:Panzer1119/netbox-java-client.git'
                    url = 'https://github.com/Panzer1119/netbox-java-client'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/panzer1119/netbox-java-client"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    def signingKey = System.getenv("SIGNING_KEY")
    def signingKeyId = System.getenv("SIGNING_KEY_ID")
    def signingKeyPassword = System.getenv("SIGNING_KEY_PASSWORD")
    if (signingKeyId) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingKeyPassword)
    } else if (signingKey) {
        print("NO SIGNING KEY ID")
        useInMemoryPgpKeys(signingKey, signingKeyPassword)
    } else {
        print("NO SIGNING KEY ID AND NO SIGNING KEY")
    }
    sign publishing.publications.mavenJava
}
