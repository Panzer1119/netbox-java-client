plugins {
    id 'java-library'
    id "org.sonarqube" version "3.3"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.github.ben-manes.versions" version "0.39.0"
    id 'signing'
    id 'maven-publish'
}

group = 'de.codemakers.netbox'
version = "0.4.1-1-SNAPSHOT"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

ext {
    swagger_annotations_version = "1.5.22"
    jackson_version = "2.13.0"
    jakarta_annotation_version = "2.1.0"
    junit_version = "4.13.2"
    jupiter_version = "5.9.0"
}

dependencies {
    implementation "io.swagger:swagger-annotations:$swagger_annotations_version"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "org.openapitools:jackson-databind-nullable:0.2.1"
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
}

tasks.withType(JavaCompile) {
    configure(options) {
        options.encoding = 'UTF-8'
    }
}

test {
    useJUnitPlatform()
}

shadowJar {
    getDestinationDirectory().set(new File(projectDir, "./dist"))
}

javadoc {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'netbox-java-client'
            from components.java
            pom {
                name = 'OpenAPI NetBox Java Client'
                description = 'A generated java client api for NetBox'
                url = 'https://github.com/Panzer1119/netbox-java-client'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'panzer1119'
                        name = 'Paul Hagedorn'
                        email = 'panzer1119@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:Panzer1119/netbox-java-client.git'
                    developerConnection = 'scm:git:git@github.com:Panzer1119/netbox-java-client.git'
                    url = 'https://github.com/Panzer1119/netbox-java-client'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/panzer1119/netbox-java-client"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    def signingKey = System.getenv("SIGNING_KEY")
    def signingKeyId = System.getenv("SIGNING_KEY_ID")
    def signingKeyPassword = System.getenv("SIGNING_KEY_PASSWORD")
    if (signingKeyId) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingKeyPassword)
        print("SIGNING USING KEY ID AND KEY\n")
    } else if (signingKey) {
        print("SIGNING USING ONLY KEY\n")
        useInMemoryPgpKeys(signingKey, signingKeyPassword)
    } else {
        print("NO SIGNING KEY PROVIDED\n")
    }
    sign publishing.publications.mavenJava
}
