/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.Map.Entry;

/**
 * JobResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class JobResult {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_COMPLETED = "completed";
    @SerializedName(SERIALIZED_NAME_COMPLETED)
    private OffsetDateTime completed;
    
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    
    public static final String SERIALIZED_NAME_OBJ_TYPE = "obj_type";
    @SerializedName(SERIALIZED_NAME_OBJ_TYPE)
    private String objType;
    
    public static final String SERIALIZED_NAME_STATUS = "status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    private Status6 status;
    
    public static final String SERIALIZED_NAME_USER = "user";
    @SerializedName(SERIALIZED_NAME_USER)
    private NestedUser user;
    
    public static final String SERIALIZED_NAME_DATA = "data";
    @SerializedName(SERIALIZED_NAME_DATA)
    private String data;
    
    public static final String SERIALIZED_NAME_JOB_ID = "job_id";
    @SerializedName(SERIALIZED_NAME_JOB_ID)
    private UUID jobId;
    
    public JobResult() {
    }
    
    
    public JobResult(Integer id, URI url, String display, OffsetDateTime created, String objType) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.created = created;
        this.objType = objType;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    public JobResult completed(OffsetDateTime completed) {
        
        this.completed = completed;
        return this;
    }
    
    /**
     * Get completed
     *
     * @return completed
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCompleted() {
        return completed;
    }
    
    
    public void setCompleted(OffsetDateTime completed) {
        this.completed = completed;
    }
    
    
    public JobResult name(String name) {
        
        this.name = name;
        return this;
    }
    
    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getName() {
        return name;
    }
    
    
    public void setName(String name) {
        this.name = name;
    }
    
    
    /**
     * Get objType
     *
     * @return objType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getObjType() {
        return objType;
    }
    
    
    public JobResult status(Status6 status) {
        
        this.status = status;
        return this;
    }
    
    /**
     * Get status
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Status6 getStatus() {
        return status;
    }
    
    
    public void setStatus(Status6 status) {
        this.status = status;
    }
    
    
    public JobResult user(NestedUser user) {
        
        this.user = user;
        return this;
    }
    
    /**
     * Get user
     *
     * @return user
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedUser getUser() {
        return user;
    }
    
    
    public void setUser(NestedUser user) {
        this.user = user;
    }
    
    
    public JobResult data(String data) {
        
        this.data = data;
        return this;
    }
    
    /**
     * Get data
     *
     * @return data
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getData() {
        return data;
    }
    
    
    public void setData(String data) {
        this.data = data;
    }
    
    
    public JobResult jobId(UUID jobId) {
        
        this.jobId = jobId;
        return this;
    }
    
    /**
     * Get jobId
     *
     * @return jobId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public UUID getJobId() {
        return jobId;
    }
    
    
    public void setJobId(UUID jobId) {
        this.jobId = jobId;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobResult jobResult = (JobResult) o;
        return Objects.equals(this.id, jobResult.id) && Objects.equals(this.url, jobResult.url) && Objects.equals(this.display, jobResult.display) && Objects.equals(this.created, jobResult.created) && Objects.equals(this.completed, jobResult.completed) && Objects.equals(this.name, jobResult.name) && Objects.equals(this.objType, jobResult.objType) && Objects.equals(this.status, jobResult.status) && Objects.equals(this.user, jobResult.user) && Objects.equals(this.data, jobResult.data) && Objects.equals(this.jobId, jobResult.jobId);
    }
    
    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, created, completed, name, objType, status, user, data, jobId);
    }
    
    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobResult {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    objType: ").append(toIndentedString(objType)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    user: ").append(toIndentedString(user)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("created");
        openapiFields.add("completed");
        openapiFields.add("name");
        openapiFields.add("obj_type");
        openapiFields.add("status");
        openapiFields.add("user");
        openapiFields.add("data");
        openapiFields.add("job_id");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("job_id");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to JobResult
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (JobResult.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in JobResult is not found in the empty JSON string", JobResult.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!JobResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : JobResult.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name")
                    .toString()));
        }
        if (jsonObj.get("obj_type") != null && !jsonObj.get("obj_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `obj_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obj_type")
                    .toString()));
        }
        // validate the optional field `status`
        if (jsonObj.getAsJsonObject("status") != null) {
            Status6.validateJsonObject(jsonObj.getAsJsonObject("status"));
        }
        // validate the optional field `user`
        if (jsonObj.getAsJsonObject("user") != null) {
            NestedUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
        }
        if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data")
                    .toString()));
        }
        if (jsonObj.get("job_id") != null && !jsonObj.get("job_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id")
                    .toString()));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JobResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JobResult' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<JobResult> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(JobResult.class));
            
            return (TypeAdapter<T>) new TypeAdapter<JobResult>() {
                @Override
                public void write(JsonWriter out, JobResult value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public JobResult read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of JobResult given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of JobResult
     *
     * @throws IOException if the JSON string is invalid with respect to JobResult
     */
    public static JobResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JobResult.class);
    }
    
    /**
     * Convert an instance of JobResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

