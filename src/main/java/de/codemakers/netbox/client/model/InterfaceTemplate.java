/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.model.NestedDeviceType;
import de.codemakers.netbox.client.model.NestedModuleType;
import de.codemakers.netbox.client.model.PoeMode;
import de.codemakers.netbox.client.model.PoeType;
import de.codemakers.netbox.client.model.Type2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.codemakers.netbox.client.JSON;

/**
 * InterfaceTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class InterfaceTemplate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "device_type";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private NestedDeviceType deviceType;

  public static final String SERIALIZED_NAME_MODULE_TYPE = "module_type";
  @SerializedName(SERIALIZED_NAME_MODULE_TYPE)
  private NestedModuleType moduleType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type2 type;

  public static final String SERIALIZED_NAME_MGMT_ONLY = "mgmt_only";
  @SerializedName(SERIALIZED_NAME_MGMT_ONLY)
  private Boolean mgmtOnly;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_POE_MODE = "poe_mode";
  @SerializedName(SERIALIZED_NAME_POE_MODE)
  private PoeMode poeMode;

  public static final String SERIALIZED_NAME_POE_TYPE = "poe_type";
  @SerializedName(SERIALIZED_NAME_POE_TYPE)
  private PoeType poeType;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public InterfaceTemplate() { 
  }

  
  public InterfaceTemplate(
     Integer id, 
     URI url, 
     String display, 
     OffsetDateTime created, 
     OffsetDateTime lastUpdated
  ) {
    this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.created = created;
    this.lastUpdated = lastUpdated;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplay() {
    return display;
  }




  public InterfaceTemplate deviceType(NestedDeviceType deviceType) {
    
    this.deviceType = deviceType;
    return this;
  }

   /**
   * Get deviceType
   * @return deviceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NestedDeviceType getDeviceType() {
    return deviceType;
  }


  public void setDeviceType(NestedDeviceType deviceType) {
    this.deviceType = deviceType;
  }


  public InterfaceTemplate moduleType(NestedModuleType moduleType) {
    
    this.moduleType = moduleType;
    return this;
  }

   /**
   * Get moduleType
   * @return moduleType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NestedModuleType getModuleType() {
    return moduleType;
  }


  public void setModuleType(NestedModuleType moduleType) {
    this.moduleType = moduleType;
  }


  public InterfaceTemplate name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   *  {module} is accepted as a substitution for the module bay position when attached to a module type. 
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = " {module} is accepted as a substitution for the module bay position when attached to a module type. ")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public InterfaceTemplate label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Physical label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Physical label")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public InterfaceTemplate type(Type2 type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Type2 getType() {
    return type;
  }


  public void setType(Type2 type) {
    this.type = type;
  }


  public InterfaceTemplate mgmtOnly(Boolean mgmtOnly) {
    
    this.mgmtOnly = mgmtOnly;
    return this;
  }

   /**
   * Get mgmtOnly
   * @return mgmtOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMgmtOnly() {
    return mgmtOnly;
  }


  public void setMgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
  }


  public InterfaceTemplate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public InterfaceTemplate poeMode(PoeMode poeMode) {
    
    this.poeMode = poeMode;
    return this;
  }

   /**
   * Get poeMode
   * @return poeMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PoeMode getPoeMode() {
    return poeMode;
  }


  public void setPoeMode(PoeMode poeMode) {
    this.poeMode = poeMode;
  }


  public InterfaceTemplate poeType(PoeType poeType) {
    
    this.poeType = poeType;
    return this;
  }

   /**
   * Get poeType
   * @return poeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PoeType getPoeType() {
    return poeType;
  }


  public void setPoeType(PoeType poeType) {
    this.poeType = poeType;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterfaceTemplate interfaceTemplate = (InterfaceTemplate) o;
    return Objects.equals(this.id, interfaceTemplate.id) &&
        Objects.equals(this.url, interfaceTemplate.url) &&
        Objects.equals(this.display, interfaceTemplate.display) &&
        Objects.equals(this.deviceType, interfaceTemplate.deviceType) &&
        Objects.equals(this.moduleType, interfaceTemplate.moduleType) &&
        Objects.equals(this.name, interfaceTemplate.name) &&
        Objects.equals(this.label, interfaceTemplate.label) &&
        Objects.equals(this.type, interfaceTemplate.type) &&
        Objects.equals(this.mgmtOnly, interfaceTemplate.mgmtOnly) &&
        Objects.equals(this.description, interfaceTemplate.description) &&
        Objects.equals(this.poeMode, interfaceTemplate.poeMode) &&
        Objects.equals(this.poeType, interfaceTemplate.poeType) &&
        Objects.equals(this.created, interfaceTemplate.created) &&
        Objects.equals(this.lastUpdated, interfaceTemplate.lastUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, deviceType, moduleType, name, label, type, mgmtOnly, description, poeMode, poeType, created, lastUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterfaceTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    moduleType: ").append(toIndentedString(moduleType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    mgmtOnly: ").append(toIndentedString(mgmtOnly)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    poeMode: ").append(toIndentedString(poeMode)).append("\n");
    sb.append("    poeType: ").append(toIndentedString(poeType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("display");
    openapiFields.add("device_type");
    openapiFields.add("module_type");
    openapiFields.add("name");
    openapiFields.add("label");
    openapiFields.add("type");
    openapiFields.add("mgmt_only");
    openapiFields.add("description");
    openapiFields.add("poe_mode");
    openapiFields.add("poe_type");
    openapiFields.add("created");
    openapiFields.add("last_updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InterfaceTemplate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InterfaceTemplate.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InterfaceTemplate is not found in the empty JSON string", InterfaceTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InterfaceTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InterfaceTemplate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InterfaceTemplate.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // validate the optional field `device_type`
      if (jsonObj.getAsJsonObject("device_type") != null) {
        NestedDeviceType.validateJsonObject(jsonObj.getAsJsonObject("device_type"));
      }
      // validate the optional field `module_type`
      if (jsonObj.getAsJsonObject("module_type") != null) {
        NestedModuleType.validateJsonObject(jsonObj.getAsJsonObject("module_type"));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.getAsJsonObject("type") != null) {
        Type2.validateJsonObject(jsonObj.getAsJsonObject("type"));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `poe_mode`
      if (jsonObj.getAsJsonObject("poe_mode") != null) {
        PoeMode.validateJsonObject(jsonObj.getAsJsonObject("poe_mode"));
      }
      // validate the optional field `poe_type`
      if (jsonObj.getAsJsonObject("poe_type") != null) {
        PoeType.validateJsonObject(jsonObj.getAsJsonObject("poe_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InterfaceTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InterfaceTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InterfaceTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InterfaceTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<InterfaceTemplate>() {
           @Override
           public void write(JsonWriter out, InterfaceTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InterfaceTemplate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InterfaceTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InterfaceTemplate
  * @throws IOException if the JSON string is invalid with respect to InterfaceTemplate
  */
  public static InterfaceTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InterfaceTemplate.class);
  }

 /**
  * Convert an instance of InterfaceTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

