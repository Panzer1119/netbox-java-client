/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * WritableFrontPortTemplate
 */
@JsonPropertyOrder({
  WritableFrontPortTemplate.JSON_PROPERTY_ID,
  WritableFrontPortTemplate.JSON_PROPERTY_URL,
  WritableFrontPortTemplate.JSON_PROPERTY_DISPLAY,
  WritableFrontPortTemplate.JSON_PROPERTY_DEVICE_TYPE,
  WritableFrontPortTemplate.JSON_PROPERTY_MODULE_TYPE,
  WritableFrontPortTemplate.JSON_PROPERTY_NAME,
  WritableFrontPortTemplate.JSON_PROPERTY_LABEL,
  WritableFrontPortTemplate.JSON_PROPERTY_TYPE,
  WritableFrontPortTemplate.JSON_PROPERTY_COLOR,
  WritableFrontPortTemplate.JSON_PROPERTY_REAR_PORT,
  WritableFrontPortTemplate.JSON_PROPERTY_REAR_PORT_POSITION,
  WritableFrontPortTemplate.JSON_PROPERTY_DESCRIPTION,
  WritableFrontPortTemplate.JSON_PROPERTY_CREATED,
  WritableFrontPortTemplate.JSON_PROPERTY_LAST_UPDATED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T15:10:46.540964900+02:00[Europe/Berlin]")
public class WritableFrontPortTemplate {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_URL = "url";
  private URI url;

  public static final String JSON_PROPERTY_DISPLAY = "display";
  private String display;

  public static final String JSON_PROPERTY_DEVICE_TYPE = "device_type";
  private Integer deviceType;

  public static final String JSON_PROPERTY_MODULE_TYPE = "module_type";
  private Integer moduleType;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    _8P8C("8p8c"),
    
    _8P6C("8p6c"),
    
    _8P4C("8p4c"),
    
    _8P2C("8p2c"),
    
    _6P6C("6p6c"),
    
    _6P4C("6p4c"),
    
    _6P2C("6p2c"),
    
    _4P4C("4p4c"),
    
    _4P2C("4p2c"),
    
    GG45("gg45"),
    
    TERA_4P("tera-4p"),
    
    TERA_2P("tera-2p"),
    
    TERA_1P("tera-1p"),
    
    _110_PUNCH("110-punch"),
    
    BNC("bnc"),
    
    F("f"),
    
    N("n"),
    
    MRJ21("mrj21"),
    
    FC("fc"),
    
    LC("lc"),
    
    LC_PC("lc-pc"),
    
    LC_UPC("lc-upc"),
    
    LC_APC("lc-apc"),
    
    LSH("lsh"),
    
    LSH_PC("lsh-pc"),
    
    LSH_UPC("lsh-upc"),
    
    LSH_APC("lsh-apc"),
    
    MPO("mpo"),
    
    MTRJ("mtrj"),
    
    SC("sc"),
    
    SC_PC("sc-pc"),
    
    SC_UPC("sc-upc"),
    
    SC_APC("sc-apc"),
    
    ST("st"),
    
    CS("cs"),
    
    SN("sn"),
    
    SMA_905("sma-905"),
    
    SMA_906("sma-906"),
    
    URM_P2("urm-p2"),
    
    URM_P4("urm-p4"),
    
    URM_P8("urm-p8"),
    
    SPLICE("splice"),
    
    OTHER("other"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_COLOR = "color";
  private String color;

  public static final String JSON_PROPERTY_REAR_PORT = "rear_port";
  private Integer rearPort;

  public static final String JSON_PROPERTY_REAR_PORT_POSITION = "rear_port_position";
  private Integer rearPortPosition;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_CREATED = "created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_LAST_UPDATED = "last_updated";
  private OffsetDateTime lastUpdated;

  public WritableFrontPortTemplate() { 
  }

  @JsonCreator
  public WritableFrontPortTemplate(
    @JsonProperty(JSON_PROPERTY_ID) Integer id, 
    @JsonProperty(JSON_PROPERTY_URL) URI url, 
    @JsonProperty(JSON_PROPERTY_DISPLAY) String display, 
    @JsonProperty(JSON_PROPERTY_CREATED) OffsetDateTime created, 
    @JsonProperty(JSON_PROPERTY_LAST_UPDATED) OffsetDateTime lastUpdated
  ) {
  this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.created = created;
    this.lastUpdated = lastUpdated;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplay() {
    return display;
  }




  public WritableFrontPortTemplate deviceType(Integer deviceType) {
    this.deviceType = deviceType;
    return this;
  }

   /**
   * Get deviceType
   * @return deviceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDeviceType() {
    return deviceType;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeviceType(Integer deviceType) {
    this.deviceType = deviceType;
  }


  public WritableFrontPortTemplate moduleType(Integer moduleType) {
    this.moduleType = moduleType;
    return this;
  }

   /**
   * Get moduleType
   * @return moduleType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getModuleType() {
    return moduleType;
  }


  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModuleType(Integer moduleType) {
    this.moduleType = moduleType;
  }


  public WritableFrontPortTemplate name(String name) {
    this.name = name;
    return this;
  }

   /**
   *  {module} is accepted as a substitution for the module bay position when attached to a module type. 
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = " {module} is accepted as a substitution for the module bay position when attached to a module type. ")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public WritableFrontPortTemplate label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Physical label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Physical label")
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public WritableFrontPortTemplate type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public WritableFrontPortTemplate color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColor() {
    return color;
  }


  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColor(String color) {
    this.color = color;
  }


  public WritableFrontPortTemplate rearPort(Integer rearPort) {
    this.rearPort = rearPort;
    return this;
  }

   /**
   * Get rearPort
   * @return rearPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_REAR_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRearPort() {
    return rearPort;
  }


  @JsonProperty(JSON_PROPERTY_REAR_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRearPort(Integer rearPort) {
    this.rearPort = rearPort;
  }


  public WritableFrontPortTemplate rearPortPosition(Integer rearPortPosition) {
    this.rearPortPosition = rearPortPosition;
    return this;
  }

   /**
   * Get rearPortPosition
   * minimum: 1
   * maximum: 1024
   * @return rearPortPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REAR_PORT_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRearPortPosition() {
    return rearPortPosition;
  }


  @JsonProperty(JSON_PROPERTY_REAR_PORT_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRearPortPosition(Integer rearPortPosition) {
    this.rearPortPosition = rearPortPosition;
  }


  public WritableFrontPortTemplate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }




  /**
   * Return true if this WritableFrontPortTemplate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableFrontPortTemplate writableFrontPortTemplate = (WritableFrontPortTemplate) o;
    return Objects.equals(this.id, writableFrontPortTemplate.id) &&
        Objects.equals(this.url, writableFrontPortTemplate.url) &&
        Objects.equals(this.display, writableFrontPortTemplate.display) &&
        Objects.equals(this.deviceType, writableFrontPortTemplate.deviceType) &&
        Objects.equals(this.moduleType, writableFrontPortTemplate.moduleType) &&
        Objects.equals(this.name, writableFrontPortTemplate.name) &&
        Objects.equals(this.label, writableFrontPortTemplate.label) &&
        Objects.equals(this.type, writableFrontPortTemplate.type) &&
        Objects.equals(this.color, writableFrontPortTemplate.color) &&
        Objects.equals(this.rearPort, writableFrontPortTemplate.rearPort) &&
        Objects.equals(this.rearPortPosition, writableFrontPortTemplate.rearPortPosition) &&
        Objects.equals(this.description, writableFrontPortTemplate.description) &&
        Objects.equals(this.created, writableFrontPortTemplate.created) &&
        Objects.equals(this.lastUpdated, writableFrontPortTemplate.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, deviceType, moduleType, name, label, type, color, rearPort, rearPortPosition, description, created, lastUpdated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableFrontPortTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    moduleType: ").append(toIndentedString(moduleType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    rearPort: ").append(toIndentedString(rearPort)).append("\n");
    sb.append("    rearPortPosition: ").append(toIndentedString(rearPortPosition)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

