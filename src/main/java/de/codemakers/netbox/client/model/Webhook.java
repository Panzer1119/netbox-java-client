/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Webhook
 */
@JsonPropertyOrder({
  Webhook.JSON_PROPERTY_ID,
  Webhook.JSON_PROPERTY_URL,
  Webhook.JSON_PROPERTY_DISPLAY,
  Webhook.JSON_PROPERTY_CONTENT_TYPES,
  Webhook.JSON_PROPERTY_NAME,
  Webhook.JSON_PROPERTY_TYPE_CREATE,
  Webhook.JSON_PROPERTY_TYPE_UPDATE,
  Webhook.JSON_PROPERTY_TYPE_DELETE,
  Webhook.JSON_PROPERTY_PAYLOAD_URL,
  Webhook.JSON_PROPERTY_ENABLED,
  Webhook.JSON_PROPERTY_HTTP_METHOD,
  Webhook.JSON_PROPERTY_HTTP_CONTENT_TYPE,
  Webhook.JSON_PROPERTY_ADDITIONAL_HEADERS,
  Webhook.JSON_PROPERTY_BODY_TEMPLATE,
  Webhook.JSON_PROPERTY_SECRET,
  Webhook.JSON_PROPERTY_CONDITIONS,
  Webhook.JSON_PROPERTY_SSL_VERIFICATION,
  Webhook.JSON_PROPERTY_CA_FILE_PATH,
  Webhook.JSON_PROPERTY_CREATED,
  Webhook.JSON_PROPERTY_LAST_UPDATED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T18:36:37.665487300+02:00[Europe/Berlin]")
public class Webhook {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_URL = "url";
  private URI url;

  public static final String JSON_PROPERTY_DISPLAY = "display";
  private String display;

  public static final String JSON_PROPERTY_CONTENT_TYPES = "content_types";
  private Set<String> contentTypes = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TYPE_CREATE = "type_create";
  private Boolean typeCreate = false;

  public static final String JSON_PROPERTY_TYPE_UPDATE = "type_update";
  private Boolean typeUpdate = false;

  public static final String JSON_PROPERTY_TYPE_DELETE = "type_delete";
  private Boolean typeDelete = false;

  public static final String JSON_PROPERTY_PAYLOAD_URL = "payload_url";
  private String payloadUrl;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  /**
   * Gets or Sets httpMethod
   */
  public enum HttpMethodEnum {
    GET("GET"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    DELETE("DELETE"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_HTTP_METHOD = "http_method";
  private HttpMethodEnum httpMethod;

  public static final String JSON_PROPERTY_HTTP_CONTENT_TYPE = "http_content_type";
  private String httpContentType;

  public static final String JSON_PROPERTY_ADDITIONAL_HEADERS = "additional_headers";
  private String additionalHeaders;

  public static final String JSON_PROPERTY_BODY_TEMPLATE = "body_template";
  private String bodyTemplate;

  public static final String JSON_PROPERTY_SECRET = "secret";
  private String secret;

  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  private JsonNullable<String> conditions = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SSL_VERIFICATION = "ssl_verification";
  private Boolean sslVerification;

  public static final String JSON_PROPERTY_CA_FILE_PATH = "ca_file_path";
  private JsonNullable<String> caFilePath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CREATED = "created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_LAST_UPDATED = "last_updated";
  private OffsetDateTime lastUpdated;

  public Webhook() { 
  }

  @JsonCreator
  public Webhook(
    @JsonProperty(JSON_PROPERTY_ID) Integer id, 
    @JsonProperty(JSON_PROPERTY_URL) URI url, 
    @JsonProperty(JSON_PROPERTY_DISPLAY) String display, 
    @JsonProperty(JSON_PROPERTY_CREATED) OffsetDateTime created, 
    @JsonProperty(JSON_PROPERTY_LAST_UPDATED) OffsetDateTime lastUpdated
  ) {
  this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.created = created;
    this.lastUpdated = lastUpdated;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplay() {
    return display;
  }




  public Webhook contentTypes(Set<String> contentTypes) {
    this.contentTypes = contentTypes;
    return this;
  }

  public Webhook addContentTypesItem(String contentTypesItem) {
    this.contentTypes.add(contentTypesItem);
    return this;
  }

   /**
   * Get contentTypes
   * @return contentTypes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<String> getContentTypes() {
    return contentTypes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentTypes(Set<String> contentTypes) {
    this.contentTypes = contentTypes;
  }


  public Webhook name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Webhook typeCreate(Boolean typeCreate) {
    this.typeCreate = typeCreate;
    return this;
  }

   /**
   * Call this webhook when a matching object is created.
   * @return typeCreate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Call this webhook when a matching object is created.")
  @JsonProperty(JSON_PROPERTY_TYPE_CREATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTypeCreate() {
    return typeCreate;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_CREATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeCreate(Boolean typeCreate) {
    this.typeCreate = typeCreate;
  }


  public Webhook typeUpdate(Boolean typeUpdate) {
    this.typeUpdate = typeUpdate;
    return this;
  }

   /**
   * Call this webhook when a matching object is updated.
   * @return typeUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Call this webhook when a matching object is updated.")
  @JsonProperty(JSON_PROPERTY_TYPE_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTypeUpdate() {
    return typeUpdate;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeUpdate(Boolean typeUpdate) {
    this.typeUpdate = typeUpdate;
  }


  public Webhook typeDelete(Boolean typeDelete) {
    this.typeDelete = typeDelete;
    return this;
  }

   /**
   * Call this webhook when a matching object is deleted.
   * @return typeDelete
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Call this webhook when a matching object is deleted.")
  @JsonProperty(JSON_PROPERTY_TYPE_DELETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTypeDelete() {
    return typeDelete;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_DELETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeDelete(Boolean typeDelete) {
    this.typeDelete = typeDelete;
  }


  public Webhook payloadUrl(String payloadUrl) {
    this.payloadUrl = payloadUrl;
    return this;
  }

   /**
   * This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.
   * @return payloadUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.")
  @JsonProperty(JSON_PROPERTY_PAYLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPayloadUrl() {
    return payloadUrl;
  }


  @JsonProperty(JSON_PROPERTY_PAYLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayloadUrl(String payloadUrl) {
    this.payloadUrl = payloadUrl;
  }


  public Webhook enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Webhook httpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

   /**
   * Get httpMethod
   * @return httpMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HTTP_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public Webhook httpContentType(String httpContentType) {
    this.httpContentType = httpContentType;
    return this;
  }

   /**
   * The complete list of official content types is available &lt;a href&#x3D;\&quot;https://www.iana.org/assignments/media-types/media-types.xhtml\&quot;&gt;here&lt;/a&gt;.
   * @return httpContentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The complete list of official content types is available <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">here</a>.")
  @JsonProperty(JSON_PROPERTY_HTTP_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpContentType() {
    return httpContentType;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpContentType(String httpContentType) {
    this.httpContentType = httpContentType;
  }


  public Webhook additionalHeaders(String additionalHeaders) {
    this.additionalHeaders = additionalHeaders;
    return this;
  }

   /**
   * User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format &lt;code&gt;Name: Value&lt;/code&gt;. Jinja2 template processing is supported with the same context as the request body (below).
   * @return additionalHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is supported with the same context as the request body (below).")
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalHeaders() {
    return additionalHeaders;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalHeaders(String additionalHeaders) {
    this.additionalHeaders = additionalHeaders;
  }


  public Webhook bodyTemplate(String bodyTemplate) {
    this.bodyTemplate = bodyTemplate;
    return this;
  }

   /**
   * Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: &lt;code&gt;event&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;request_id&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt;.
   * @return bodyTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.")
  @JsonProperty(JSON_PROPERTY_BODY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBodyTemplate() {
    return bodyTemplate;
  }


  @JsonProperty(JSON_PROPERTY_BODY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBodyTemplate(String bodyTemplate) {
    this.bodyTemplate = bodyTemplate;
  }


  public Webhook secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * When provided, the request will include a &#39;X-Hook-Signature&#39; header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.
   * @return secret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When provided, the request will include a 'X-Hook-Signature' header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.")
  @JsonProperty(JSON_PROPERTY_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecret() {
    return secret;
  }


  @JsonProperty(JSON_PROPERTY_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecret(String secret) {
    this.secret = secret;
  }


  public Webhook conditions(String conditions) {
    this.conditions = JsonNullable.<String>of(conditions);
    return this;
  }

   /**
   * A set of conditions which determine whether the webhook will be generated.
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A set of conditions which determine whether the webhook will be generated.")
  @JsonIgnore

  public String getConditions() {
        return conditions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getConditions_JsonNullable() {
    return conditions;
  }
  
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  public void setConditions_JsonNullable(JsonNullable<String> conditions) {
    this.conditions = conditions;
  }

  public void setConditions(String conditions) {
    this.conditions = JsonNullable.<String>of(conditions);
  }


  public Webhook sslVerification(Boolean sslVerification) {
    this.sslVerification = sslVerification;
    return this;
  }

   /**
   * Enable SSL certificate verification. Disable with caution!
   * @return sslVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable SSL certificate verification. Disable with caution!")
  @JsonProperty(JSON_PROPERTY_SSL_VERIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSslVerification() {
    return sslVerification;
  }


  @JsonProperty(JSON_PROPERTY_SSL_VERIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSslVerification(Boolean sslVerification) {
    this.sslVerification = sslVerification;
  }


  public Webhook caFilePath(String caFilePath) {
    this.caFilePath = JsonNullable.<String>of(caFilePath);
    return this;
  }

   /**
   * The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.
   * @return caFilePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.")
  @JsonIgnore

  public String getCaFilePath() {
        return caFilePath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CA_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCaFilePath_JsonNullable() {
    return caFilePath;
  }
  
  @JsonProperty(JSON_PROPERTY_CA_FILE_PATH)
  public void setCaFilePath_JsonNullable(JsonNullable<String> caFilePath) {
    this.caFilePath = caFilePath;
  }

  public void setCaFilePath(String caFilePath) {
    this.caFilePath = JsonNullable.<String>of(caFilePath);
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }




  /**
   * Return true if this Webhook object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhook webhook = (Webhook) o;
    return Objects.equals(this.id, webhook.id) &&
        Objects.equals(this.url, webhook.url) &&
        Objects.equals(this.display, webhook.display) &&
        Objects.equals(this.contentTypes, webhook.contentTypes) &&
        Objects.equals(this.name, webhook.name) &&
        Objects.equals(this.typeCreate, webhook.typeCreate) &&
        Objects.equals(this.typeUpdate, webhook.typeUpdate) &&
        Objects.equals(this.typeDelete, webhook.typeDelete) &&
        Objects.equals(this.payloadUrl, webhook.payloadUrl) &&
        Objects.equals(this.enabled, webhook.enabled) &&
        Objects.equals(this.httpMethod, webhook.httpMethod) &&
        Objects.equals(this.httpContentType, webhook.httpContentType) &&
        Objects.equals(this.additionalHeaders, webhook.additionalHeaders) &&
        Objects.equals(this.bodyTemplate, webhook.bodyTemplate) &&
        Objects.equals(this.secret, webhook.secret) &&
        equalsNullable(this.conditions, webhook.conditions) &&
        Objects.equals(this.sslVerification, webhook.sslVerification) &&
        equalsNullable(this.caFilePath, webhook.caFilePath) &&
        Objects.equals(this.created, webhook.created) &&
        Objects.equals(this.lastUpdated, webhook.lastUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, contentTypes, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, additionalHeaders, bodyTemplate, secret, hashCodeNullable(conditions), sslVerification, hashCodeNullable(caFilePath), created, lastUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhook {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    contentTypes: ").append(toIndentedString(contentTypes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeCreate: ").append(toIndentedString(typeCreate)).append("\n");
    sb.append("    typeUpdate: ").append(toIndentedString(typeUpdate)).append("\n");
    sb.append("    typeDelete: ").append(toIndentedString(typeDelete)).append("\n");
    sb.append("    payloadUrl: ").append(toIndentedString(payloadUrl)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    httpContentType: ").append(toIndentedString(httpContentType)).append("\n");
    sb.append("    additionalHeaders: ").append(toIndentedString(additionalHeaders)).append("\n");
    sb.append("    bodyTemplate: ").append(toIndentedString(bodyTemplate)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    sslVerification: ").append(toIndentedString(sslVerification)).append("\n");
    sb.append("    caFilePath: ").append(toIndentedString(caFilePath)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

