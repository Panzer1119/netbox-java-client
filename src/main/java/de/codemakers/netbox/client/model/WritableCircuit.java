/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.Map.Entry;

/**
 * WritableCircuit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class WritableCircuit {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    public static final String SERIALIZED_NAME_CID = "cid";
    @SerializedName(SERIALIZED_NAME_CID)
    private String cid;
    
    public static final String SERIALIZED_NAME_PROVIDER = "provider";
    @SerializedName(SERIALIZED_NAME_PROVIDER)
    private Integer provider;
    
    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private Integer type;
    
    /**
     * Gets or Sets status
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        PLANNED("planned"),
        
        PROVISIONING("provisioning"),
        
        ACTIVE("active"),
        
        OFFLINE("offline"),
        
        DEPROVISIONING("deprovisioning"),
        
        DECOMMISSIONED("decommissioned"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        StatusEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_STATUS = "status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    private StatusEnum status;
    
    public static final String SERIALIZED_NAME_TENANT = "tenant";
    @SerializedName(SERIALIZED_NAME_TENANT)
    private Integer tenant;
    
    public static final String SERIALIZED_NAME_INSTALL_DATE = "install_date";
    @SerializedName(SERIALIZED_NAME_INSTALL_DATE)
    private LocalDate installDate;
    
    public static final String SERIALIZED_NAME_TERMINATION_DATE = "termination_date";
    @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
    private LocalDate terminationDate;
    
    public static final String SERIALIZED_NAME_COMMIT_RATE = "commit_rate";
    @SerializedName(SERIALIZED_NAME_COMMIT_RATE)
    private Integer commitRate;
    
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    
    public static final String SERIALIZED_NAME_TERMINATION_A = "termination_a";
    @SerializedName(SERIALIZED_NAME_TERMINATION_A)
    private Integer terminationA;
    
    public static final String SERIALIZED_NAME_TERMINATION_Z = "termination_z";
    @SerializedName(SERIALIZED_NAME_TERMINATION_Z)
    private Integer terminationZ;
    
    public static final String SERIALIZED_NAME_COMMENTS = "comments";
    @SerializedName(SERIALIZED_NAME_COMMENTS)
    private String comments;
    
    public static final String SERIALIZED_NAME_TAGS = "tags";
    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<NestedTag> tags = null;
    
    public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
    @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
    private Object customFields;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    private OffsetDateTime lastUpdated;
    
    public WritableCircuit() {
    }
    
    
    public WritableCircuit(Integer id, URI url, String display, Integer terminationA, Integer terminationZ, OffsetDateTime created, OffsetDateTime lastUpdated) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.terminationA = terminationA;
        this.terminationZ = terminationZ;
        this.created = created;
        this.lastUpdated = lastUpdated;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public WritableCircuit cid(String cid) {
        
        this.cid = cid;
        return this;
    }
    
    /**
     * Get cid
     *
     * @return cid
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getCid() {
        return cid;
    }
    
    
    public void setCid(String cid) {
        this.cid = cid;
    }
    
    
    public WritableCircuit provider(Integer provider) {
        
        this.provider = provider;
        return this;
    }
    
    /**
     * Get provider
     *
     * @return provider
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public Integer getProvider() {
        return provider;
    }
    
    
    public void setProvider(Integer provider) {
        this.provider = provider;
    }
    
    
    public WritableCircuit type(Integer type) {
        
        this.type = type;
        return this;
    }
    
    /**
     * Get type
     *
     * @return type
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public Integer getType() {
        return type;
    }
    
    
    public void setType(Integer type) {
        this.type = type;
    }
    
    
    public WritableCircuit status(StatusEnum status) {
        
        this.status = status;
        return this;
    }
    
    /**
     * Get status
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public StatusEnum getStatus() {
        return status;
    }
    
    
    public void setStatus(StatusEnum status) {
        this.status = status;
    }
    
    
    public WritableCircuit tenant(Integer tenant) {
        
        this.tenant = tenant;
        return this;
    }
    
    /**
     * Get tenant
     *
     * @return tenant
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getTenant() {
        return tenant;
    }
    
    
    public void setTenant(Integer tenant) {
        this.tenant = tenant;
    }
    
    
    public WritableCircuit installDate(LocalDate installDate) {
        
        this.installDate = installDate;
        return this;
    }
    
    /**
     * Get installDate
     *
     * @return installDate
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public LocalDate getInstallDate() {
        return installDate;
    }
    
    
    public void setInstallDate(LocalDate installDate) {
        this.installDate = installDate;
    }
    
    
    public WritableCircuit terminationDate(LocalDate terminationDate) {
        
        this.terminationDate = terminationDate;
        return this;
    }
    
    /**
     * Get terminationDate
     *
     * @return terminationDate
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public LocalDate getTerminationDate() {
        return terminationDate;
    }
    
    
    public void setTerminationDate(LocalDate terminationDate) {
        this.terminationDate = terminationDate;
    }
    
    
    public WritableCircuit commitRate(Integer commitRate) {
        
        this.commitRate = commitRate;
        return this;
    }
    
    /**
     * Get commitRate
     * minimum: 0
     * maximum: 2147483647
     *
     * @return commitRate
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getCommitRate() {
        return commitRate;
    }
    
    
    public void setCommitRate(Integer commitRate) {
        this.commitRate = commitRate;
    }
    
    
    public WritableCircuit description(String description) {
        
        this.description = description;
        return this;
    }
    
    /**
     * Get description
     *
     * @return description
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDescription() {
        return description;
    }
    
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    
    /**
     * Get terminationA
     *
     * @return terminationA
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getTerminationA() {
        return terminationA;
    }
    
    
    /**
     * Get terminationZ
     *
     * @return terminationZ
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getTerminationZ() {
        return terminationZ;
    }
    
    
    public WritableCircuit comments(String comments) {
        
        this.comments = comments;
        return this;
    }
    
    /**
     * Get comments
     *
     * @return comments
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getComments() {
        return comments;
    }
    
    
    public void setComments(String comments) {
        this.comments = comments;
    }
    
    
    public WritableCircuit tags(List<NestedTag> tags) {
        
        this.tags = tags;
        return this;
    }
    
    public WritableCircuit addTagsItem(NestedTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }
    
    /**
     * Get tags
     *
     * @return tags
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public List<NestedTag> getTags() {
        return tags;
    }
    
    
    public void setTags(List<NestedTag> tags) {
        this.tags = tags;
    }
    
    
    public WritableCircuit customFields(Object customFields) {
        
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Get customFields
     *
     * @return customFields
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Object getCustomFields() {
        return customFields;
    }
    
    
    public void setCustomFields(Object customFields) {
        this.customFields = customFields;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WritableCircuit writableCircuit = (WritableCircuit) o;
        return Objects.equals(this.id, writableCircuit.id) && Objects.equals(this.url, writableCircuit.url) && Objects.equals(this.display, writableCircuit.display) && Objects.equals(this.cid, writableCircuit.cid) && Objects.equals(this.provider, writableCircuit.provider) && Objects.equals(this.type, writableCircuit.type) && Objects.equals(this.status, writableCircuit.status) && Objects.equals(this.tenant, writableCircuit.tenant) && Objects.equals(this.installDate, writableCircuit.installDate) && Objects.equals(this.terminationDate, writableCircuit.terminationDate) && Objects.equals(this.commitRate, writableCircuit.commitRate) && Objects.equals(this.description, writableCircuit.description) && Objects.equals(this.terminationA, writableCircuit.terminationA) && Objects.equals(this.terminationZ, writableCircuit.terminationZ) && Objects.equals(this.comments, writableCircuit.comments) && Objects.equals(this.tags, writableCircuit.tags) && Objects.equals(this.customFields, writableCircuit.customFields) && Objects.equals(this.created, writableCircuit.created) && Objects.equals(this.lastUpdated, writableCircuit.lastUpdated);
    }
    
    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, cid, provider, type, status, tenant, installDate, terminationDate, commitRate, description, terminationA, terminationZ, comments, tags, customFields, created, lastUpdated);
    }
    
    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WritableCircuit {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
        sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
        sb.append("    installDate: ").append(toIndentedString(installDate)).append("\n");
        sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
        sb.append("    commitRate: ").append(toIndentedString(commitRate)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    terminationA: ").append(toIndentedString(terminationA)).append("\n");
        sb.append("    terminationZ: ").append(toIndentedString(terminationZ)).append("\n");
        sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("cid");
        openapiFields.add("provider");
        openapiFields.add("type");
        openapiFields.add("status");
        openapiFields.add("tenant");
        openapiFields.add("install_date");
        openapiFields.add("termination_date");
        openapiFields.add("commit_rate");
        openapiFields.add("description");
        openapiFields.add("termination_a");
        openapiFields.add("termination_z");
        openapiFields.add("comments");
        openapiFields.add("tags");
        openapiFields.add("custom_fields");
        openapiFields.add("created");
        openapiFields.add("last_updated");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("cid");
        openapiRequiredFields.add("provider");
        openapiRequiredFields.add("type");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to WritableCircuit
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (WritableCircuit.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in WritableCircuit is not found in the empty JSON string", WritableCircuit.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!WritableCircuit.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableCircuit` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : WritableCircuit.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        if (jsonObj.get("cid") != null && !jsonObj.get("cid").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `cid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid")
                    .toString()));
        }
        if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status")
                    .toString()));
        }
        if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description")
                    .toString()));
        }
        if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments")
                    .toString()));
        }
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
            // ensure the json data is an array
            if (!jsonObj.get("tags").isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags")
                        .toString()));
            }
            
            // validate the optional field `tags` (array)
            for (int i = 0; i < jsonArraytags.size(); i++) {
                NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
            }
            ;
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WritableCircuit.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WritableCircuit' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<WritableCircuit> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(WritableCircuit.class));
            
            return (TypeAdapter<T>) new TypeAdapter<WritableCircuit>() {
                @Override
                public void write(JsonWriter out, WritableCircuit value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public WritableCircuit read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of WritableCircuit given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of WritableCircuit
     *
     * @throws IOException if the JSON string is invalid with respect to WritableCircuit
     */
    public static WritableCircuit fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WritableCircuit.class);
    }
    
    /**
     * Convert an instance of WritableCircuit to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

