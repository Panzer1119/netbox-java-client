/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * AvailablePrefix
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class AvailablePrefix {
    public static final String SERIALIZED_NAME_FAMILY = "family";
    @SerializedName(SERIALIZED_NAME_FAMILY)
    private Integer family;
    
    public static final String SERIALIZED_NAME_PREFIX = "prefix";
    @SerializedName(SERIALIZED_NAME_PREFIX)
    private String prefix;
    
    public static final String SERIALIZED_NAME_VRF = "vrf";
    @SerializedName(SERIALIZED_NAME_VRF)
    private NestedVRF vrf;
    
    public AvailablePrefix() {
    }
    
    
    public AvailablePrefix(Integer family, String prefix) {
        this();
        this.family = family;
        this.prefix = prefix;
    }
    
    /**
     * Get family
     *
     * @return family
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getFamily() {
        return family;
    }
    
    
    /**
     * Get prefix
     *
     * @return prefix
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getPrefix() {
        return prefix;
    }
    
    
    public AvailablePrefix vrf(NestedVRF vrf) {
        
        this.vrf = vrf;
        return this;
    }
    
    /**
     * Get vrf
     *
     * @return vrf
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedVRF getVrf() {
        return vrf;
    }
    
    
    public void setVrf(NestedVRF vrf) {
        this.vrf = vrf;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AvailablePrefix availablePrefix = (AvailablePrefix) o;
        return Objects.equals(this.family, availablePrefix.family) && Objects.equals(this.prefix, availablePrefix.prefix) && Objects.equals(this.vrf, availablePrefix.vrf);
    }
    
    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(family, prefix, vrf);
    }
    
    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AvailablePrefix {\n");
        sb.append("    family: ").append(toIndentedString(family)).append("\n");
        sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
        sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("family");
        openapiFields.add("prefix");
        openapiFields.add("vrf");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to AvailablePrefix
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (AvailablePrefix.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in AvailablePrefix is not found in the empty JSON string", AvailablePrefix.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!AvailablePrefix.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailablePrefix` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        if (jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix")
                    .toString()));
        }
        // validate the optional field `vrf`
        if (jsonObj.getAsJsonObject("vrf") != null) {
            NestedVRF.validateJsonObject(jsonObj.getAsJsonObject("vrf"));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AvailablePrefix.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AvailablePrefix' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AvailablePrefix> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(AvailablePrefix.class));
            
            return (TypeAdapter<T>) new TypeAdapter<AvailablePrefix>() {
                @Override
                public void write(JsonWriter out, AvailablePrefix value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public AvailablePrefix read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of AvailablePrefix given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of AvailablePrefix
     *
     * @throws IOException if the JSON string is invalid with respect to AvailablePrefix
     */
    public static AvailablePrefix fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AvailablePrefix.class);
    }
    
    /**
     * Convert an instance of AvailablePrefix to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

