/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * ExportTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class ExportTemplate {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
    @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
    private String contentType;
    
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    
    public static final String SERIALIZED_NAME_TEMPLATE_CODE = "template_code";
    @SerializedName(SERIALIZED_NAME_TEMPLATE_CODE)
    private String templateCode;
    
    public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
    @SerializedName(SERIALIZED_NAME_MIME_TYPE)
    private String mimeType;
    
    public static final String SERIALIZED_NAME_FILE_EXTENSION = "file_extension";
    @SerializedName(SERIALIZED_NAME_FILE_EXTENSION)
    private String fileExtension;
    
    public static final String SERIALIZED_NAME_AS_ATTACHMENT = "as_attachment";
    @SerializedName(SERIALIZED_NAME_AS_ATTACHMENT)
    private Boolean asAttachment;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    private OffsetDateTime lastUpdated;
    
    public ExportTemplate() {
    }
    
    
    public ExportTemplate(Integer id, URI url, String display, OffsetDateTime created, OffsetDateTime lastUpdated) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.created = created;
        this.lastUpdated = lastUpdated;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public ExportTemplate contentType(String contentType) {
        
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Get contentType
     *
     * @return contentType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getContentType() {
        return contentType;
    }
    
    
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }
    
    
    public ExportTemplate name(String name) {
        
        this.name = name;
        return this;
    }
    
    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getName() {
        return name;
    }
    
    
    public void setName(String name) {
        this.name = name;
    }
    
    
    public ExportTemplate description(String description) {
        
        this.description = description;
        return this;
    }
    
    /**
     * Get description
     *
     * @return description
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDescription() {
        return description;
    }
    
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    
    public ExportTemplate templateCode(String templateCode) {
        
        this.templateCode = templateCode;
        return this;
    }
    
    /**
     * Jinja2 template code. The list of objects being exported is passed as a context variable named &lt;code&gt;queryset&lt;/code&gt;.
     *
     * @return templateCode
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.")
    
    public String getTemplateCode() {
        return templateCode;
    }
    
    
    public void setTemplateCode(String templateCode) {
        this.templateCode = templateCode;
    }
    
    
    public ExportTemplate mimeType(String mimeType) {
        
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * Defaults to &lt;code&gt;text/plain&lt;/code&gt;
     *
     * @return mimeType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Defaults to <code>text/plain</code>")
    
    public String getMimeType() {
        return mimeType;
    }
    
    
    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }
    
    
    public ExportTemplate fileExtension(String fileExtension) {
        
        this.fileExtension = fileExtension;
        return this;
    }
    
    /**
     * Extension to append to the rendered filename
     *
     * @return fileExtension
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Extension to append to the rendered filename")
    
    public String getFileExtension() {
        return fileExtension;
    }
    
    
    public void setFileExtension(String fileExtension) {
        this.fileExtension = fileExtension;
    }
    
    
    public ExportTemplate asAttachment(Boolean asAttachment) {
        
        this.asAttachment = asAttachment;
        return this;
    }
    
    /**
     * Download file as attachment
     *
     * @return asAttachment
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Download file as attachment")
    
    public Boolean getAsAttachment() {
        return asAttachment;
    }
    
    
    public void setAsAttachment(Boolean asAttachment) {
        this.asAttachment = asAttachment;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExportTemplate exportTemplate = (ExportTemplate) o;
        return Objects.equals(this.id, exportTemplate.id) && Objects.equals(this.url, exportTemplate.url) && Objects.equals(this.display, exportTemplate.display) && Objects.equals(this.contentType, exportTemplate.contentType) && Objects.equals(this.name, exportTemplate.name) && Objects.equals(this.description, exportTemplate.description) && Objects.equals(this.templateCode, exportTemplate.templateCode) && Objects.equals(this.mimeType, exportTemplate.mimeType) && Objects.equals(this.fileExtension, exportTemplate.fileExtension) && Objects.equals(this.asAttachment, exportTemplate.asAttachment) && Objects.equals(this.created, exportTemplate.created) && Objects.equals(this.lastUpdated, exportTemplate.lastUpdated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, contentType, name, description, templateCode, mimeType, fileExtension, asAttachment, created, lastUpdated);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExportTemplate {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    templateCode: ").append(toIndentedString(templateCode)).append("\n");
        sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
        sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
        sb.append("    asAttachment: ").append(toIndentedString(asAttachment)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("content_type");
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("template_code");
        openapiFields.add("mime_type");
        openapiFields.add("file_extension");
        openapiFields.add("as_attachment");
        openapiFields.add("created");
        openapiFields.add("last_updated");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("content_type");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("template_code");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to ExportTemplate
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (ExportTemplate.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in ExportTemplate is not found in the empty JSON string", ExportTemplate.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!ExportTemplate.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportTemplate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ExportTemplate.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        if (jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type")
                    .toString()));
        }
        if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name")
                    .toString()));
        }
        if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description")
                    .toString()));
        }
        if (jsonObj.get("template_code") != null && !jsonObj.get("template_code").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `template_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_code")
                    .toString()));
        }
        if (jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type")
                    .toString()));
        }
        if (jsonObj.get("file_extension") != null && !jsonObj.get("file_extension").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_extension")
                    .toString()));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExportTemplate.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ExportTemplate' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExportTemplate> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(ExportTemplate.class));
            
            return (TypeAdapter<T>) new TypeAdapter<ExportTemplate>() {
                @Override
                public void write(JsonWriter out, ExportTemplate value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public ExportTemplate read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of ExportTemplate given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of ExportTemplate
     *
     * @throws IOException if the JSON string is invalid with respect to ExportTemplate
     */
    public static ExportTemplate fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ExportTemplate.class);
    }
    
    /**
     * Convert an instance of ExportTemplate to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

