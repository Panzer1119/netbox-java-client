/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * AvailableVLAN
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class AvailableVLAN {
    public static final String SERIALIZED_NAME_VID = "vid";
    @SerializedName(SERIALIZED_NAME_VID)
    private Integer vid;
    
    public static final String SERIALIZED_NAME_GROUP = "group";
    @SerializedName(SERIALIZED_NAME_GROUP)
    private NestedVLANGroup group;
    
    public AvailableVLAN() {
    }
    
    
    public AvailableVLAN(Integer vid) {
        this();
        this.vid = vid;
    }
    
    /**
     * Get vid
     *
     * @return vid
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getVid() {
        return vid;
    }
    
    
    public AvailableVLAN group(NestedVLANGroup group) {
        
        this.group = group;
        return this;
    }
    
    /**
     * Get group
     *
     * @return group
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedVLANGroup getGroup() {
        return group;
    }
    
    
    public void setGroup(NestedVLANGroup group) {
        this.group = group;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AvailableVLAN availableVLAN = (AvailableVLAN) o;
        return Objects.equals(this.vid, availableVLAN.vid) && Objects.equals(this.group, availableVLAN.group);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(vid, group);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AvailableVLAN {\n");
        sb.append("    vid: ").append(toIndentedString(vid)).append("\n");
        sb.append("    group: ").append(toIndentedString(group)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("vid");
        openapiFields.add("group");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to AvailableVLAN
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (AvailableVLAN.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableVLAN is not found in the empty JSON string", AvailableVLAN.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!AvailableVLAN.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableVLAN` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        // validate the optional field `group`
        if (jsonObj.getAsJsonObject("group") != null) {
            NestedVLANGroup.validateJsonObject(jsonObj.getAsJsonObject("group"));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AvailableVLAN.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AvailableVLAN' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AvailableVLAN> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(AvailableVLAN.class));
            
            return (TypeAdapter<T>) new TypeAdapter<AvailableVLAN>() {
                @Override
                public void write(JsonWriter out, AvailableVLAN value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public AvailableVLAN read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of AvailableVLAN given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of AvailableVLAN
     *
     * @throws IOException if the JSON string is invalid with respect to AvailableVLAN
     */
    public static AvailableVLAN fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AvailableVLAN.class);
    }
    
    /**
     * Convert an instance of AvailableVLAN to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

