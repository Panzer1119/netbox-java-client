/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * CustomLink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class CustomLink {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
    @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
    private String contentType;
    
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    
    public static final String SERIALIZED_NAME_ENABLED = "enabled";
    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;
    
    public static final String SERIALIZED_NAME_LINK_TEXT = "link_text";
    @SerializedName(SERIALIZED_NAME_LINK_TEXT)
    private String linkText;
    
    public static final String SERIALIZED_NAME_LINK_URL = "link_url";
    @SerializedName(SERIALIZED_NAME_LINK_URL)
    private String linkUrl;
    
    public static final String SERIALIZED_NAME_WEIGHT = "weight";
    @SerializedName(SERIALIZED_NAME_WEIGHT)
    private Integer weight;
    
    public static final String SERIALIZED_NAME_GROUP_NAME = "group_name";
    @SerializedName(SERIALIZED_NAME_GROUP_NAME)
    private String groupName;
    
    /**
     * The class of the first link in a group will be used for the dropdown button
     */
    @JsonAdapter(ButtonClassEnum.Adapter.class)
    public enum ButtonClassEnum {
        OUTLINE_DARK("outline-dark"),
        
        BLUE("blue"),
        
        INDIGO("indigo"),
        
        PURPLE("purple"),
        
        PINK("pink"),
        
        RED("red"),
        
        ORANGE("orange"),
        
        YELLOW("yellow"),
        
        GREEN("green"),
        
        TEAL("teal"),
        
        CYAN("cyan"),
        
        GRAY("gray"),
        
        BLACK("black"),
        
        WHITE("white"),
        
        GHOST_DARK("ghost-dark"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        ButtonClassEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static ButtonClassEnum fromValue(String value) {
            for (ButtonClassEnum b : ButtonClassEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<ButtonClassEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ButtonClassEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public ButtonClassEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ButtonClassEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_BUTTON_CLASS = "button_class";
    @SerializedName(SERIALIZED_NAME_BUTTON_CLASS)
    private ButtonClassEnum buttonClass;
    
    public static final String SERIALIZED_NAME_NEW_WINDOW = "new_window";
    @SerializedName(SERIALIZED_NAME_NEW_WINDOW)
    private Boolean newWindow;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    private OffsetDateTime lastUpdated;
    
    public CustomLink() {
    }
    
    
    public CustomLink(Integer id, URI url, String display, OffsetDateTime created, OffsetDateTime lastUpdated) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.created = created;
        this.lastUpdated = lastUpdated;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public CustomLink contentType(String contentType) {
        
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Get contentType
     *
     * @return contentType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getContentType() {
        return contentType;
    }
    
    
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }
    
    
    public CustomLink name(String name) {
        
        this.name = name;
        return this;
    }
    
    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getName() {
        return name;
    }
    
    
    public void setName(String name) {
        this.name = name;
    }
    
    
    public CustomLink enabled(Boolean enabled) {
        
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Get enabled
     *
     * @return enabled
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Boolean getEnabled() {
        return enabled;
    }
    
    
    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }
    
    
    public CustomLink linkText(String linkText) {
        
        this.linkText = linkText;
        return this;
    }
    
    /**
     * Jinja2 template code for link text
     *
     * @return linkText
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Jinja2 template code for link text")
    
    public String getLinkText() {
        return linkText;
    }
    
    
    public void setLinkText(String linkText) {
        this.linkText = linkText;
    }
    
    
    public CustomLink linkUrl(String linkUrl) {
        
        this.linkUrl = linkUrl;
        return this;
    }
    
    /**
     * Jinja2 template code for link URL
     *
     * @return linkUrl
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Jinja2 template code for link URL")
    
    public String getLinkUrl() {
        return linkUrl;
    }
    
    
    public void setLinkUrl(String linkUrl) {
        this.linkUrl = linkUrl;
    }
    
    
    public CustomLink weight(Integer weight) {
        
        this.weight = weight;
        return this;
    }
    
    /**
     * Get weight
     * minimum: 0
     * maximum: 32767
     *
     * @return weight
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getWeight() {
        return weight;
    }
    
    
    public void setWeight(Integer weight) {
        this.weight = weight;
    }
    
    
    public CustomLink groupName(String groupName) {
        
        this.groupName = groupName;
        return this;
    }
    
    /**
     * Links with the same group will appear as a dropdown menu
     *
     * @return groupName
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Links with the same group will appear as a dropdown menu")
    
    public String getGroupName() {
        return groupName;
    }
    
    
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }
    
    
    public CustomLink buttonClass(ButtonClassEnum buttonClass) {
        
        this.buttonClass = buttonClass;
        return this;
    }
    
    /**
     * The class of the first link in a group will be used for the dropdown button
     *
     * @return buttonClass
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The class of the first link in a group will be used for the dropdown button")
    
    public ButtonClassEnum getButtonClass() {
        return buttonClass;
    }
    
    
    public void setButtonClass(ButtonClassEnum buttonClass) {
        this.buttonClass = buttonClass;
    }
    
    
    public CustomLink newWindow(Boolean newWindow) {
        
        this.newWindow = newWindow;
        return this;
    }
    
    /**
     * Force link to open in a new window
     *
     * @return newWindow
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Force link to open in a new window")
    
    public Boolean getNewWindow() {
        return newWindow;
    }
    
    
    public void setNewWindow(Boolean newWindow) {
        this.newWindow = newWindow;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomLink customLink = (CustomLink) o;
        return Objects.equals(this.id, customLink.id) && Objects.equals(this.url, customLink.url) && Objects.equals(this.display, customLink.display) && Objects.equals(this.contentType, customLink.contentType) && Objects.equals(this.name, customLink.name) && Objects.equals(this.enabled, customLink.enabled) && Objects.equals(this.linkText, customLink.linkText) && Objects.equals(this.linkUrl, customLink.linkUrl) && Objects.equals(this.weight, customLink.weight) && Objects.equals(this.groupName, customLink.groupName) && Objects.equals(this.buttonClass, customLink.buttonClass) && Objects.equals(this.newWindow, customLink.newWindow) && Objects.equals(this.created, customLink.created) && Objects.equals(this.lastUpdated, customLink.lastUpdated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, contentType, name, enabled, linkText, linkUrl, weight, groupName, buttonClass, newWindow, created, lastUpdated);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CustomLink {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    linkText: ").append(toIndentedString(linkText)).append("\n");
        sb.append("    linkUrl: ").append(toIndentedString(linkUrl)).append("\n");
        sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
        sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
        sb.append("    buttonClass: ").append(toIndentedString(buttonClass)).append("\n");
        sb.append("    newWindow: ").append(toIndentedString(newWindow)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("content_type");
        openapiFields.add("name");
        openapiFields.add("enabled");
        openapiFields.add("link_text");
        openapiFields.add("link_url");
        openapiFields.add("weight");
        openapiFields.add("group_name");
        openapiFields.add("button_class");
        openapiFields.add("new_window");
        openapiFields.add("created");
        openapiFields.add("last_updated");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("content_type");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("link_text");
        openapiRequiredFields.add("link_url");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to CustomLink
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (CustomLink.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in CustomLink is not found in the empty JSON string", CustomLink.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CustomLink.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomLink` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CustomLink.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        if (jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type")
                    .toString()));
        }
        if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name")
                    .toString()));
        }
        if (jsonObj.get("link_text") != null && !jsonObj.get("link_text").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `link_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_text")
                    .toString()));
        }
        if (jsonObj.get("link_url") != null && !jsonObj.get("link_url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `link_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_url")
                    .toString()));
        }
        if (jsonObj.get("group_name") != null && !jsonObj.get("group_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_name")
                    .toString()));
        }
        if (jsonObj.get("button_class") != null && !jsonObj.get("button_class").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `button_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_class")
                    .toString()));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CustomLink.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CustomLink' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CustomLink> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(CustomLink.class));
            
            return (TypeAdapter<T>) new TypeAdapter<CustomLink>() {
                @Override
                public void write(JsonWriter out, CustomLink value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public CustomLink read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of CustomLink given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of CustomLink
     *
     * @throws IOException if the JSON string is invalid with respect to CustomLink
     */
    public static CustomLink fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CustomLink.class);
    }
    
    /**
     * Convert an instance of CustomLink to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

