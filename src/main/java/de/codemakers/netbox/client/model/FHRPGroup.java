/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.Map.Entry;

/**
 * FHRPGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class FHRPGroup {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    /**
     * Gets or Sets protocol
     */
    @JsonAdapter(ProtocolEnum.Adapter.class)
    public enum ProtocolEnum {
        VRRP2("vrrp2"),
        
        VRRP3("vrrp3"),
        
        CARP("carp"),
        
        CLUSTERXL("clusterxl"),
        
        HSRP("hsrp"),
        
        GLBP("glbp"),
        
        OTHER("other"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        ProtocolEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static ProtocolEnum fromValue(String value) {
            for (ProtocolEnum b : ProtocolEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<ProtocolEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ProtocolEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
    @SerializedName(SERIALIZED_NAME_PROTOCOL)
    private ProtocolEnum protocol;
    
    public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
    @SerializedName(SERIALIZED_NAME_GROUP_ID)
    private Integer groupId;
    
    /**
     * Gets or Sets authType
     */
    @JsonAdapter(AuthTypeEnum.Adapter.class)
    public enum AuthTypeEnum {
        PLAINTEXT("plaintext"),
        
        MD5("md5"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        AuthTypeEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static AuthTypeEnum fromValue(String value) {
            for (AuthTypeEnum b : AuthTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<AuthTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AuthTypeEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
    @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
    private AuthTypeEnum authType;
    
    public static final String SERIALIZED_NAME_AUTH_KEY = "auth_key";
    @SerializedName(SERIALIZED_NAME_AUTH_KEY)
    private String authKey;
    
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    
    public static final String SERIALIZED_NAME_IP_ADDRESSES = "ip_addresses";
    @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
    private List<NestedIPAddress> ipAddresses = null;
    
    public static final String SERIALIZED_NAME_TAGS = "tags";
    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<NestedTag> tags = null;
    
    public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
    @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
    private Object customFields;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    private OffsetDateTime lastUpdated;
    
    public FHRPGroup() {
    }
    
    
    public FHRPGroup(Integer id, URI url, String display, List<NestedIPAddress> ipAddresses, OffsetDateTime created, OffsetDateTime lastUpdated) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.ipAddresses = ipAddresses;
        this.created = created;
        this.lastUpdated = lastUpdated;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public FHRPGroup protocol(ProtocolEnum protocol) {
        
        this.protocol = protocol;
        return this;
    }
    
    /**
     * Get protocol
     *
     * @return protocol
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public ProtocolEnum getProtocol() {
        return protocol;
    }
    
    
    public void setProtocol(ProtocolEnum protocol) {
        this.protocol = protocol;
    }
    
    
    public FHRPGroup groupId(Integer groupId) {
        
        this.groupId = groupId;
        return this;
    }
    
    /**
     * Get groupId
     * minimum: 0
     * maximum: 32767
     *
     * @return groupId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public Integer getGroupId() {
        return groupId;
    }
    
    
    public void setGroupId(Integer groupId) {
        this.groupId = groupId;
    }
    
    
    public FHRPGroup authType(AuthTypeEnum authType) {
        
        this.authType = authType;
        return this;
    }
    
    /**
     * Get authType
     *
     * @return authType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public AuthTypeEnum getAuthType() {
        return authType;
    }
    
    
    public void setAuthType(AuthTypeEnum authType) {
        this.authType = authType;
    }
    
    
    public FHRPGroup authKey(String authKey) {
        
        this.authKey = authKey;
        return this;
    }
    
    /**
     * Get authKey
     *
     * @return authKey
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getAuthKey() {
        return authKey;
    }
    
    
    public void setAuthKey(String authKey) {
        this.authKey = authKey;
    }
    
    
    public FHRPGroup description(String description) {
        
        this.description = description;
        return this;
    }
    
    /**
     * Get description
     *
     * @return description
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDescription() {
        return description;
    }
    
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    
    /**
     * Get ipAddresses
     *
     * @return ipAddresses
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public List<NestedIPAddress> getIpAddresses() {
        return ipAddresses;
    }
    
    
    public FHRPGroup tags(List<NestedTag> tags) {
        
        this.tags = tags;
        return this;
    }
    
    public FHRPGroup addTagsItem(NestedTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }
    
    /**
     * Get tags
     *
     * @return tags
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public List<NestedTag> getTags() {
        return tags;
    }
    
    
    public void setTags(List<NestedTag> tags) {
        this.tags = tags;
    }
    
    
    public FHRPGroup customFields(Object customFields) {
        
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Get customFields
     *
     * @return customFields
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Object getCustomFields() {
        return customFields;
    }
    
    
    public void setCustomFields(Object customFields) {
        this.customFields = customFields;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FHRPGroup fhRPGroup = (FHRPGroup) o;
        return Objects.equals(this.id, fhRPGroup.id) && Objects.equals(this.url, fhRPGroup.url) && Objects.equals(this.display, fhRPGroup.display) && Objects.equals(this.protocol, fhRPGroup.protocol) && Objects.equals(this.groupId, fhRPGroup.groupId) && Objects.equals(this.authType, fhRPGroup.authType) && Objects.equals(this.authKey, fhRPGroup.authKey) && Objects.equals(this.description, fhRPGroup.description) && Objects.equals(this.ipAddresses, fhRPGroup.ipAddresses) && Objects.equals(this.tags, fhRPGroup.tags) && Objects.equals(this.customFields, fhRPGroup.customFields) && Objects.equals(this.created, fhRPGroup.created) && Objects.equals(this.lastUpdated, fhRPGroup.lastUpdated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, protocol, groupId, authType, authKey, description, ipAddresses, tags, customFields, created, lastUpdated);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FHRPGroup {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
        sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
        sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
        sb.append("    authKey: ").append(toIndentedString(authKey)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("protocol");
        openapiFields.add("group_id");
        openapiFields.add("auth_type");
        openapiFields.add("auth_key");
        openapiFields.add("description");
        openapiFields.add("ip_addresses");
        openapiFields.add("tags");
        openapiFields.add("custom_fields");
        openapiFields.add("created");
        openapiFields.add("last_updated");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("protocol");
        openapiRequiredFields.add("group_id");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to FHRPGroup
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (FHRPGroup.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in FHRPGroup is not found in the empty JSON string", FHRPGroup.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FHRPGroup.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FHRPGroup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : FHRPGroup.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol")
                    .toString()));
        }
        if (jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type")
                    .toString()));
        }
        if (jsonObj.get("auth_key") != null && !jsonObj.get("auth_key").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `auth_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_key")
                    .toString()));
        }
        if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description")
                    .toString()));
        }
        JsonArray jsonArrayipAddresses = jsonObj.getAsJsonArray("ip_addresses");
        if (jsonArrayipAddresses != null) {
            // ensure the json data is an array
            if (!jsonObj.get("ip_addresses").isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected the field `ip_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("ip_addresses")
                        .toString()));
            }
            
            // validate the optional field `ip_addresses` (array)
            for (int i = 0; i < jsonArrayipAddresses.size(); i++) {
                NestedIPAddress.validateJsonObject(jsonArrayipAddresses.get(i).getAsJsonObject());
            }
            ;
        }
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
            // ensure the json data is an array
            if (!jsonObj.get("tags").isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags")
                        .toString()));
            }
            
            // validate the optional field `tags` (array)
            for (int i = 0; i < jsonArraytags.size(); i++) {
                NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
            }
            ;
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FHRPGroup.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FHRPGroup' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FHRPGroup> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(FHRPGroup.class));
            
            return (TypeAdapter<T>) new TypeAdapter<FHRPGroup>() {
                @Override
                public void write(JsonWriter out, FHRPGroup value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public FHRPGroup read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of FHRPGroup given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of FHRPGroup
     *
     * @throws IOException if the JSON string is invalid with respect to FHRPGroup
     */
    public static FHRPGroup fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FHRPGroup.class);
    }
    
    /**
     * Convert an instance of FHRPGroup to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

