/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.Map.Entry;

/**
 * VMInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class VMInterface {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    public static final String SERIALIZED_NAME_VIRTUAL_MACHINE = "virtual_machine";
    @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE)
    private NestedVirtualMachine virtualMachine;
    
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    
    public static final String SERIALIZED_NAME_ENABLED = "enabled";
    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;
    
    public static final String SERIALIZED_NAME_PARENT = "parent";
    @SerializedName(SERIALIZED_NAME_PARENT)
    private NestedVMInterface parent;
    
    public static final String SERIALIZED_NAME_BRIDGE = "bridge";
    @SerializedName(SERIALIZED_NAME_BRIDGE)
    private NestedVMInterface bridge;
    
    public static final String SERIALIZED_NAME_MTU = "mtu";
    @SerializedName(SERIALIZED_NAME_MTU)
    private Integer mtu;
    
    public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
    @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
    private String macAddress;
    
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    
    public static final String SERIALIZED_NAME_MODE = "mode";
    @SerializedName(SERIALIZED_NAME_MODE)
    private Mode mode;
    
    public static final String SERIALIZED_NAME_UNTAGGED_VLAN = "untagged_vlan";
    @SerializedName(SERIALIZED_NAME_UNTAGGED_VLAN)
    private NestedVLAN untaggedVlan;
    
    public static final String SERIALIZED_NAME_TAGGED_VLANS = "tagged_vlans";
    @SerializedName(SERIALIZED_NAME_TAGGED_VLANS)
    private Set<NestedVLAN> taggedVlans = null;
    
    public static final String SERIALIZED_NAME_VRF = "vrf";
    @SerializedName(SERIALIZED_NAME_VRF)
    private NestedVRF vrf;
    
    public static final String SERIALIZED_NAME_L2VPN_TERMINATION = "l2vpn_termination";
    @SerializedName(SERIALIZED_NAME_L2VPN_TERMINATION)
    private NestedL2VPNTermination l2vpnTermination;
    
    public static final String SERIALIZED_NAME_TAGS = "tags";
    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<NestedTag> tags = null;
    
    public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
    @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
    private Object customFields;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    private OffsetDateTime lastUpdated;
    
    public static final String SERIALIZED_NAME_COUNT_IPADDRESSES = "count_ipaddresses";
    @SerializedName(SERIALIZED_NAME_COUNT_IPADDRESSES)
    private Integer countIpaddresses;
    
    public static final String SERIALIZED_NAME_COUNT_FHRP_GROUPS = "count_fhrp_groups";
    @SerializedName(SERIALIZED_NAME_COUNT_FHRP_GROUPS)
    private Integer countFhrpGroups;
    
    public VMInterface() {
    }
    
    
    public VMInterface(Integer id, URI url, String display, OffsetDateTime created, OffsetDateTime lastUpdated, Integer countIpaddresses, Integer countFhrpGroups) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.created = created;
        this.lastUpdated = lastUpdated;
        this.countIpaddresses = countIpaddresses;
        this.countFhrpGroups = countFhrpGroups;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public VMInterface virtualMachine(NestedVirtualMachine virtualMachine) {
        
        this.virtualMachine = virtualMachine;
        return this;
    }
    
    /**
     * Get virtualMachine
     *
     * @return virtualMachine
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(required = true, value = "")
    
    public NestedVirtualMachine getVirtualMachine() {
        return virtualMachine;
    }
    
    
    public void setVirtualMachine(NestedVirtualMachine virtualMachine) {
        this.virtualMachine = virtualMachine;
    }
    
    
    public VMInterface name(String name) {
        
        this.name = name;
        return this;
    }
    
    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getName() {
        return name;
    }
    
    
    public void setName(String name) {
        this.name = name;
    }
    
    
    public VMInterface enabled(Boolean enabled) {
        
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Get enabled
     *
     * @return enabled
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Boolean getEnabled() {
        return enabled;
    }
    
    
    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }
    
    
    public VMInterface parent(NestedVMInterface parent) {
        
        this.parent = parent;
        return this;
    }
    
    /**
     * Get parent
     *
     * @return parent
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedVMInterface getParent() {
        return parent;
    }
    
    
    public void setParent(NestedVMInterface parent) {
        this.parent = parent;
    }
    
    
    public VMInterface bridge(NestedVMInterface bridge) {
        
        this.bridge = bridge;
        return this;
    }
    
    /**
     * Get bridge
     *
     * @return bridge
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedVMInterface getBridge() {
        return bridge;
    }
    
    
    public void setBridge(NestedVMInterface bridge) {
        this.bridge = bridge;
    }
    
    
    public VMInterface mtu(Integer mtu) {
        
        this.mtu = mtu;
        return this;
    }
    
    /**
     * Get mtu
     * minimum: 1
     * maximum: 65536
     *
     * @return mtu
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getMtu() {
        return mtu;
    }
    
    
    public void setMtu(Integer mtu) {
        this.mtu = mtu;
    }
    
    
    public VMInterface macAddress(String macAddress) {
        
        this.macAddress = macAddress;
        return this;
    }
    
    /**
     * Get macAddress
     *
     * @return macAddress
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getMacAddress() {
        return macAddress;
    }
    
    
    public void setMacAddress(String macAddress) {
        this.macAddress = macAddress;
    }
    
    
    public VMInterface description(String description) {
        
        this.description = description;
        return this;
    }
    
    /**
     * Get description
     *
     * @return description
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDescription() {
        return description;
    }
    
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    
    public VMInterface mode(Mode mode) {
        
        this.mode = mode;
        return this;
    }
    
    /**
     * Get mode
     *
     * @return mode
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Mode getMode() {
        return mode;
    }
    
    
    public void setMode(Mode mode) {
        this.mode = mode;
    }
    
    
    public VMInterface untaggedVlan(NestedVLAN untaggedVlan) {
        
        this.untaggedVlan = untaggedVlan;
        return this;
    }
    
    /**
     * Get untaggedVlan
     *
     * @return untaggedVlan
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedVLAN getUntaggedVlan() {
        return untaggedVlan;
    }
    
    
    public void setUntaggedVlan(NestedVLAN untaggedVlan) {
        this.untaggedVlan = untaggedVlan;
    }
    
    
    public VMInterface taggedVlans(Set<NestedVLAN> taggedVlans) {
        
        this.taggedVlans = taggedVlans;
        return this;
    }
    
    public VMInterface addTaggedVlansItem(NestedVLAN taggedVlansItem) {
        if (this.taggedVlans == null) {
            this.taggedVlans = new LinkedHashSet<>();
        }
        this.taggedVlans.add(taggedVlansItem);
        return this;
    }
    
    /**
     * Get taggedVlans
     *
     * @return taggedVlans
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Set<NestedVLAN> getTaggedVlans() {
        return taggedVlans;
    }
    
    
    public void setTaggedVlans(Set<NestedVLAN> taggedVlans) {
        this.taggedVlans = taggedVlans;
    }
    
    
    public VMInterface vrf(NestedVRF vrf) {
        
        this.vrf = vrf;
        return this;
    }
    
    /**
     * Get vrf
     *
     * @return vrf
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedVRF getVrf() {
        return vrf;
    }
    
    
    public void setVrf(NestedVRF vrf) {
        this.vrf = vrf;
    }
    
    
    public VMInterface l2vpnTermination(NestedL2VPNTermination l2vpnTermination) {
        
        this.l2vpnTermination = l2vpnTermination;
        return this;
    }
    
    /**
     * Get l2vpnTermination
     *
     * @return l2vpnTermination
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedL2VPNTermination getL2vpnTermination() {
        return l2vpnTermination;
    }
    
    
    public void setL2vpnTermination(NestedL2VPNTermination l2vpnTermination) {
        this.l2vpnTermination = l2vpnTermination;
    }
    
    
    public VMInterface tags(List<NestedTag> tags) {
        
        this.tags = tags;
        return this;
    }
    
    public VMInterface addTagsItem(NestedTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }
    
    /**
     * Get tags
     *
     * @return tags
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public List<NestedTag> getTags() {
        return tags;
    }
    
    
    public void setTags(List<NestedTag> tags) {
        this.tags = tags;
    }
    
    
    public VMInterface customFields(Object customFields) {
        
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Get customFields
     *
     * @return customFields
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Object getCustomFields() {
        return customFields;
    }
    
    
    public void setCustomFields(Object customFields) {
        this.customFields = customFields;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }
    
    
    /**
     * Get countIpaddresses
     *
     * @return countIpaddresses
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getCountIpaddresses() {
        return countIpaddresses;
    }
    
    
    /**
     * Get countFhrpGroups
     *
     * @return countFhrpGroups
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getCountFhrpGroups() {
        return countFhrpGroups;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VMInterface vmInterface = (VMInterface) o;
        return Objects.equals(this.id, vmInterface.id) && Objects.equals(this.url, vmInterface.url) && Objects.equals(this.display, vmInterface.display) && Objects.equals(this.virtualMachine, vmInterface.virtualMachine) && Objects.equals(this.name, vmInterface.name) && Objects.equals(this.enabled, vmInterface.enabled) && Objects.equals(this.parent, vmInterface.parent) && Objects.equals(this.bridge, vmInterface.bridge) && Objects.equals(this.mtu, vmInterface.mtu) && Objects.equals(this.macAddress, vmInterface.macAddress) && Objects.equals(this.description, vmInterface.description) && Objects.equals(this.mode, vmInterface.mode) && Objects.equals(this.untaggedVlan, vmInterface.untaggedVlan) && Objects.equals(this.taggedVlans, vmInterface.taggedVlans) && Objects.equals(this.vrf, vmInterface.vrf) && Objects.equals(this.l2vpnTermination, vmInterface.l2vpnTermination) && Objects.equals(this.tags, vmInterface.tags) && Objects.equals(this.customFields, vmInterface.customFields) && Objects.equals(this.created, vmInterface.created) && Objects.equals(this.lastUpdated, vmInterface.lastUpdated) && Objects.equals(this.countIpaddresses, vmInterface.countIpaddresses) && Objects.equals(this.countFhrpGroups, vmInterface.countFhrpGroups);
    }
    
    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, virtualMachine, name, enabled, parent, bridge, mtu, macAddress, description, mode, untaggedVlan, taggedVlans, vrf, l2vpnTermination, tags, customFields, created, lastUpdated, countIpaddresses, countFhrpGroups);
    }
    
    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class VMInterface {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    virtualMachine: ").append(toIndentedString(virtualMachine)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
        sb.append("    bridge: ").append(toIndentedString(bridge)).append("\n");
        sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
        sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
        sb.append("    untaggedVlan: ").append(toIndentedString(untaggedVlan)).append("\n");
        sb.append("    taggedVlans: ").append(toIndentedString(taggedVlans)).append("\n");
        sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
        sb.append("    l2vpnTermination: ").append(toIndentedString(l2vpnTermination)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("    countIpaddresses: ").append(toIndentedString(countIpaddresses)).append("\n");
        sb.append("    countFhrpGroups: ").append(toIndentedString(countFhrpGroups)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("virtual_machine");
        openapiFields.add("name");
        openapiFields.add("enabled");
        openapiFields.add("parent");
        openapiFields.add("bridge");
        openapiFields.add("mtu");
        openapiFields.add("mac_address");
        openapiFields.add("description");
        openapiFields.add("mode");
        openapiFields.add("untagged_vlan");
        openapiFields.add("tagged_vlans");
        openapiFields.add("vrf");
        openapiFields.add("l2vpn_termination");
        openapiFields.add("tags");
        openapiFields.add("custom_fields");
        openapiFields.add("created");
        openapiFields.add("last_updated");
        openapiFields.add("count_ipaddresses");
        openapiFields.add("count_fhrp_groups");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("virtual_machine");
        openapiRequiredFields.add("name");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to VMInterface
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (VMInterface.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in VMInterface is not found in the empty JSON string", VMInterface.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!VMInterface.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VMInterface` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : VMInterface.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        // validate the optional field `virtual_machine`
        if (jsonObj.getAsJsonObject("virtual_machine") != null) {
            NestedVirtualMachine.validateJsonObject(jsonObj.getAsJsonObject("virtual_machine"));
        }
        if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name")
                    .toString()));
        }
        // validate the optional field `parent`
        if (jsonObj.getAsJsonObject("parent") != null) {
            NestedVMInterface.validateJsonObject(jsonObj.getAsJsonObject("parent"));
        }
        // validate the optional field `bridge`
        if (jsonObj.getAsJsonObject("bridge") != null) {
            NestedVMInterface.validateJsonObject(jsonObj.getAsJsonObject("bridge"));
        }
        if (jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address")
                    .toString()));
        }
        if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description")
                    .toString()));
        }
        // validate the optional field `mode`
        if (jsonObj.getAsJsonObject("mode") != null) {
            Mode.validateJsonObject(jsonObj.getAsJsonObject("mode"));
        }
        // validate the optional field `untagged_vlan`
        if (jsonObj.getAsJsonObject("untagged_vlan") != null) {
            NestedVLAN.validateJsonObject(jsonObj.getAsJsonObject("untagged_vlan"));
        }
        JsonArray jsonArraytaggedVlans = jsonObj.getAsJsonArray("tagged_vlans");
        if (jsonArraytaggedVlans != null) {
            // ensure the json data is an array
            if (!jsonObj.get("tagged_vlans").isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected the field `tagged_vlans` to be an array in the JSON string but got `%s`", jsonObj.get("tagged_vlans")
                        .toString()));
            }
            
            // validate the optional field `tagged_vlans` (array)
            for (int i = 0; i < jsonArraytaggedVlans.size(); i++) {
                NestedVLAN.validateJsonObject(jsonArraytaggedVlans.get(i).getAsJsonObject());
            }
            ;
        }
        // validate the optional field `vrf`
        if (jsonObj.getAsJsonObject("vrf") != null) {
            NestedVRF.validateJsonObject(jsonObj.getAsJsonObject("vrf"));
        }
        // validate the optional field `l2vpn_termination`
        if (jsonObj.getAsJsonObject("l2vpn_termination") != null) {
            NestedL2VPNTermination.validateJsonObject(jsonObj.getAsJsonObject("l2vpn_termination"));
        }
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
            // ensure the json data is an array
            if (!jsonObj.get("tags").isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags")
                        .toString()));
            }
            
            // validate the optional field `tags` (array)
            for (int i = 0; i < jsonArraytags.size(); i++) {
                NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
            }
            ;
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!VMInterface.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'VMInterface' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<VMInterface> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(VMInterface.class));
            
            return (TypeAdapter<T>) new TypeAdapter<VMInterface>() {
                @Override
                public void write(JsonWriter out, VMInterface value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public VMInterface read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of VMInterface given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of VMInterface
     *
     * @throws IOException if the JSON string is invalid with respect to VMInterface
     */
    public static VMInterface fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, VMInterface.class);
    }
    
    /**
     * Convert an instance of VMInterface to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

