/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.net.URI;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * NestedFHRPGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class NestedFHRPGroup {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    /**
     * Gets or Sets protocol
     */
    @JsonAdapter(ProtocolEnum.Adapter.class)
    public enum ProtocolEnum {
        VRRP2("vrrp2"),
        
        VRRP3("vrrp3"),
        
        CARP("carp"),
        
        CLUSTERXL("clusterxl"),
        
        HSRP("hsrp"),
        
        GLBP("glbp"),
        
        OTHER("other"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        ProtocolEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static ProtocolEnum fromValue(String value) {
            for (ProtocolEnum b : ProtocolEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<ProtocolEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ProtocolEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
    @SerializedName(SERIALIZED_NAME_PROTOCOL)
    private ProtocolEnum protocol;
    
    public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
    @SerializedName(SERIALIZED_NAME_GROUP_ID)
    private Integer groupId;
    
    public NestedFHRPGroup() {
    }
    
    
    public NestedFHRPGroup(Integer id, URI url, String display) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public NestedFHRPGroup protocol(ProtocolEnum protocol) {
        
        this.protocol = protocol;
        return this;
    }
    
    /**
     * Get protocol
     *
     * @return protocol
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public ProtocolEnum getProtocol() {
        return protocol;
    }
    
    
    public void setProtocol(ProtocolEnum protocol) {
        this.protocol = protocol;
    }
    
    
    public NestedFHRPGroup groupId(Integer groupId) {
        
        this.groupId = groupId;
        return this;
    }
    
    /**
     * Get groupId
     * minimum: 0
     * maximum: 32767
     *
     * @return groupId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public Integer getGroupId() {
        return groupId;
    }
    
    
    public void setGroupId(Integer groupId) {
        this.groupId = groupId;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NestedFHRPGroup nestedFHRPGroup = (NestedFHRPGroup) o;
        return Objects.equals(this.id, nestedFHRPGroup.id) && Objects.equals(this.url, nestedFHRPGroup.url) && Objects.equals(this.display, nestedFHRPGroup.display) && Objects.equals(this.protocol, nestedFHRPGroup.protocol) && Objects.equals(this.groupId, nestedFHRPGroup.groupId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, protocol, groupId);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NestedFHRPGroup {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
        sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("protocol");
        openapiFields.add("group_id");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("protocol");
        openapiRequiredFields.add("group_id");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to NestedFHRPGroup
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (NestedFHRPGroup.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in NestedFHRPGroup is not found in the empty JSON string", NestedFHRPGroup.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!NestedFHRPGroup.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NestedFHRPGroup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : NestedFHRPGroup.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol")
                    .toString()));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NestedFHRPGroup.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NestedFHRPGroup' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NestedFHRPGroup> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(NestedFHRPGroup.class));
            
            return (TypeAdapter<T>) new TypeAdapter<NestedFHRPGroup>() {
                @Override
                public void write(JsonWriter out, NestedFHRPGroup value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public NestedFHRPGroup read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of NestedFHRPGroup given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of NestedFHRPGroup
     *
     * @throws IOException if the JSON string is invalid with respect to NestedFHRPGroup
     */
    public static NestedFHRPGroup fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NestedFHRPGroup.class);
    }
    
    /**
     * Convert an instance of NestedFHRPGroup to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

