/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.model.Airflow;
import de.codemakers.netbox.client.model.NestedManufacturer;
import de.codemakers.netbox.client.model.NestedTag;
import de.codemakers.netbox.client.model.SubdeviceRole;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.codemakers.netbox.client.JSON;

/**
 * DeviceType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class DeviceType {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private NestedManufacturer manufacturer;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_PART_NUMBER = "part_number";
  @SerializedName(SERIALIZED_NAME_PART_NUMBER)
  private String partNumber;

  public static final String SERIALIZED_NAME_U_HEIGHT = "u_height";
  @SerializedName(SERIALIZED_NAME_U_HEIGHT)
  private BigDecimal uHeight;

  public static final String SERIALIZED_NAME_IS_FULL_DEPTH = "is_full_depth";
  @SerializedName(SERIALIZED_NAME_IS_FULL_DEPTH)
  private Boolean isFullDepth;

  public static final String SERIALIZED_NAME_SUBDEVICE_ROLE = "subdevice_role";
  @SerializedName(SERIALIZED_NAME_SUBDEVICE_ROLE)
  private SubdeviceRole subdeviceRole;

  public static final String SERIALIZED_NAME_AIRFLOW = "airflow";
  @SerializedName(SERIALIZED_NAME_AIRFLOW)
  private Airflow airflow;

  public static final String SERIALIZED_NAME_FRONT_IMAGE = "front_image";
  @SerializedName(SERIALIZED_NAME_FRONT_IMAGE)
  private URI frontImage;

  public static final String SERIALIZED_NAME_REAR_IMAGE = "rear_image";
  @SerializedName(SERIALIZED_NAME_REAR_IMAGE)
  private URI rearImage;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_DEVICE_COUNT = "device_count";
  @SerializedName(SERIALIZED_NAME_DEVICE_COUNT)
  private Integer deviceCount;

  public DeviceType() { 
  }

  
  public DeviceType(
     Integer id, 
     URI url, 
     String display, 
     URI frontImage, 
     URI rearImage, 
     OffsetDateTime created, 
     OffsetDateTime lastUpdated, 
     Integer deviceCount
  ) {
    this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.frontImage = frontImage;
    this.rearImage = rearImage;
    this.created = created;
    this.lastUpdated = lastUpdated;
    this.deviceCount = deviceCount;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplay() {
    return display;
  }




  public DeviceType manufacturer(NestedManufacturer manufacturer) {
    
    this.manufacturer = manufacturer;
    return this;
  }

   /**
   * Get manufacturer
   * @return manufacturer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public NestedManufacturer getManufacturer() {
    return manufacturer;
  }


  public void setManufacturer(NestedManufacturer manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceType model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    this.model = model;
  }


  public DeviceType slug(String slug) {
    
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    this.slug = slug;
  }


  public DeviceType partNumber(String partNumber) {
    
    this.partNumber = partNumber;
    return this;
  }

   /**
   * Discrete part number (optional)
   * @return partNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Discrete part number (optional)")

  public String getPartNumber() {
    return partNumber;
  }


  public void setPartNumber(String partNumber) {
    this.partNumber = partNumber;
  }


  public DeviceType uHeight(BigDecimal uHeight) {
    
    this.uHeight = uHeight;
    return this;
  }

   /**
   * Get uHeight
   * minimum: 0
   * @return uHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getuHeight() {
    return uHeight;
  }


  public void setuHeight(BigDecimal uHeight) {
    this.uHeight = uHeight;
  }


  public DeviceType isFullDepth(Boolean isFullDepth) {
    
    this.isFullDepth = isFullDepth;
    return this;
  }

   /**
   * Device consumes both front and rear rack faces
   * @return isFullDepth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Device consumes both front and rear rack faces")

  public Boolean getIsFullDepth() {
    return isFullDepth;
  }


  public void setIsFullDepth(Boolean isFullDepth) {
    this.isFullDepth = isFullDepth;
  }


  public DeviceType subdeviceRole(SubdeviceRole subdeviceRole) {
    
    this.subdeviceRole = subdeviceRole;
    return this;
  }

   /**
   * Get subdeviceRole
   * @return subdeviceRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SubdeviceRole getSubdeviceRole() {
    return subdeviceRole;
  }


  public void setSubdeviceRole(SubdeviceRole subdeviceRole) {
    this.subdeviceRole = subdeviceRole;
  }


  public DeviceType airflow(Airflow airflow) {
    
    this.airflow = airflow;
    return this;
  }

   /**
   * Get airflow
   * @return airflow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Airflow getAirflow() {
    return airflow;
  }


  public void setAirflow(Airflow airflow) {
    this.airflow = airflow;
  }


   /**
   * Get frontImage
   * @return frontImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getFrontImage() {
    return frontImage;
  }




   /**
   * Get rearImage
   * @return rearImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getRearImage() {
    return rearImage;
  }




  public DeviceType comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public DeviceType tags(List<NestedTag> tags) {
    
    this.tags = tags;
    return this;
  }

  public DeviceType addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NestedTag> getTags() {
    return tags;
  }


  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public DeviceType customFields(Object customFields) {
    
    this.customFields = customFields;
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }




   /**
   * Get deviceCount
   * @return deviceCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDeviceCount() {
    return deviceCount;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceType deviceType = (DeviceType) o;
    return Objects.equals(this.id, deviceType.id) &&
        Objects.equals(this.url, deviceType.url) &&
        Objects.equals(this.display, deviceType.display) &&
        Objects.equals(this.manufacturer, deviceType.manufacturer) &&
        Objects.equals(this.model, deviceType.model) &&
        Objects.equals(this.slug, deviceType.slug) &&
        Objects.equals(this.partNumber, deviceType.partNumber) &&
        Objects.equals(this.uHeight, deviceType.uHeight) &&
        Objects.equals(this.isFullDepth, deviceType.isFullDepth) &&
        Objects.equals(this.subdeviceRole, deviceType.subdeviceRole) &&
        Objects.equals(this.airflow, deviceType.airflow) &&
        Objects.equals(this.frontImage, deviceType.frontImage) &&
        Objects.equals(this.rearImage, deviceType.rearImage) &&
        Objects.equals(this.comments, deviceType.comments) &&
        Objects.equals(this.tags, deviceType.tags) &&
        Objects.equals(this.customFields, deviceType.customFields) &&
        Objects.equals(this.created, deviceType.created) &&
        Objects.equals(this.lastUpdated, deviceType.lastUpdated) &&
        Objects.equals(this.deviceCount, deviceType.deviceCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, manufacturer, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, frontImage, rearImage, comments, tags, customFields, created, lastUpdated, deviceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    uHeight: ").append(toIndentedString(uHeight)).append("\n");
    sb.append("    isFullDepth: ").append(toIndentedString(isFullDepth)).append("\n");
    sb.append("    subdeviceRole: ").append(toIndentedString(subdeviceRole)).append("\n");
    sb.append("    airflow: ").append(toIndentedString(airflow)).append("\n");
    sb.append("    frontImage: ").append(toIndentedString(frontImage)).append("\n");
    sb.append("    rearImage: ").append(toIndentedString(rearImage)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    deviceCount: ").append(toIndentedString(deviceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("display");
    openapiFields.add("manufacturer");
    openapiFields.add("model");
    openapiFields.add("slug");
    openapiFields.add("part_number");
    openapiFields.add("u_height");
    openapiFields.add("is_full_depth");
    openapiFields.add("subdevice_role");
    openapiFields.add("airflow");
    openapiFields.add("front_image");
    openapiFields.add("rear_image");
    openapiFields.add("comments");
    openapiFields.add("tags");
    openapiFields.add("custom_fields");
    openapiFields.add("created");
    openapiFields.add("last_updated");
    openapiFields.add("device_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("manufacturer");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("slug");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceType
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DeviceType.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceType is not found in the empty JSON string", DeviceType.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeviceType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceType` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceType.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // validate the optional field `manufacturer`
      if (jsonObj.getAsJsonObject("manufacturer") != null) {
        NestedManufacturer.validateJsonObject(jsonObj.getAsJsonObject("manufacturer"));
      }
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if (jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (jsonObj.get("part_number") != null && !jsonObj.get("part_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `part_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("part_number").toString()));
      }
      // validate the optional field `subdevice_role`
      if (jsonObj.getAsJsonObject("subdevice_role") != null) {
        SubdeviceRole.validateJsonObject(jsonObj.getAsJsonObject("subdevice_role"));
      }
      // validate the optional field `airflow`
      if (jsonObj.getAsJsonObject("airflow") != null) {
        Airflow.validateJsonObject(jsonObj.getAsJsonObject("airflow"));
      }
      if (jsonObj.get("front_image") != null && !jsonObj.get("front_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `front_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("front_image").toString()));
      }
      if (jsonObj.get("rear_image") != null && !jsonObj.get("rear_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rear_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rear_image").toString()));
      }
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      if (jsonArraytags != null) {
        // ensure the json data is an array
        if (!jsonObj.get("tags").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
        }

        // validate the optional field `tags` (array)
        for (int i = 0; i < jsonArraytags.size(); i++) {
          NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceType.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceType>() {
           @Override
           public void write(JsonWriter out, DeviceType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceType read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceType
  * @throws IOException if the JSON string is invalid with respect to DeviceType
  */
  public static DeviceType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceType.class);
  }

 /**
  * Convert an instance of DeviceType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

