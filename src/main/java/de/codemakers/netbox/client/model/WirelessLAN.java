/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.model.AuthCipher;
import de.codemakers.netbox.client.model.AuthType;
import de.codemakers.netbox.client.model.NestedTag;
import de.codemakers.netbox.client.model.NestedTenant;
import de.codemakers.netbox.client.model.NestedVLAN;
import de.codemakers.netbox.client.model.NestedWirelessLANGroup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.codemakers.netbox.client.JSON;

/**
 * WirelessLAN
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class WirelessLAN {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_SSID = "ssid";
  @SerializedName(SERIALIZED_NAME_SSID)
  private String ssid;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private NestedWirelessLANGroup group;

  public static final String SERIALIZED_NAME_VLAN = "vlan";
  @SerializedName(SERIALIZED_NAME_VLAN)
  private NestedVLAN vlan;

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private NestedTenant tenant;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthType authType;

  public static final String SERIALIZED_NAME_AUTH_CIPHER = "auth_cipher";
  @SerializedName(SERIALIZED_NAME_AUTH_CIPHER)
  private AuthCipher authCipher;

  public static final String SERIALIZED_NAME_AUTH_PSK = "auth_psk";
  @SerializedName(SERIALIZED_NAME_AUTH_PSK)
  private String authPsk;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public WirelessLAN() { 
  }

  
  public WirelessLAN(
     Integer id, 
     URI url, 
     String display, 
     OffsetDateTime created, 
     OffsetDateTime lastUpdated
  ) {
    this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.created = created;
    this.lastUpdated = lastUpdated;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplay() {
    return display;
  }




  public WirelessLAN ssid(String ssid) {
    
    this.ssid = ssid;
    return this;
  }

   /**
   * Get ssid
   * @return ssid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSsid() {
    return ssid;
  }


  public void setSsid(String ssid) {
    this.ssid = ssid;
  }


  public WirelessLAN description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public WirelessLAN group(NestedWirelessLANGroup group) {
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NestedWirelessLANGroup getGroup() {
    return group;
  }


  public void setGroup(NestedWirelessLANGroup group) {
    this.group = group;
  }


  public WirelessLAN vlan(NestedVLAN vlan) {
    
    this.vlan = vlan;
    return this;
  }

   /**
   * Get vlan
   * @return vlan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NestedVLAN getVlan() {
    return vlan;
  }


  public void setVlan(NestedVLAN vlan) {
    this.vlan = vlan;
  }


  public WirelessLAN tenant(NestedTenant tenant) {
    
    this.tenant = tenant;
    return this;
  }

   /**
   * Get tenant
   * @return tenant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NestedTenant getTenant() {
    return tenant;
  }


  public void setTenant(NestedTenant tenant) {
    this.tenant = tenant;
  }


  public WirelessLAN authType(AuthType authType) {
    
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthType getAuthType() {
    return authType;
  }


  public void setAuthType(AuthType authType) {
    this.authType = authType;
  }


  public WirelessLAN authCipher(AuthCipher authCipher) {
    
    this.authCipher = authCipher;
    return this;
  }

   /**
   * Get authCipher
   * @return authCipher
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthCipher getAuthCipher() {
    return authCipher;
  }


  public void setAuthCipher(AuthCipher authCipher) {
    this.authCipher = authCipher;
  }


  public WirelessLAN authPsk(String authPsk) {
    
    this.authPsk = authPsk;
    return this;
  }

   /**
   * Get authPsk
   * @return authPsk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthPsk() {
    return authPsk;
  }


  public void setAuthPsk(String authPsk) {
    this.authPsk = authPsk;
  }


  public WirelessLAN tags(List<NestedTag> tags) {
    
    this.tags = tags;
    return this;
  }

  public WirelessLAN addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NestedTag> getTags() {
    return tags;
  }


  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public WirelessLAN customFields(Object customFields) {
    
    this.customFields = customFields;
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WirelessLAN wirelessLAN = (WirelessLAN) o;
    return Objects.equals(this.id, wirelessLAN.id) &&
        Objects.equals(this.url, wirelessLAN.url) &&
        Objects.equals(this.display, wirelessLAN.display) &&
        Objects.equals(this.ssid, wirelessLAN.ssid) &&
        Objects.equals(this.description, wirelessLAN.description) &&
        Objects.equals(this.group, wirelessLAN.group) &&
        Objects.equals(this.vlan, wirelessLAN.vlan) &&
        Objects.equals(this.tenant, wirelessLAN.tenant) &&
        Objects.equals(this.authType, wirelessLAN.authType) &&
        Objects.equals(this.authCipher, wirelessLAN.authCipher) &&
        Objects.equals(this.authPsk, wirelessLAN.authPsk) &&
        Objects.equals(this.tags, wirelessLAN.tags) &&
        Objects.equals(this.customFields, wirelessLAN.customFields) &&
        Objects.equals(this.created, wirelessLAN.created) &&
        Objects.equals(this.lastUpdated, wirelessLAN.lastUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, ssid, description, group, vlan, tenant, authType, authCipher, authPsk, tags, customFields, created, lastUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WirelessLAN {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    ssid: ").append(toIndentedString(ssid)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    authCipher: ").append(toIndentedString(authCipher)).append("\n");
    sb.append("    authPsk: ").append(toIndentedString(authPsk)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("display");
    openapiFields.add("ssid");
    openapiFields.add("description");
    openapiFields.add("group");
    openapiFields.add("vlan");
    openapiFields.add("tenant");
    openapiFields.add("auth_type");
    openapiFields.add("auth_cipher");
    openapiFields.add("auth_psk");
    openapiFields.add("tags");
    openapiFields.add("custom_fields");
    openapiFields.add("created");
    openapiFields.add("last_updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ssid");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WirelessLAN
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WirelessLAN.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WirelessLAN is not found in the empty JSON string", WirelessLAN.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WirelessLAN.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WirelessLAN` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WirelessLAN.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if (jsonObj.get("ssid") != null && !jsonObj.get("ssid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssid").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.getAsJsonObject("group") != null) {
        NestedWirelessLANGroup.validateJsonObject(jsonObj.getAsJsonObject("group"));
      }
      // validate the optional field `vlan`
      if (jsonObj.getAsJsonObject("vlan") != null) {
        NestedVLAN.validateJsonObject(jsonObj.getAsJsonObject("vlan"));
      }
      // validate the optional field `tenant`
      if (jsonObj.getAsJsonObject("tenant") != null) {
        NestedTenant.validateJsonObject(jsonObj.getAsJsonObject("tenant"));
      }
      // validate the optional field `auth_type`
      if (jsonObj.getAsJsonObject("auth_type") != null) {
        AuthType.validateJsonObject(jsonObj.getAsJsonObject("auth_type"));
      }
      // validate the optional field `auth_cipher`
      if (jsonObj.getAsJsonObject("auth_cipher") != null) {
        AuthCipher.validateJsonObject(jsonObj.getAsJsonObject("auth_cipher"));
      }
      if (jsonObj.get("auth_psk") != null && !jsonObj.get("auth_psk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_psk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_psk").toString()));
      }
      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      if (jsonArraytags != null) {
        // ensure the json data is an array
        if (!jsonObj.get("tags").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
        }

        // validate the optional field `tags` (array)
        for (int i = 0; i < jsonArraytags.size(); i++) {
          NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WirelessLAN.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WirelessLAN' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WirelessLAN> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WirelessLAN.class));

       return (TypeAdapter<T>) new TypeAdapter<WirelessLAN>() {
           @Override
           public void write(JsonWriter out, WirelessLAN value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WirelessLAN read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WirelessLAN given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WirelessLAN
  * @throws IOException if the JSON string is invalid with respect to WirelessLAN
  */
  public static WirelessLAN fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WirelessLAN.class);
  }

 /**
  * Convert an instance of WirelessLAN to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

