/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * WritablePowerPortTemplate
 */
@JsonPropertyOrder({
  WritablePowerPortTemplate.JSON_PROPERTY_ID,
  WritablePowerPortTemplate.JSON_PROPERTY_URL,
  WritablePowerPortTemplate.JSON_PROPERTY_DISPLAY,
  WritablePowerPortTemplate.JSON_PROPERTY_DEVICE_TYPE,
  WritablePowerPortTemplate.JSON_PROPERTY_MODULE_TYPE,
  WritablePowerPortTemplate.JSON_PROPERTY_NAME,
  WritablePowerPortTemplate.JSON_PROPERTY_LABEL,
  WritablePowerPortTemplate.JSON_PROPERTY_TYPE,
  WritablePowerPortTemplate.JSON_PROPERTY_MAXIMUM_DRAW,
  WritablePowerPortTemplate.JSON_PROPERTY_ALLOCATED_DRAW,
  WritablePowerPortTemplate.JSON_PROPERTY_DESCRIPTION,
  WritablePowerPortTemplate.JSON_PROPERTY_CREATED,
  WritablePowerPortTemplate.JSON_PROPERTY_LAST_UPDATED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T18:36:37.665487300+02:00[Europe/Berlin]")
public class WritablePowerPortTemplate {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_URL = "url";
  private URI url;

  public static final String JSON_PROPERTY_DISPLAY = "display";
  private String display;

  public static final String JSON_PROPERTY_DEVICE_TYPE = "device_type";
  private Integer deviceType;

  public static final String JSON_PROPERTY_MODULE_TYPE = "module_type";
  private Integer moduleType;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    IEC_60320_C6("iec-60320-c6"),
    
    IEC_60320_C8("iec-60320-c8"),
    
    IEC_60320_C14("iec-60320-c14"),
    
    IEC_60320_C16("iec-60320-c16"),
    
    IEC_60320_C20("iec-60320-c20"),
    
    IEC_60320_C22("iec-60320-c22"),
    
    IEC_60309_P_N_E_4H("iec-60309-p-n-e-4h"),
    
    IEC_60309_P_N_E_6H("iec-60309-p-n-e-6h"),
    
    IEC_60309_P_N_E_9H("iec-60309-p-n-e-9h"),
    
    IEC_60309_2P_E_4H("iec-60309-2p-e-4h"),
    
    IEC_60309_2P_E_6H("iec-60309-2p-e-6h"),
    
    IEC_60309_2P_E_9H("iec-60309-2p-e-9h"),
    
    IEC_60309_3P_E_4H("iec-60309-3p-e-4h"),
    
    IEC_60309_3P_E_6H("iec-60309-3p-e-6h"),
    
    IEC_60309_3P_E_9H("iec-60309-3p-e-9h"),
    
    IEC_60309_3P_N_E_4H("iec-60309-3p-n-e-4h"),
    
    IEC_60309_3P_N_E_6H("iec-60309-3p-n-e-6h"),
    
    IEC_60309_3P_N_E_9H("iec-60309-3p-n-e-9h"),
    
    NEMA_1_15P("nema-1-15p"),
    
    NEMA_5_15P("nema-5-15p"),
    
    NEMA_5_20P("nema-5-20p"),
    
    NEMA_5_30P("nema-5-30p"),
    
    NEMA_5_50P("nema-5-50p"),
    
    NEMA_6_15P("nema-6-15p"),
    
    NEMA_6_20P("nema-6-20p"),
    
    NEMA_6_30P("nema-6-30p"),
    
    NEMA_6_50P("nema-6-50p"),
    
    NEMA_10_30P("nema-10-30p"),
    
    NEMA_10_50P("nema-10-50p"),
    
    NEMA_14_20P("nema-14-20p"),
    
    NEMA_14_30P("nema-14-30p"),
    
    NEMA_14_50P("nema-14-50p"),
    
    NEMA_14_60P("nema-14-60p"),
    
    NEMA_15_15P("nema-15-15p"),
    
    NEMA_15_20P("nema-15-20p"),
    
    NEMA_15_30P("nema-15-30p"),
    
    NEMA_15_50P("nema-15-50p"),
    
    NEMA_15_60P("nema-15-60p"),
    
    NEMA_L1_15P("nema-l1-15p"),
    
    NEMA_L5_15P("nema-l5-15p"),
    
    NEMA_L5_20P("nema-l5-20p"),
    
    NEMA_L5_30P("nema-l5-30p"),
    
    NEMA_L5_50P("nema-l5-50p"),
    
    NEMA_L6_15P("nema-l6-15p"),
    
    NEMA_L6_20P("nema-l6-20p"),
    
    NEMA_L6_30P("nema-l6-30p"),
    
    NEMA_L6_50P("nema-l6-50p"),
    
    NEMA_L10_30P("nema-l10-30p"),
    
    NEMA_L14_20P("nema-l14-20p"),
    
    NEMA_L14_30P("nema-l14-30p"),
    
    NEMA_L14_50P("nema-l14-50p"),
    
    NEMA_L14_60P("nema-l14-60p"),
    
    NEMA_L15_20P("nema-l15-20p"),
    
    NEMA_L15_30P("nema-l15-30p"),
    
    NEMA_L15_50P("nema-l15-50p"),
    
    NEMA_L15_60P("nema-l15-60p"),
    
    NEMA_L21_20P("nema-l21-20p"),
    
    NEMA_L21_30P("nema-l21-30p"),
    
    NEMA_L22_30P("nema-l22-30p"),
    
    CS6361C("cs6361c"),
    
    CS6365C("cs6365c"),
    
    CS8165C("cs8165c"),
    
    CS8265C("cs8265c"),
    
    CS8365C("cs8365c"),
    
    CS8465C("cs8465c"),
    
    ITA_C("ita-c"),
    
    ITA_E("ita-e"),
    
    ITA_F("ita-f"),
    
    ITA_EF("ita-ef"),
    
    ITA_G("ita-g"),
    
    ITA_H("ita-h"),
    
    ITA_I("ita-i"),
    
    ITA_J("ita-j"),
    
    ITA_K("ita-k"),
    
    ITA_L("ita-l"),
    
    ITA_M("ita-m"),
    
    ITA_N("ita-n"),
    
    ITA_O("ita-o"),
    
    USB_A("usb-a"),
    
    USB_B("usb-b"),
    
    USB_C("usb-c"),
    
    USB_MINI_A("usb-mini-a"),
    
    USB_MINI_B("usb-mini-b"),
    
    USB_MICRO_A("usb-micro-a"),
    
    USB_MICRO_B("usb-micro-b"),
    
    USB_MICRO_AB("usb-micro-ab"),
    
    USB_3_B("usb-3-b"),
    
    USB_3_MICRO_B("usb-3-micro-b"),
    
    DC_TERMINAL("dc-terminal"),
    
    SAF_D_GRID("saf-d-grid"),
    
    NEUTRIK_POWERCON_20("neutrik-powercon-20"),
    
    NEUTRIK_POWERCON_32("neutrik-powercon-32"),
    
    NEUTRIK_POWERCON_TRUE1("neutrik-powercon-true1"),
    
    NEUTRIK_POWERCON_TRUE1_TOP("neutrik-powercon-true1-top"),
    
    UBIQUITI_SMARTPOWER("ubiquiti-smartpower"),
    
    HARDWIRED("hardwired"),
    
    OTHER("other"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_MAXIMUM_DRAW = "maximum_draw";
  private JsonNullable<Integer> maximumDraw = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_ALLOCATED_DRAW = "allocated_draw";
  private JsonNullable<Integer> allocatedDraw = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_CREATED = "created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_LAST_UPDATED = "last_updated";
  private OffsetDateTime lastUpdated;

  public WritablePowerPortTemplate() { 
  }

  @JsonCreator
  public WritablePowerPortTemplate(
    @JsonProperty(JSON_PROPERTY_ID) Integer id, 
    @JsonProperty(JSON_PROPERTY_URL) URI url, 
    @JsonProperty(JSON_PROPERTY_DISPLAY) String display, 
    @JsonProperty(JSON_PROPERTY_CREATED) OffsetDateTime created, 
    @JsonProperty(JSON_PROPERTY_LAST_UPDATED) OffsetDateTime lastUpdated
  ) {
  this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.created = created;
    this.lastUpdated = lastUpdated;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplay() {
    return display;
  }




  public WritablePowerPortTemplate deviceType(Integer deviceType) {
    this.deviceType = deviceType;
    return this;
  }

   /**
   * Get deviceType
   * @return deviceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDeviceType() {
    return deviceType;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeviceType(Integer deviceType) {
    this.deviceType = deviceType;
  }


  public WritablePowerPortTemplate moduleType(Integer moduleType) {
    this.moduleType = moduleType;
    return this;
  }

   /**
   * Get moduleType
   * @return moduleType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getModuleType() {
    return moduleType;
  }


  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModuleType(Integer moduleType) {
    this.moduleType = moduleType;
  }


  public WritablePowerPortTemplate name(String name) {
    this.name = name;
    return this;
  }

   /**
   *  {module} is accepted as a substitution for the module bay position when attached to a module type. 
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = " {module} is accepted as a substitution for the module bay position when attached to a module type. ")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public WritablePowerPortTemplate label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Physical label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Physical label")
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public WritablePowerPortTemplate type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public WritablePowerPortTemplate maximumDraw(Integer maximumDraw) {
    this.maximumDraw = JsonNullable.<Integer>of(maximumDraw);
    return this;
  }

   /**
   * Maximum power draw (watts)
   * minimum: 1
   * maximum: 32767
   * @return maximumDraw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum power draw (watts)")
  @JsonIgnore

  public Integer getMaximumDraw() {
        return maximumDraw.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRAW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaximumDraw_JsonNullable() {
    return maximumDraw;
  }
  
  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRAW)
  public void setMaximumDraw_JsonNullable(JsonNullable<Integer> maximumDraw) {
    this.maximumDraw = maximumDraw;
  }

  public void setMaximumDraw(Integer maximumDraw) {
    this.maximumDraw = JsonNullable.<Integer>of(maximumDraw);
  }


  public WritablePowerPortTemplate allocatedDraw(Integer allocatedDraw) {
    this.allocatedDraw = JsonNullable.<Integer>of(allocatedDraw);
    return this;
  }

   /**
   * Allocated power draw (watts)
   * minimum: 1
   * maximum: 32767
   * @return allocatedDraw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allocated power draw (watts)")
  @JsonIgnore

  public Integer getAllocatedDraw() {
        return allocatedDraw.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALLOCATED_DRAW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAllocatedDraw_JsonNullable() {
    return allocatedDraw;
  }
  
  @JsonProperty(JSON_PROPERTY_ALLOCATED_DRAW)
  public void setAllocatedDraw_JsonNullable(JsonNullable<Integer> allocatedDraw) {
    this.allocatedDraw = allocatedDraw;
  }

  public void setAllocatedDraw(Integer allocatedDraw) {
    this.allocatedDraw = JsonNullable.<Integer>of(allocatedDraw);
  }


  public WritablePowerPortTemplate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }




  /**
   * Return true if this WritablePowerPortTemplate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritablePowerPortTemplate writablePowerPortTemplate = (WritablePowerPortTemplate) o;
    return Objects.equals(this.id, writablePowerPortTemplate.id) &&
        Objects.equals(this.url, writablePowerPortTemplate.url) &&
        Objects.equals(this.display, writablePowerPortTemplate.display) &&
        Objects.equals(this.deviceType, writablePowerPortTemplate.deviceType) &&
        Objects.equals(this.moduleType, writablePowerPortTemplate.moduleType) &&
        Objects.equals(this.name, writablePowerPortTemplate.name) &&
        Objects.equals(this.label, writablePowerPortTemplate.label) &&
        Objects.equals(this.type, writablePowerPortTemplate.type) &&
        equalsNullable(this.maximumDraw, writablePowerPortTemplate.maximumDraw) &&
        equalsNullable(this.allocatedDraw, writablePowerPortTemplate.allocatedDraw) &&
        Objects.equals(this.description, writablePowerPortTemplate.description) &&
        Objects.equals(this.created, writablePowerPortTemplate.created) &&
        Objects.equals(this.lastUpdated, writablePowerPortTemplate.lastUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, deviceType, moduleType, name, label, type, hashCodeNullable(maximumDraw), hashCodeNullable(allocatedDraw), description, created, lastUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritablePowerPortTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    moduleType: ").append(toIndentedString(moduleType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maximumDraw: ").append(toIndentedString(maximumDraw)).append("\n");
    sb.append("    allocatedDraw: ").append(toIndentedString(allocatedDraw)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

