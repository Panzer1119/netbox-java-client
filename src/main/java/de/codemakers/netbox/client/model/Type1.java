/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Type1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class Type1 {
    /**
     * Gets or Sets label
     */
    @JsonAdapter(LabelEnum.Adapter.class)
    public enum LabelEnum {
        _8P8C("8P8C"),
        
        _8P6C("8P6C"),
        
        _8P4C("8P4C"),
        
        _8P2C("8P2C"),
        
        _6P6C("6P6C"),
        
        _6P4C("6P4C"),
        
        _6P2C("6P2C"),
        
        _4P4C("4P4C"),
        
        _4P2C("4P2C"),
        
        GG45("GG45"),
        
        TERA_4P("TERA 4P"),
        
        TERA_2P("TERA 2P"),
        
        TERA_1P("TERA 1P"),
        
        _110_PUNCH("110 Punch"),
        
        BNC("BNC"),
        
        F_CONNECTOR("F Connector"),
        
        N_CONNECTOR("N Connector"),
        
        MRJ21("MRJ21"),
        
        FC("FC"),
        
        LC("LC"),
        
        LC_PC("LC/PC"),
        
        LC_UPC("LC/UPC"),
        
        LC_APC("LC/APC"),
        
        LSH("LSH"),
        
        LSH_PC("LSH/PC"),
        
        LSH_UPC("LSH/UPC"),
        
        LSH_APC("LSH/APC"),
        
        MPO("MPO"),
        
        MTRJ("MTRJ"),
        
        SC("SC"),
        
        SC_PC("SC/PC"),
        
        SC_UPC("SC/UPC"),
        
        SC_APC("SC/APC"),
        
        ST("ST"),
        
        CS("CS"),
        
        SN("SN"),
        
        SMA_905("SMA 905"),
        
        SMA_906("SMA 906"),
        
        URM_P2("URM-P2"),
        
        URM_P4("URM-P4"),
        
        URM_P8("URM-P8"),
        
        SPLICE("Splice"),
        
        OTHER("Other"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        LabelEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static LabelEnum fromValue(String value) {
            for (LabelEnum b : LabelEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<LabelEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final LabelEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public LabelEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return LabelEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_LABEL = "label";
    @SerializedName(SERIALIZED_NAME_LABEL)
    private LabelEnum label;
    
    /**
     * Gets or Sets value
     */
    @JsonAdapter(ValueEnum.Adapter.class)
    public enum ValueEnum {
        _8P8C("8p8c"),
        
        _8P6C("8p6c"),
        
        _8P4C("8p4c"),
        
        _8P2C("8p2c"),
        
        _6P6C("6p6c"),
        
        _6P4C("6p4c"),
        
        _6P2C("6p2c"),
        
        _4P4C("4p4c"),
        
        _4P2C("4p2c"),
        
        GG45("gg45"),
        
        TERA_4P("tera-4p"),
        
        TERA_2P("tera-2p"),
        
        TERA_1P("tera-1p"),
        
        _110_PUNCH("110-punch"),
        
        BNC("bnc"),
        
        F("f"),
        
        N("n"),
        
        MRJ21("mrj21"),
        
        FC("fc"),
        
        LC("lc"),
        
        LC_PC("lc-pc"),
        
        LC_UPC("lc-upc"),
        
        LC_APC("lc-apc"),
        
        LSH("lsh"),
        
        LSH_PC("lsh-pc"),
        
        LSH_UPC("lsh-upc"),
        
        LSH_APC("lsh-apc"),
        
        MPO("mpo"),
        
        MTRJ("mtrj"),
        
        SC("sc"),
        
        SC_PC("sc-pc"),
        
        SC_UPC("sc-upc"),
        
        SC_APC("sc-apc"),
        
        ST("st"),
        
        CS("cs"),
        
        SN("sn"),
        
        SMA_905("sma-905"),
        
        SMA_906("sma-906"),
        
        URM_P2("urm-p2"),
        
        URM_P4("urm-p4"),
        
        URM_P8("urm-p8"),
        
        SPLICE("splice"),
        
        OTHER("other"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        ValueEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static ValueEnum fromValue(String value) {
            for (ValueEnum b : ValueEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<ValueEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ValueEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public ValueEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ValueEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_VALUE = "value";
    @SerializedName(SERIALIZED_NAME_VALUE)
    private ValueEnum value;
    
    public Type1() {
    }
    
    public Type1 label(LabelEnum label) {
        
        this.label = label;
        return this;
    }
    
    /**
     * Get label
     *
     * @return label
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public LabelEnum getLabel() {
        return label;
    }
    
    
    public void setLabel(LabelEnum label) {
        this.label = label;
    }
    
    
    public Type1 value(ValueEnum value) {
        
        this.value = value;
        return this;
    }
    
    /**
     * Get value
     *
     * @return value
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public ValueEnum getValue() {
        return value;
    }
    
    
    public void setValue(ValueEnum value) {
        this.value = value;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Type1 type1 = (Type1) o;
        return Objects.equals(this.label, type1.label) && Objects.equals(this.value, type1.value);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(label, value);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Type1 {\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("label");
        openapiFields.add("value");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("label");
        openapiRequiredFields.add("value");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to Type1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (Type1.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in Type1 is not found in the empty JSON string", Type1.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Type1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Type1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : Type1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label")
                    .toString()));
        }
        if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value")
                    .toString()));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Type1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Type1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Type1> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(Type1.class));
            
            return (TypeAdapter<T>) new TypeAdapter<Type1>() {
                @Override
                public void write(JsonWriter out, Type1 value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public Type1 read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of Type1 given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of Type1
     *
     * @throws IOException if the JSON string is invalid with respect to Type1
     */
    public static Type1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Type1.class);
    }
    
    /**
     * Convert an instance of Type1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

