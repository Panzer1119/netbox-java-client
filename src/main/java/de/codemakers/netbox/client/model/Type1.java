/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Type1
 */
@JsonPropertyOrder({
  Type1.JSON_PROPERTY_LABEL,
  Type1.JSON_PROPERTY_VALUE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T15:10:46.540964900+02:00[Europe/Berlin]")
public class Type1 {
  /**
   * Gets or Sets label
   */
  public enum LabelEnum {
    _8P8C("8P8C"),
    
    _8P6C("8P6C"),
    
    _8P4C("8P4C"),
    
    _8P2C("8P2C"),
    
    _6P6C("6P6C"),
    
    _6P4C("6P4C"),
    
    _6P2C("6P2C"),
    
    _4P4C("4P4C"),
    
    _4P2C("4P2C"),
    
    GG45("GG45"),
    
    TERA_4P("TERA 4P"),
    
    TERA_2P("TERA 2P"),
    
    TERA_1P("TERA 1P"),
    
    _110_PUNCH("110 Punch"),
    
    BNC("BNC"),
    
    F_CONNECTOR("F Connector"),
    
    N_CONNECTOR("N Connector"),
    
    MRJ21("MRJ21"),
    
    FC("FC"),
    
    LC("LC"),
    
    LC_PC("LC/PC"),
    
    LC_UPC("LC/UPC"),
    
    LC_APC("LC/APC"),
    
    LSH("LSH"),
    
    LSH_PC("LSH/PC"),
    
    LSH_UPC("LSH/UPC"),
    
    LSH_APC("LSH/APC"),
    
    MPO("MPO"),
    
    MTRJ("MTRJ"),
    
    SC("SC"),
    
    SC_PC("SC/PC"),
    
    SC_UPC("SC/UPC"),
    
    SC_APC("SC/APC"),
    
    ST("ST"),
    
    CS("CS"),
    
    SN("SN"),
    
    SMA_905("SMA 905"),
    
    SMA_906("SMA 906"),
    
    URM_P2("URM-P2"),
    
    URM_P4("URM-P4"),
    
    URM_P8("URM-P8"),
    
    SPLICE("Splice"),
    
    OTHER("Other"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    LabelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LabelEnum fromValue(String value) {
      for (LabelEnum b : LabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_LABEL = "label";
  private LabelEnum label;

  /**
   * Gets or Sets value
   */
  public enum ValueEnum {
    _8P8C("8p8c"),
    
    _8P6C("8p6c"),
    
    _8P4C("8p4c"),
    
    _8P2C("8p2c"),
    
    _6P6C("6p6c"),
    
    _6P4C("6p4c"),
    
    _6P2C("6p2c"),
    
    _4P4C("4p4c"),
    
    _4P2C("4p2c"),
    
    GG45("gg45"),
    
    TERA_4P("tera-4p"),
    
    TERA_2P("tera-2p"),
    
    TERA_1P("tera-1p"),
    
    _110_PUNCH("110-punch"),
    
    BNC("bnc"),
    
    F("f"),
    
    N("n"),
    
    MRJ21("mrj21"),
    
    FC("fc"),
    
    LC("lc"),
    
    LC_PC("lc-pc"),
    
    LC_UPC("lc-upc"),
    
    LC_APC("lc-apc"),
    
    LSH("lsh"),
    
    LSH_PC("lsh-pc"),
    
    LSH_UPC("lsh-upc"),
    
    LSH_APC("lsh-apc"),
    
    MPO("mpo"),
    
    MTRJ("mtrj"),
    
    SC("sc"),
    
    SC_PC("sc-pc"),
    
    SC_UPC("sc-upc"),
    
    SC_APC("sc-apc"),
    
    ST("st"),
    
    CS("cs"),
    
    SN("sn"),
    
    SMA_905("sma-905"),
    
    SMA_906("sma-906"),
    
    URM_P2("urm-p2"),
    
    URM_P4("urm-p4"),
    
    URM_P8("urm-p8"),
    
    SPLICE("splice"),
    
    OTHER("other"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    ValueEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ValueEnum fromValue(String value) {
      for (ValueEnum b : ValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_VALUE = "value";
  private ValueEnum value;

  public Type1() { 
  }

  public Type1 label(LabelEnum label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LabelEnum getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(LabelEnum label) {
    this.label = label;
  }


  public Type1 value(ValueEnum value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ValueEnum getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(ValueEnum value) {
    this.value = value;
  }


  /**
   * Return true if this Type_1 object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Type1 type1 = (Type1) o;
    return Objects.equals(this.label, type1.label) &&
        Objects.equals(this.value, type1.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Type1 {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

