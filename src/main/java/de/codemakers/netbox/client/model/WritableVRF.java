/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.model.NestedTag;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.codemakers.netbox.client.JSON;

/**
 * WritableVRF
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class WritableVRF {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RD = "rd";
  @SerializedName(SERIALIZED_NAME_RD)
  private String rd;

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private Integer tenant;

  public static final String SERIALIZED_NAME_ENFORCE_UNIQUE = "enforce_unique";
  @SerializedName(SERIALIZED_NAME_ENFORCE_UNIQUE)
  private Boolean enforceUnique;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMPORT_TARGETS = "import_targets";
  @SerializedName(SERIALIZED_NAME_IMPORT_TARGETS)
  private Set<Integer> importTargets = null;

  public static final String SERIALIZED_NAME_EXPORT_TARGETS = "export_targets";
  @SerializedName(SERIALIZED_NAME_EXPORT_TARGETS)
  private Set<Integer> exportTargets = null;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_IPADDRESS_COUNT = "ipaddress_count";
  @SerializedName(SERIALIZED_NAME_IPADDRESS_COUNT)
  private Integer ipaddressCount;

  public static final String SERIALIZED_NAME_PREFIX_COUNT = "prefix_count";
  @SerializedName(SERIALIZED_NAME_PREFIX_COUNT)
  private Integer prefixCount;

  public WritableVRF() { 
  }

  
  public WritableVRF(
     Integer id, 
     URI url, 
     String display, 
     OffsetDateTime created, 
     OffsetDateTime lastUpdated, 
     Integer ipaddressCount, 
     Integer prefixCount
  ) {
    this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.created = created;
    this.lastUpdated = lastUpdated;
    this.ipaddressCount = ipaddressCount;
    this.prefixCount = prefixCount;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplay() {
    return display;
  }




  public WritableVRF name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WritableVRF rd(String rd) {
    
    this.rd = rd;
    return this;
  }

   /**
   * Unique route distinguisher (as defined in RFC 4364)
   * @return rd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique route distinguisher (as defined in RFC 4364)")

  public String getRd() {
    return rd;
  }


  public void setRd(String rd) {
    this.rd = rd;
  }


  public WritableVRF tenant(Integer tenant) {
    
    this.tenant = tenant;
    return this;
  }

   /**
   * Get tenant
   * @return tenant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTenant() {
    return tenant;
  }


  public void setTenant(Integer tenant) {
    this.tenant = tenant;
  }


  public WritableVRF enforceUnique(Boolean enforceUnique) {
    
    this.enforceUnique = enforceUnique;
    return this;
  }

   /**
   * Prevent duplicate prefixes/IP addresses within this VRF
   * @return enforceUnique
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prevent duplicate prefixes/IP addresses within this VRF")

  public Boolean getEnforceUnique() {
    return enforceUnique;
  }


  public void setEnforceUnique(Boolean enforceUnique) {
    this.enforceUnique = enforceUnique;
  }


  public WritableVRF description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public WritableVRF importTargets(Set<Integer> importTargets) {
    
    this.importTargets = importTargets;
    return this;
  }

  public WritableVRF addImportTargetsItem(Integer importTargetsItem) {
    if (this.importTargets == null) {
      this.importTargets = new LinkedHashSet<>();
    }
    this.importTargets.add(importTargetsItem);
    return this;
  }

   /**
   * Get importTargets
   * @return importTargets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<Integer> getImportTargets() {
    return importTargets;
  }


  public void setImportTargets(Set<Integer> importTargets) {
    this.importTargets = importTargets;
  }


  public WritableVRF exportTargets(Set<Integer> exportTargets) {
    
    this.exportTargets = exportTargets;
    return this;
  }

  public WritableVRF addExportTargetsItem(Integer exportTargetsItem) {
    if (this.exportTargets == null) {
      this.exportTargets = new LinkedHashSet<>();
    }
    this.exportTargets.add(exportTargetsItem);
    return this;
  }

   /**
   * Get exportTargets
   * @return exportTargets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<Integer> getExportTargets() {
    return exportTargets;
  }


  public void setExportTargets(Set<Integer> exportTargets) {
    this.exportTargets = exportTargets;
  }


  public WritableVRF tags(List<NestedTag> tags) {
    
    this.tags = tags;
    return this;
  }

  public WritableVRF addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NestedTag> getTags() {
    return tags;
  }


  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public WritableVRF customFields(Object customFields) {
    
    this.customFields = customFields;
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }




   /**
   * Get ipaddressCount
   * @return ipaddressCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getIpaddressCount() {
    return ipaddressCount;
  }




   /**
   * Get prefixCount
   * @return prefixCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPrefixCount() {
    return prefixCount;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableVRF writableVRF = (WritableVRF) o;
    return Objects.equals(this.id, writableVRF.id) &&
        Objects.equals(this.url, writableVRF.url) &&
        Objects.equals(this.display, writableVRF.display) &&
        Objects.equals(this.name, writableVRF.name) &&
        Objects.equals(this.rd, writableVRF.rd) &&
        Objects.equals(this.tenant, writableVRF.tenant) &&
        Objects.equals(this.enforceUnique, writableVRF.enforceUnique) &&
        Objects.equals(this.description, writableVRF.description) &&
        Objects.equals(this.importTargets, writableVRF.importTargets) &&
        Objects.equals(this.exportTargets, writableVRF.exportTargets) &&
        Objects.equals(this.tags, writableVRF.tags) &&
        Objects.equals(this.customFields, writableVRF.customFields) &&
        Objects.equals(this.created, writableVRF.created) &&
        Objects.equals(this.lastUpdated, writableVRF.lastUpdated) &&
        Objects.equals(this.ipaddressCount, writableVRF.ipaddressCount) &&
        Objects.equals(this.prefixCount, writableVRF.prefixCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, name, rd, tenant, enforceUnique, description, importTargets, exportTargets, tags, customFields, created, lastUpdated, ipaddressCount, prefixCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableVRF {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rd: ").append(toIndentedString(rd)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    enforceUnique: ").append(toIndentedString(enforceUnique)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    importTargets: ").append(toIndentedString(importTargets)).append("\n");
    sb.append("    exportTargets: ").append(toIndentedString(exportTargets)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    ipaddressCount: ").append(toIndentedString(ipaddressCount)).append("\n");
    sb.append("    prefixCount: ").append(toIndentedString(prefixCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("display");
    openapiFields.add("name");
    openapiFields.add("rd");
    openapiFields.add("tenant");
    openapiFields.add("enforce_unique");
    openapiFields.add("description");
    openapiFields.add("import_targets");
    openapiFields.add("export_targets");
    openapiFields.add("tags");
    openapiFields.add("custom_fields");
    openapiFields.add("created");
    openapiFields.add("last_updated");
    openapiFields.add("ipaddress_count");
    openapiFields.add("prefix_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WritableVRF
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WritableVRF.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableVRF is not found in the empty JSON string", WritableVRF.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WritableVRF.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableVRF` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableVRF.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("rd") != null && !jsonObj.get("rd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rd").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("import_targets") != null && !jsonObj.get("import_targets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `import_targets` to be an array in the JSON string but got `%s`", jsonObj.get("import_targets").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("export_targets") != null && !jsonObj.get("export_targets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `export_targets` to be an array in the JSON string but got `%s`", jsonObj.get("export_targets").toString()));
      }
      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      if (jsonArraytags != null) {
        // ensure the json data is an array
        if (!jsonObj.get("tags").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
        }

        // validate the optional field `tags` (array)
        for (int i = 0; i < jsonArraytags.size(); i++) {
          NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableVRF.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableVRF' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableVRF> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableVRF.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableVRF>() {
           @Override
           public void write(JsonWriter out, WritableVRF value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableVRF read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WritableVRF given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WritableVRF
  * @throws IOException if the JSON string is invalid with respect to WritableVRF
  */
  public static WritableVRF fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableVRF.class);
  }

 /**
  * Convert an instance of WritableVRF to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

