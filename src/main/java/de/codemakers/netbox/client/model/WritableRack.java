/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.Map.Entry;

/**
 * WritableRack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class WritableRack {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    
    public static final String SERIALIZED_NAME_FACILITY_ID = "facility_id";
    @SerializedName(SERIALIZED_NAME_FACILITY_ID)
    private String facilityId;
    
    public static final String SERIALIZED_NAME_SITE = "site";
    @SerializedName(SERIALIZED_NAME_SITE)
    private Integer site;
    
    public static final String SERIALIZED_NAME_LOCATION = "location";
    @SerializedName(SERIALIZED_NAME_LOCATION)
    private Integer location;
    
    public static final String SERIALIZED_NAME_TENANT = "tenant";
    @SerializedName(SERIALIZED_NAME_TENANT)
    private Integer tenant;
    
    /**
     * Gets or Sets status
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        RESERVED("reserved"),
        
        AVAILABLE("available"),
        
        PLANNED("planned"),
        
        ACTIVE("active"),
        
        DEPRECATED("deprecated"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        StatusEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_STATUS = "status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    private StatusEnum status;
    
    public static final String SERIALIZED_NAME_ROLE = "role";
    @SerializedName(SERIALIZED_NAME_ROLE)
    private Integer role;
    
    public static final String SERIALIZED_NAME_SERIAL = "serial";
    @SerializedName(SERIALIZED_NAME_SERIAL)
    private String serial;
    
    public static final String SERIALIZED_NAME_ASSET_TAG = "asset_tag";
    @SerializedName(SERIALIZED_NAME_ASSET_TAG)
    private String assetTag;
    
    /**
     * Gets or Sets type
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        _2_POST_FRAME("2-post-frame"),
        
        _4_POST_FRAME("4-post-frame"),
        
        _4_POST_CABINET("4-post-cabinet"),
        
        WALL_FRAME("wall-frame"),
        
        WALL_CABINET("wall-cabinet"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        TypeEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;
    
    public static final String SERIALIZED_NAME_WIDTH = "width";
    @SerializedName(SERIALIZED_NAME_WIDTH)
    private Integer width;
    
    public static final String SERIALIZED_NAME_U_HEIGHT = "u_height";
    @SerializedName(SERIALIZED_NAME_U_HEIGHT)
    private Integer uHeight;
    
    public static final String SERIALIZED_NAME_DESC_UNITS = "desc_units";
    @SerializedName(SERIALIZED_NAME_DESC_UNITS)
    private Boolean descUnits;
    
    public static final String SERIALIZED_NAME_OUTER_WIDTH = "outer_width";
    @SerializedName(SERIALIZED_NAME_OUTER_WIDTH)
    private Integer outerWidth;
    
    public static final String SERIALIZED_NAME_OUTER_DEPTH = "outer_depth";
    @SerializedName(SERIALIZED_NAME_OUTER_DEPTH)
    private Integer outerDepth;
    
    /**
     * Gets or Sets outerUnit
     */
    @JsonAdapter(OuterUnitEnum.Adapter.class)
    public enum OuterUnitEnum {
        MM("mm"),
        
        IN("in"),
        
        UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");
        
        private String value;
        
        OuterUnitEnum(String value) {
            this.value = value;
        }
        
        public String getValue() {
            return value;
        }
        
        @Override
        public String toString() {
            return String.valueOf(value);
        }
        
        public static OuterUnitEnum fromValue(String value) {
            for (OuterUnitEnum b : OuterUnitEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
        
        public static class Adapter extends TypeAdapter<OuterUnitEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OuterUnitEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }
            
            @Override
            public OuterUnitEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OuterUnitEnum.fromValue(value);
            }
        }
    }
    
    public static final String SERIALIZED_NAME_OUTER_UNIT = "outer_unit";
    @SerializedName(SERIALIZED_NAME_OUTER_UNIT)
    private OuterUnitEnum outerUnit;
    
    public static final String SERIALIZED_NAME_COMMENTS = "comments";
    @SerializedName(SERIALIZED_NAME_COMMENTS)
    private String comments;
    
    public static final String SERIALIZED_NAME_TAGS = "tags";
    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<NestedTag> tags = null;
    
    public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
    @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
    private Object customFields;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    private OffsetDateTime lastUpdated;
    
    public static final String SERIALIZED_NAME_DEVICE_COUNT = "device_count";
    @SerializedName(SERIALIZED_NAME_DEVICE_COUNT)
    private Integer deviceCount;
    
    public static final String SERIALIZED_NAME_POWERFEED_COUNT = "powerfeed_count";
    @SerializedName(SERIALIZED_NAME_POWERFEED_COUNT)
    private Integer powerfeedCount;
    
    public WritableRack() {
    }
    
    
    public WritableRack(Integer id, URI url, String display, OffsetDateTime created, OffsetDateTime lastUpdated, Integer deviceCount, Integer powerfeedCount) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.created = created;
        this.lastUpdated = lastUpdated;
        this.deviceCount = deviceCount;
        this.powerfeedCount = powerfeedCount;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public WritableRack name(String name) {
        
        this.name = name;
        return this;
    }
    
    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getName() {
        return name;
    }
    
    
    public void setName(String name) {
        this.name = name;
    }
    
    
    public WritableRack facilityId(String facilityId) {
        
        this.facilityId = facilityId;
        return this;
    }
    
    /**
     * Get facilityId
     *
     * @return facilityId
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getFacilityId() {
        return facilityId;
    }
    
    
    public void setFacilityId(String facilityId) {
        this.facilityId = facilityId;
    }
    
    
    public WritableRack site(Integer site) {
        
        this.site = site;
        return this;
    }
    
    /**
     * Get site
     *
     * @return site
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public Integer getSite() {
        return site;
    }
    
    
    public void setSite(Integer site) {
        this.site = site;
    }
    
    
    public WritableRack location(Integer location) {
        
        this.location = location;
        return this;
    }
    
    /**
     * Get location
     *
     * @return location
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(required = true, value = "")
    
    public Integer getLocation() {
        return location;
    }
    
    
    public void setLocation(Integer location) {
        this.location = location;
    }
    
    
    public WritableRack tenant(Integer tenant) {
        
        this.tenant = tenant;
        return this;
    }
    
    /**
     * Get tenant
     *
     * @return tenant
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getTenant() {
        return tenant;
    }
    
    
    public void setTenant(Integer tenant) {
        this.tenant = tenant;
    }
    
    
    public WritableRack status(StatusEnum status) {
        
        this.status = status;
        return this;
    }
    
    /**
     * Get status
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public StatusEnum getStatus() {
        return status;
    }
    
    
    public void setStatus(StatusEnum status) {
        this.status = status;
    }
    
    
    public WritableRack role(Integer role) {
        
        this.role = role;
        return this;
    }
    
    /**
     * Functional role
     *
     * @return role
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Functional role")
    
    public Integer getRole() {
        return role;
    }
    
    
    public void setRole(Integer role) {
        this.role = role;
    }
    
    
    public WritableRack serial(String serial) {
        
        this.serial = serial;
        return this;
    }
    
    /**
     * Get serial
     *
     * @return serial
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getSerial() {
        return serial;
    }
    
    
    public void setSerial(String serial) {
        this.serial = serial;
    }
    
    
    public WritableRack assetTag(String assetTag) {
        
        this.assetTag = assetTag;
        return this;
    }
    
    /**
     * A unique tag used to identify this rack
     *
     * @return assetTag
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "A unique tag used to identify this rack")
    
    public String getAssetTag() {
        return assetTag;
    }
    
    
    public void setAssetTag(String assetTag) {
        this.assetTag = assetTag;
    }
    
    
    public WritableRack type(TypeEnum type) {
        
        this.type = type;
        return this;
    }
    
    /**
     * Get type
     *
     * @return type
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public TypeEnum getType() {
        return type;
    }
    
    
    public void setType(TypeEnum type) {
        this.type = type;
    }
    
    
    public WritableRack width(Integer width) {
        
        this.width = width;
        return this;
    }
    
    /**
     * Rail-to-rail width
     *
     * @return width
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Rail-to-rail width")
    
    public Integer getWidth() {
        return width;
    }
    
    
    public void setWidth(Integer width) {
        this.width = width;
    }
    
    
    public WritableRack uHeight(Integer uHeight) {
        
        this.uHeight = uHeight;
        return this;
    }
    
    /**
     * Height in rack units
     * minimum: 1
     * maximum: 100
     *
     * @return uHeight
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Height in rack units")
    
    public Integer getuHeight() {
        return uHeight;
    }
    
    
    public void setuHeight(Integer uHeight) {
        this.uHeight = uHeight;
    }
    
    
    public WritableRack descUnits(Boolean descUnits) {
        
        this.descUnits = descUnits;
        return this;
    }
    
    /**
     * Units are numbered top-to-bottom
     *
     * @return descUnits
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Units are numbered top-to-bottom")
    
    public Boolean getDescUnits() {
        return descUnits;
    }
    
    
    public void setDescUnits(Boolean descUnits) {
        this.descUnits = descUnits;
    }
    
    
    public WritableRack outerWidth(Integer outerWidth) {
        
        this.outerWidth = outerWidth;
        return this;
    }
    
    /**
     * Outer dimension of rack (width)
     * minimum: 0
     * maximum: 32767
     *
     * @return outerWidth
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Outer dimension of rack (width)")
    
    public Integer getOuterWidth() {
        return outerWidth;
    }
    
    
    public void setOuterWidth(Integer outerWidth) {
        this.outerWidth = outerWidth;
    }
    
    
    public WritableRack outerDepth(Integer outerDepth) {
        
        this.outerDepth = outerDepth;
        return this;
    }
    
    /**
     * Outer dimension of rack (depth)
     * minimum: 0
     * maximum: 32767
     *
     * @return outerDepth
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Outer dimension of rack (depth)")
    
    public Integer getOuterDepth() {
        return outerDepth;
    }
    
    
    public void setOuterDepth(Integer outerDepth) {
        this.outerDepth = outerDepth;
    }
    
    
    public WritableRack outerUnit(OuterUnitEnum outerUnit) {
        
        this.outerUnit = outerUnit;
        return this;
    }
    
    /**
     * Get outerUnit
     *
     * @return outerUnit
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OuterUnitEnum getOuterUnit() {
        return outerUnit;
    }
    
    
    public void setOuterUnit(OuterUnitEnum outerUnit) {
        this.outerUnit = outerUnit;
    }
    
    
    public WritableRack comments(String comments) {
        
        this.comments = comments;
        return this;
    }
    
    /**
     * Get comments
     *
     * @return comments
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getComments() {
        return comments;
    }
    
    
    public void setComments(String comments) {
        this.comments = comments;
    }
    
    
    public WritableRack tags(List<NestedTag> tags) {
        
        this.tags = tags;
        return this;
    }
    
    public WritableRack addTagsItem(NestedTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }
    
    /**
     * Get tags
     *
     * @return tags
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public List<NestedTag> getTags() {
        return tags;
    }
    
    
    public void setTags(List<NestedTag> tags) {
        this.tags = tags;
    }
    
    
    public WritableRack customFields(Object customFields) {
        
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Get customFields
     *
     * @return customFields
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Object getCustomFields() {
        return customFields;
    }
    
    
    public void setCustomFields(Object customFields) {
        this.customFields = customFields;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }
    
    
    /**
     * Get deviceCount
     *
     * @return deviceCount
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getDeviceCount() {
        return deviceCount;
    }
    
    
    /**
     * Get powerfeedCount
     *
     * @return powerfeedCount
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getPowerfeedCount() {
        return powerfeedCount;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WritableRack writableRack = (WritableRack) o;
        return Objects.equals(this.id, writableRack.id) && Objects.equals(this.url, writableRack.url) && Objects.equals(this.display, writableRack.display) && Objects.equals(this.name, writableRack.name) && Objects.equals(this.facilityId, writableRack.facilityId) && Objects.equals(this.site, writableRack.site) && Objects.equals(this.location, writableRack.location) && Objects.equals(this.tenant, writableRack.tenant) && Objects.equals(this.status, writableRack.status) && Objects.equals(this.role, writableRack.role) && Objects.equals(this.serial, writableRack.serial) && Objects.equals(this.assetTag, writableRack.assetTag) && Objects.equals(this.type, writableRack.type) && Objects.equals(this.width, writableRack.width) && Objects.equals(this.uHeight, writableRack.uHeight) && Objects.equals(this.descUnits, writableRack.descUnits) && Objects.equals(this.outerWidth, writableRack.outerWidth) && Objects.equals(this.outerDepth, writableRack.outerDepth) && Objects.equals(this.outerUnit, writableRack.outerUnit) && Objects.equals(this.comments, writableRack.comments) && Objects.equals(this.tags, writableRack.tags) && Objects.equals(this.customFields, writableRack.customFields) && Objects.equals(this.created, writableRack.created) && Objects.equals(this.lastUpdated, writableRack.lastUpdated) && Objects.equals(this.deviceCount, writableRack.deviceCount) && Objects.equals(this.powerfeedCount, writableRack.powerfeedCount);
    }
    
    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, name, facilityId, site, location, tenant, status, role, serial, assetTag, type, width, uHeight, descUnits, outerWidth, outerDepth, outerUnit, comments, tags, customFields, created, lastUpdated, deviceCount, powerfeedCount);
    }
    
    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WritableRack {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
        sb.append("    site: ").append(toIndentedString(site)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    role: ").append(toIndentedString(role)).append("\n");
        sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
        sb.append("    assetTag: ").append(toIndentedString(assetTag)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("    uHeight: ").append(toIndentedString(uHeight)).append("\n");
        sb.append("    descUnits: ").append(toIndentedString(descUnits)).append("\n");
        sb.append("    outerWidth: ").append(toIndentedString(outerWidth)).append("\n");
        sb.append("    outerDepth: ").append(toIndentedString(outerDepth)).append("\n");
        sb.append("    outerUnit: ").append(toIndentedString(outerUnit)).append("\n");
        sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("    deviceCount: ").append(toIndentedString(deviceCount)).append("\n");
        sb.append("    powerfeedCount: ").append(toIndentedString(powerfeedCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("name");
        openapiFields.add("facility_id");
        openapiFields.add("site");
        openapiFields.add("location");
        openapiFields.add("tenant");
        openapiFields.add("status");
        openapiFields.add("role");
        openapiFields.add("serial");
        openapiFields.add("asset_tag");
        openapiFields.add("type");
        openapiFields.add("width");
        openapiFields.add("u_height");
        openapiFields.add("desc_units");
        openapiFields.add("outer_width");
        openapiFields.add("outer_depth");
        openapiFields.add("outer_unit");
        openapiFields.add("comments");
        openapiFields.add("tags");
        openapiFields.add("custom_fields");
        openapiFields.add("created");
        openapiFields.add("last_updated");
        openapiFields.add("device_count");
        openapiFields.add("powerfeed_count");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("site");
        openapiRequiredFields.add("location");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to WritableRack
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (WritableRack.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in WritableRack is not found in the empty JSON string", WritableRack.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!WritableRack.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableRack` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : WritableRack.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name")
                    .toString()));
        }
        if (jsonObj.get("facility_id") != null && !jsonObj.get("facility_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `facility_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facility_id")
                    .toString()));
        }
        if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status")
                    .toString()));
        }
        if (jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial")
                    .toString()));
        }
        if (jsonObj.get("asset_tag") != null && !jsonObj.get("asset_tag").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `asset_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_tag")
                    .toString()));
        }
        if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type")
                    .toString()));
        }
        if (jsonObj.get("outer_unit") != null && !jsonObj.get("outer_unit").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `outer_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outer_unit")
                    .toString()));
        }
        if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments")
                    .toString()));
        }
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
            // ensure the json data is an array
            if (!jsonObj.get("tags").isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags")
                        .toString()));
            }
            
            // validate the optional field `tags` (array)
            for (int i = 0; i < jsonArraytags.size(); i++) {
                NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
            }
            ;
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WritableRack.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WritableRack' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<WritableRack> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(WritableRack.class));
            
            return (TypeAdapter<T>) new TypeAdapter<WritableRack>() {
                @Override
                public void write(JsonWriter out, WritableRack value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public WritableRack read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of WritableRack given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of WritableRack
     *
     * @throws IOException if the JSON string is invalid with respect to WritableRack
     */
    public static WritableRack fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WritableRack.class);
    }
    
    /**
     * Convert an instance of WritableRack to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

