/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.codemakers.netbox.client.JSON;

/**
 * Type4
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class Type4 {
  /**
   * Gets or Sets label
   */
  @JsonAdapter(LabelEnum.Adapter.class)
  public enum LabelEnum {
    C5("C5"),
    
    C7("C7"),
    
    C13("C13"),
    
    C15("C15"),
    
    C19("C19"),
    
    C21("C21"),
    
    P_N_E_4H("P+N+E 4H"),
    
    P_N_E_6H("P+N+E 6H"),
    
    P_N_E_9H("P+N+E 9H"),
    
    _2P_E_4H("2P+E 4H"),
    
    _2P_E_6H("2P+E 6H"),
    
    _2P_E_9H("2P+E 9H"),
    
    _3P_E_4H("3P+E 4H"),
    
    _3P_E_6H("3P+E 6H"),
    
    _3P_E_9H("3P+E 9H"),
    
    _3P_N_E_4H("3P+N+E 4H"),
    
    _3P_N_E_6H("3P+N+E 6H"),
    
    _3P_N_E_9H("3P+N+E 9H"),
    
    NEMA_1_15R("NEMA 1-15R"),
    
    NEMA_5_15R("NEMA 5-15R"),
    
    NEMA_5_20R("NEMA 5-20R"),
    
    NEMA_5_30R("NEMA 5-30R"),
    
    NEMA_5_50R("NEMA 5-50R"),
    
    NEMA_6_15R("NEMA 6-15R"),
    
    NEMA_6_20R("NEMA 6-20R"),
    
    NEMA_6_30R("NEMA 6-30R"),
    
    NEMA_6_50R("NEMA 6-50R"),
    
    NEMA_10_30R("NEMA 10-30R"),
    
    NEMA_10_50R("NEMA 10-50R"),
    
    NEMA_14_20R("NEMA 14-20R"),
    
    NEMA_14_30R("NEMA 14-30R"),
    
    NEMA_14_50R("NEMA 14-50R"),
    
    NEMA_14_60R("NEMA 14-60R"),
    
    NEMA_15_15R("NEMA 15-15R"),
    
    NEMA_15_20R("NEMA 15-20R"),
    
    NEMA_15_30R("NEMA 15-30R"),
    
    NEMA_15_50R("NEMA 15-50R"),
    
    NEMA_15_60R("NEMA 15-60R"),
    
    NEMA_L1_15R("NEMA L1-15R"),
    
    NEMA_L5_15R("NEMA L5-15R"),
    
    NEMA_L5_20R("NEMA L5-20R"),
    
    NEMA_L5_30R("NEMA L5-30R"),
    
    NEMA_L5_50R("NEMA L5-50R"),
    
    NEMA_L6_15R("NEMA L6-15R"),
    
    NEMA_L6_20R("NEMA L6-20R"),
    
    NEMA_L6_30R("NEMA L6-30R"),
    
    NEMA_L6_50R("NEMA L6-50R"),
    
    NEMA_L10_30R("NEMA L10-30R"),
    
    NEMA_L14_20R("NEMA L14-20R"),
    
    NEMA_L14_30R("NEMA L14-30R"),
    
    NEMA_L14_50R("NEMA L14-50R"),
    
    NEMA_L14_60R("NEMA L14-60R"),
    
    NEMA_L15_20R("NEMA L15-20R"),
    
    NEMA_L15_30R("NEMA L15-30R"),
    
    NEMA_L15_50R("NEMA L15-50R"),
    
    NEMA_L15_60R("NEMA L15-60R"),
    
    NEMA_L21_20R("NEMA L21-20R"),
    
    NEMA_L21_30R("NEMA L21-30R"),
    
    NEMA_L22_30R("NEMA L22-30R"),
    
    CS6360C("CS6360C"),
    
    CS6364C("CS6364C"),
    
    CS8164C("CS8164C"),
    
    CS8264C("CS8264C"),
    
    CS8364C("CS8364C"),
    
    CS8464C("CS8464C"),
    
    ITA_TYPE_E_CEE_7_5_("ITA Type E (CEE 7/5)"),
    
    ITA_TYPE_F_CEE_7_3_("ITA Type F (CEE 7/3)"),
    
    ITA_TYPE_G_BS_1363_("ITA Type G (BS 1363)"),
    
    ITA_TYPE_H("ITA Type H"),
    
    ITA_TYPE_I("ITA Type I"),
    
    ITA_TYPE_J("ITA Type J"),
    
    ITA_TYPE_K("ITA Type K"),
    
    ITA_TYPE_L_CEI_23_50_("ITA Type L (CEI 23-50)"),
    
    ITA_TYPE_M_BS_546_("ITA Type M (BS 546)"),
    
    ITA_TYPE_N("ITA Type N"),
    
    ITA_TYPE_O("ITA Type O"),
    
    ITA_MULTISTANDARD("ITA Multistandard"),
    
    USB_TYPE_A("USB Type A"),
    
    USB_MICRO_B("USB Micro B"),
    
    USB_TYPE_C("USB Type C"),
    
    DC_TERMINAL("DC Terminal"),
    
    HDOT_CX("HDOT Cx"),
    
    SAF_D_GRID("Saf-D-Grid"),
    
    NEUTRIK_POWERCON_20A_("Neutrik powerCON (20A)"),
    
    NEUTRIK_POWERCON_32A_("Neutrik powerCON (32A)"),
    
    NEUTRIK_POWERCON_TRUE1("Neutrik powerCON TRUE1"),
    
    NEUTRIK_POWERCON_TRUE1_TOP("Neutrik powerCON TRUE1 TOP"),
    
    UBIQUITI_SMARTPOWER("Ubiquiti SmartPower"),
    
    HARDWIRED("Hardwired"),
    
    OTHER("Other"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    LabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelEnum fromValue(String value) {
      for (LabelEnum b : LabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private LabelEnum label;

  /**
   * Gets or Sets value
   */
  @JsonAdapter(ValueEnum.Adapter.class)
  public enum ValueEnum {
    IEC_60320_C5("iec-60320-c5"),
    
    IEC_60320_C7("iec-60320-c7"),
    
    IEC_60320_C13("iec-60320-c13"),
    
    IEC_60320_C15("iec-60320-c15"),
    
    IEC_60320_C19("iec-60320-c19"),
    
    IEC_60320_C21("iec-60320-c21"),
    
    IEC_60309_P_N_E_4H("iec-60309-p-n-e-4h"),
    
    IEC_60309_P_N_E_6H("iec-60309-p-n-e-6h"),
    
    IEC_60309_P_N_E_9H("iec-60309-p-n-e-9h"),
    
    IEC_60309_2P_E_4H("iec-60309-2p-e-4h"),
    
    IEC_60309_2P_E_6H("iec-60309-2p-e-6h"),
    
    IEC_60309_2P_E_9H("iec-60309-2p-e-9h"),
    
    IEC_60309_3P_E_4H("iec-60309-3p-e-4h"),
    
    IEC_60309_3P_E_6H("iec-60309-3p-e-6h"),
    
    IEC_60309_3P_E_9H("iec-60309-3p-e-9h"),
    
    IEC_60309_3P_N_E_4H("iec-60309-3p-n-e-4h"),
    
    IEC_60309_3P_N_E_6H("iec-60309-3p-n-e-6h"),
    
    IEC_60309_3P_N_E_9H("iec-60309-3p-n-e-9h"),
    
    NEMA_1_15R("nema-1-15r"),
    
    NEMA_5_15R("nema-5-15r"),
    
    NEMA_5_20R("nema-5-20r"),
    
    NEMA_5_30R("nema-5-30r"),
    
    NEMA_5_50R("nema-5-50r"),
    
    NEMA_6_15R("nema-6-15r"),
    
    NEMA_6_20R("nema-6-20r"),
    
    NEMA_6_30R("nema-6-30r"),
    
    NEMA_6_50R("nema-6-50r"),
    
    NEMA_10_30R("nema-10-30r"),
    
    NEMA_10_50R("nema-10-50r"),
    
    NEMA_14_20R("nema-14-20r"),
    
    NEMA_14_30R("nema-14-30r"),
    
    NEMA_14_50R("nema-14-50r"),
    
    NEMA_14_60R("nema-14-60r"),
    
    NEMA_15_15R("nema-15-15r"),
    
    NEMA_15_20R("nema-15-20r"),
    
    NEMA_15_30R("nema-15-30r"),
    
    NEMA_15_50R("nema-15-50r"),
    
    NEMA_15_60R("nema-15-60r"),
    
    NEMA_L1_15R("nema-l1-15r"),
    
    NEMA_L5_15R("nema-l5-15r"),
    
    NEMA_L5_20R("nema-l5-20r"),
    
    NEMA_L5_30R("nema-l5-30r"),
    
    NEMA_L5_50R("nema-l5-50r"),
    
    NEMA_L6_15R("nema-l6-15r"),
    
    NEMA_L6_20R("nema-l6-20r"),
    
    NEMA_L6_30R("nema-l6-30r"),
    
    NEMA_L6_50R("nema-l6-50r"),
    
    NEMA_L10_30R("nema-l10-30r"),
    
    NEMA_L14_20R("nema-l14-20r"),
    
    NEMA_L14_30R("nema-l14-30r"),
    
    NEMA_L14_50R("nema-l14-50r"),
    
    NEMA_L14_60R("nema-l14-60r"),
    
    NEMA_L15_20R("nema-l15-20r"),
    
    NEMA_L15_30R("nema-l15-30r"),
    
    NEMA_L15_50R("nema-l15-50r"),
    
    NEMA_L15_60R("nema-l15-60r"),
    
    NEMA_L21_20R("nema-l21-20r"),
    
    NEMA_L21_30R("nema-l21-30r"),
    
    NEMA_L22_30R("nema-l22-30r"),
    
    CS6360C("CS6360C"),
    
    CS6364C("CS6364C"),
    
    CS8164C("CS8164C"),
    
    CS8264C("CS8264C"),
    
    CS8364C("CS8364C"),
    
    CS8464C("CS8464C"),
    
    ITA_E("ita-e"),
    
    ITA_F("ita-f"),
    
    ITA_G("ita-g"),
    
    ITA_H("ita-h"),
    
    ITA_I("ita-i"),
    
    ITA_J("ita-j"),
    
    ITA_K("ita-k"),
    
    ITA_L("ita-l"),
    
    ITA_M("ita-m"),
    
    ITA_N("ita-n"),
    
    ITA_O("ita-o"),
    
    ITA_MULTISTANDARD("ita-multistandard"),
    
    USB_A("usb-a"),
    
    USB_MICRO_B("usb-micro-b"),
    
    USB_C("usb-c"),
    
    DC_TERMINAL("dc-terminal"),
    
    HDOT_CX("hdot-cx"),
    
    SAF_D_GRID("saf-d-grid"),
    
    NEUTRIK_POWERCON_20A("neutrik-powercon-20a"),
    
    NEUTRIK_POWERCON_32A("neutrik-powercon-32a"),
    
    NEUTRIK_POWERCON_TRUE1("neutrik-powercon-true1"),
    
    NEUTRIK_POWERCON_TRUE1_TOP("neutrik-powercon-true1-top"),
    
    UBIQUITI_SMARTPOWER("ubiquiti-smartpower"),
    
    HARDWIRED("hardwired"),
    
    OTHER("other"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    ValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueEnum fromValue(String value) {
      for (ValueEnum b : ValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private ValueEnum value;

  public Type4() { 
  }

  public Type4 label(LabelEnum label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LabelEnum getLabel() {
    return label;
  }


  public void setLabel(LabelEnum label) {
    this.label = label;
  }


  public Type4 value(ValueEnum value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ValueEnum getValue() {
    return value;
  }


  public void setValue(ValueEnum value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Type4 type4 = (Type4) o;
    return Objects.equals(this.label, type4.label) &&
        Objects.equals(this.value, type4.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Type4 {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Type4
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Type4.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Type4 is not found in the empty JSON string", Type4.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Type4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Type4` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Type4.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Type4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Type4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Type4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Type4.class));

       return (TypeAdapter<T>) new TypeAdapter<Type4>() {
           @Override
           public void write(JsonWriter out, Type4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Type4 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Type4 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Type4
  * @throws IOException if the JSON string is invalid with respect to Type4
  */
  public static Type4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Type4.class);
  }

 /**
  * Convert an instance of Type4 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

