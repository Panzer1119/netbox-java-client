/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * GenericObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class GenericObject {
    public static final String SERIALIZED_NAME_OBJECT_TYPE = "object_type";
    @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
    private String objectType;
    
    public static final String SERIALIZED_NAME_OBJECT_ID = "object_id";
    @SerializedName(SERIALIZED_NAME_OBJECT_ID)
    private Integer objectId;
    
    public static final String SERIALIZED_NAME_OBJECT = "object";
    @SerializedName(SERIALIZED_NAME_OBJECT)
    private Map<String, String> _object = null;
    
    public GenericObject() {
    }
    
    
    public GenericObject(Map<String, String> _object) {
        this();
        this._object = _object;
    }
    
    public GenericObject objectType(String objectType) {
        
        this.objectType = objectType;
        return this;
    }
    
    /**
     * Get objectType
     *
     * @return objectType
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getObjectType() {
        return objectType;
    }
    
    
    public void setObjectType(String objectType) {
        this.objectType = objectType;
    }
    
    
    public GenericObject objectId(Integer objectId) {
        
        this.objectId = objectId;
        return this;
    }
    
    /**
     * Get objectId
     *
     * @return objectId
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public Integer getObjectId() {
        return objectId;
    }
    
    
    public void setObjectId(Integer objectId) {
        this.objectId = objectId;
    }
    
    
    /**
     * Get _object
     *
     * @return _object
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Map<String, String> getObject() {
        return _object;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenericObject genericObject = (GenericObject) o;
        return Objects.equals(this.objectType, genericObject.objectType) && Objects.equals(this.objectId, genericObject.objectId) && Objects.equals(this._object, genericObject._object);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(objectType, objectId, _object);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GenericObject {\n");
        sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
        sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
        sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("object_type");
        openapiFields.add("object_id");
        openapiFields.add("object");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("object_type");
        openapiRequiredFields.add("object_id");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to GenericObject
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (GenericObject.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in GenericObject is not found in the empty JSON string", GenericObject.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!GenericObject.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : GenericObject.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("object_type") != null && !jsonObj.get("object_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_type")
                    .toString()));
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GenericObject.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GenericObject' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GenericObject> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(GenericObject.class));
            
            return (TypeAdapter<T>) new TypeAdapter<GenericObject>() {
                @Override
                public void write(JsonWriter out, GenericObject value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public GenericObject read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of GenericObject given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of GenericObject
     *
     * @throws IOException if the JSON string is invalid with respect to GenericObject
     */
    public static GenericObject fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GenericObject.class);
    }
    
    /**
     * Convert an instance of GenericObject to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

