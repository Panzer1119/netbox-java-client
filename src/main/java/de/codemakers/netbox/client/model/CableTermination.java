/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.codemakers.netbox.client.JSON;

/**
 * CableTermination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class CableTermination {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_CABLE = "cable";
  @SerializedName(SERIALIZED_NAME_CABLE)
  private Integer cable;

  /**
   * Gets or Sets cableEnd
   */
  @JsonAdapter(CableEndEnum.Adapter.class)
  public enum CableEndEnum {
    A("A"),
    
    B("B"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    CableEndEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CableEndEnum fromValue(String value) {
      for (CableEndEnum b : CableEndEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CableEndEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CableEndEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CableEndEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CableEndEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CABLE_END = "cable_end";
  @SerializedName(SERIALIZED_NAME_CABLE_END)
  private CableEndEnum cableEnd;

  public static final String SERIALIZED_NAME_TERMINATION_TYPE = "termination_type";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TYPE)
  private String terminationType;

  public static final String SERIALIZED_NAME_TERMINATION_ID = "termination_id";
  @SerializedName(SERIALIZED_NAME_TERMINATION_ID)
  private Integer terminationId;

  public static final String SERIALIZED_NAME_TERMINATION = "termination";
  @SerializedName(SERIALIZED_NAME_TERMINATION)
  private Map<String, String> termination = null;

  public CableTermination() { 
  }

  
  public CableTermination(
     Integer id, 
     URI url, 
     String display, 
     Map<String, String> termination
  ) {
    this();
    this.id = id;
    this.url = url;
    this.display = display;
    this.termination = termination;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getUrl() {
    return url;
  }




   /**
   * Get display
   * @return display
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplay() {
    return display;
  }




  public CableTermination cable(Integer cable) {
    
    this.cable = cable;
    return this;
  }

   /**
   * Get cable
   * @return cable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCable() {
    return cable;
  }


  public void setCable(Integer cable) {
    this.cable = cable;
  }


  public CableTermination cableEnd(CableEndEnum cableEnd) {
    
    this.cableEnd = cableEnd;
    return this;
  }

   /**
   * Get cableEnd
   * @return cableEnd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CableEndEnum getCableEnd() {
    return cableEnd;
  }


  public void setCableEnd(CableEndEnum cableEnd) {
    this.cableEnd = cableEnd;
  }


  public CableTermination terminationType(String terminationType) {
    
    this.terminationType = terminationType;
    return this;
  }

   /**
   * Get terminationType
   * @return terminationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTerminationType() {
    return terminationType;
  }


  public void setTerminationType(String terminationType) {
    this.terminationType = terminationType;
  }


  public CableTermination terminationId(Integer terminationId) {
    
    this.terminationId = terminationId;
    return this;
  }

   /**
   * Get terminationId
   * minimum: 0
   * maximum: 9223372036854775807
   * @return terminationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTerminationId() {
    return terminationId;
  }


  public void setTerminationId(Integer terminationId) {
    this.terminationId = terminationId;
  }


   /**
   * Get termination
   * @return termination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getTermination() {
    return termination;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CableTermination cableTermination = (CableTermination) o;
    return Objects.equals(this.id, cableTermination.id) &&
        Objects.equals(this.url, cableTermination.url) &&
        Objects.equals(this.display, cableTermination.display) &&
        Objects.equals(this.cable, cableTermination.cable) &&
        Objects.equals(this.cableEnd, cableTermination.cableEnd) &&
        Objects.equals(this.terminationType, cableTermination.terminationType) &&
        Objects.equals(this.terminationId, cableTermination.terminationId) &&
        Objects.equals(this.termination, cableTermination.termination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, display, cable, cableEnd, terminationType, terminationId, termination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CableTermination {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    cableEnd: ").append(toIndentedString(cableEnd)).append("\n");
    sb.append("    terminationType: ").append(toIndentedString(terminationType)).append("\n");
    sb.append("    terminationId: ").append(toIndentedString(terminationId)).append("\n");
    sb.append("    termination: ").append(toIndentedString(termination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("display");
    openapiFields.add("cable");
    openapiFields.add("cable_end");
    openapiFields.add("termination_type");
    openapiFields.add("termination_id");
    openapiFields.add("termination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cable");
    openapiRequiredFields.add("cable_end");
    openapiRequiredFields.add("termination_type");
    openapiRequiredFields.add("termination_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CableTermination
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CableTermination.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CableTermination is not found in the empty JSON string", CableTermination.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CableTermination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CableTermination` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CableTermination.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if (jsonObj.get("cable_end") != null && !jsonObj.get("cable_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cable_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cable_end").toString()));
      }
      if (jsonObj.get("termination_type") != null && !jsonObj.get("termination_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termination_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termination_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CableTermination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CableTermination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CableTermination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CableTermination.class));

       return (TypeAdapter<T>) new TypeAdapter<CableTermination>() {
           @Override
           public void write(JsonWriter out, CableTermination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CableTermination read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CableTermination given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CableTermination
  * @throws IOException if the JSON string is invalid with respect to CableTermination
  */
  public static CableTermination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CableTermination.class);
  }

 /**
  * Convert an instance of CableTermination to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

