/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.codemakers.netbox.client.JSON;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.Map.Entry;

/**
 * PowerFeed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T15:14:28.278845400+02:00[Europe/Berlin]")
public class PowerFeed {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private Integer id;
    
    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private URI url;
    
    public static final String SERIALIZED_NAME_DISPLAY = "display";
    @SerializedName(SERIALIZED_NAME_DISPLAY)
    private String display;
    
    public static final String SERIALIZED_NAME_POWER_PANEL = "power_panel";
    @SerializedName(SERIALIZED_NAME_POWER_PANEL)
    private NestedPowerPanel powerPanel;
    
    public static final String SERIALIZED_NAME_RACK = "rack";
    @SerializedName(SERIALIZED_NAME_RACK)
    private NestedRack rack;
    
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    
    public static final String SERIALIZED_NAME_STATUS = "status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    private Status4 status;
    
    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private Type3 type;
    
    public static final String SERIALIZED_NAME_SUPPLY = "supply";
    @SerializedName(SERIALIZED_NAME_SUPPLY)
    private Supply supply;
    
    public static final String SERIALIZED_NAME_PHASE = "phase";
    @SerializedName(SERIALIZED_NAME_PHASE)
    private Phase phase;
    
    public static final String SERIALIZED_NAME_VOLTAGE = "voltage";
    @SerializedName(SERIALIZED_NAME_VOLTAGE)
    private Integer voltage;
    
    public static final String SERIALIZED_NAME_AMPERAGE = "amperage";
    @SerializedName(SERIALIZED_NAME_AMPERAGE)
    private Integer amperage;
    
    public static final String SERIALIZED_NAME_MAX_UTILIZATION = "max_utilization";
    @SerializedName(SERIALIZED_NAME_MAX_UTILIZATION)
    private Integer maxUtilization;
    
    public static final String SERIALIZED_NAME_COMMENTS = "comments";
    @SerializedName(SERIALIZED_NAME_COMMENTS)
    private String comments;
    
    public static final String SERIALIZED_NAME_MARK_CONNECTED = "mark_connected";
    @SerializedName(SERIALIZED_NAME_MARK_CONNECTED)
    private Boolean markConnected;
    
    public static final String SERIALIZED_NAME_CABLE = "cable";
    @SerializedName(SERIALIZED_NAME_CABLE)
    private NestedCable cable;
    
    public static final String SERIALIZED_NAME_CABLE_END = "cable_end";
    @SerializedName(SERIALIZED_NAME_CABLE_END)
    private String cableEnd;
    
    public static final String SERIALIZED_NAME_LINK_PEERS = "link_peers";
    @SerializedName(SERIALIZED_NAME_LINK_PEERS)
    private List<String> linkPeers = null;
    
    public static final String SERIALIZED_NAME_LINK_PEERS_TYPE = "link_peers_type";
    @SerializedName(SERIALIZED_NAME_LINK_PEERS_TYPE)
    private String linkPeersType;
    
    public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS = "connected_endpoints";
    @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS)
    private List<String> connectedEndpoints = null;
    
    public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE = "connected_endpoints_type";
    @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE)
    private String connectedEndpointsType;
    
    public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE = "connected_endpoints_reachable";
    @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE)
    private Boolean connectedEndpointsReachable;
    
    public static final String SERIALIZED_NAME_TAGS = "tags";
    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<NestedTag> tags = null;
    
    public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
    @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
    private Object customFields;
    
    public static final String SERIALIZED_NAME_CREATED = "created";
    @SerializedName(SERIALIZED_NAME_CREATED)
    private OffsetDateTime created;
    
    public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    private OffsetDateTime lastUpdated;
    
    public static final String SERIALIZED_NAME_OCCUPIED = "_occupied";
    @SerializedName(SERIALIZED_NAME_OCCUPIED)
    private Boolean occupied;
    
    public PowerFeed() {
    }
    
    
    public PowerFeed(Integer id, URI url, String display, String cableEnd, List<String> linkPeers, String linkPeersType, List<String> connectedEndpoints, String connectedEndpointsType, Boolean connectedEndpointsReachable, OffsetDateTime created, OffsetDateTime lastUpdated, Boolean occupied) {
        this();
        this.id = id;
        this.url = url;
        this.display = display;
        this.cableEnd = cableEnd;
        this.linkPeers = linkPeers;
        this.linkPeersType = linkPeersType;
        this.connectedEndpoints = connectedEndpoints;
        this.connectedEndpointsType = connectedEndpointsType;
        this.connectedEndpointsReachable = connectedEndpointsReachable;
        this.created = created;
        this.lastUpdated = lastUpdated;
        this.occupied = occupied;
    }
    
    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getId() {
        return id;
    }
    
    
    /**
     * Get url
     *
     * @return url
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public URI getUrl() {
        return url;
    }
    
    
    /**
     * Get display
     *
     * @return display
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getDisplay() {
        return display;
    }
    
    
    public PowerFeed powerPanel(NestedPowerPanel powerPanel) {
        
        this.powerPanel = powerPanel;
        return this;
    }
    
    /**
     * Get powerPanel
     *
     * @return powerPanel
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public NestedPowerPanel getPowerPanel() {
        return powerPanel;
    }
    
    
    public void setPowerPanel(NestedPowerPanel powerPanel) {
        this.powerPanel = powerPanel;
    }
    
    
    public PowerFeed rack(NestedRack rack) {
        
        this.rack = rack;
        return this;
    }
    
    /**
     * Get rack
     *
     * @return rack
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedRack getRack() {
        return rack;
    }
    
    
    public void setRack(NestedRack rack) {
        this.rack = rack;
    }
    
    
    public PowerFeed name(String name) {
        
        this.name = name;
        return this;
    }
    
    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    
    public String getName() {
        return name;
    }
    
    
    public void setName(String name) {
        this.name = name;
    }
    
    
    public PowerFeed status(Status4 status) {
        
        this.status = status;
        return this;
    }
    
    /**
     * Get status
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Status4 getStatus() {
        return status;
    }
    
    
    public void setStatus(Status4 status) {
        this.status = status;
    }
    
    
    public PowerFeed type(Type3 type) {
        
        this.type = type;
        return this;
    }
    
    /**
     * Get type
     *
     * @return type
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Type3 getType() {
        return type;
    }
    
    
    public void setType(Type3 type) {
        this.type = type;
    }
    
    
    public PowerFeed supply(Supply supply) {
        
        this.supply = supply;
        return this;
    }
    
    /**
     * Get supply
     *
     * @return supply
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Supply getSupply() {
        return supply;
    }
    
    
    public void setSupply(Supply supply) {
        this.supply = supply;
    }
    
    
    public PowerFeed phase(Phase phase) {
        
        this.phase = phase;
        return this;
    }
    
    /**
     * Get phase
     *
     * @return phase
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Phase getPhase() {
        return phase;
    }
    
    
    public void setPhase(Phase phase) {
        this.phase = phase;
    }
    
    
    public PowerFeed voltage(Integer voltage) {
        
        this.voltage = voltage;
        return this;
    }
    
    /**
     * Get voltage
     * minimum: -32768
     * maximum: 32767
     *
     * @return voltage
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getVoltage() {
        return voltage;
    }
    
    
    public void setVoltage(Integer voltage) {
        this.voltage = voltage;
    }
    
    
    public PowerFeed amperage(Integer amperage) {
        
        this.amperage = amperage;
        return this;
    }
    
    /**
     * Get amperage
     * minimum: 1
     * maximum: 32767
     *
     * @return amperage
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Integer getAmperage() {
        return amperage;
    }
    
    
    public void setAmperage(Integer amperage) {
        this.amperage = amperage;
    }
    
    
    public PowerFeed maxUtilization(Integer maxUtilization) {
        
        this.maxUtilization = maxUtilization;
        return this;
    }
    
    /**
     * Maximum permissible draw (percentage)
     * minimum: 1
     * maximum: 100
     *
     * @return maxUtilization
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Maximum permissible draw (percentage)")
    
    public Integer getMaxUtilization() {
        return maxUtilization;
    }
    
    
    public void setMaxUtilization(Integer maxUtilization) {
        this.maxUtilization = maxUtilization;
    }
    
    
    public PowerFeed comments(String comments) {
        
        this.comments = comments;
        return this;
    }
    
    /**
     * Get comments
     *
     * @return comments
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getComments() {
        return comments;
    }
    
    
    public void setComments(String comments) {
        this.comments = comments;
    }
    
    
    public PowerFeed markConnected(Boolean markConnected) {
        
        this.markConnected = markConnected;
        return this;
    }
    
    /**
     * Treat as if a cable is connected
     *
     * @return markConnected
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Treat as if a cable is connected")
    
    public Boolean getMarkConnected() {
        return markConnected;
    }
    
    
    public void setMarkConnected(Boolean markConnected) {
        this.markConnected = markConnected;
    }
    
    
    public PowerFeed cable(NestedCable cable) {
        
        this.cable = cable;
        return this;
    }
    
    /**
     * Get cable
     *
     * @return cable
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public NestedCable getCable() {
        return cable;
    }
    
    
    public void setCable(NestedCable cable) {
        this.cable = cable;
    }
    
    
    /**
     * Get cableEnd
     *
     * @return cableEnd
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getCableEnd() {
        return cableEnd;
    }
    
    
    /**
     * Return the appropriate serializer for the link termination model.
     *
     * @return linkPeers
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = " Return the appropriate serializer for the link termination model. ")
    
    public List<String> getLinkPeers() {
        return linkPeers;
    }
    
    
    /**
     * Get linkPeersType
     *
     * @return linkPeersType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getLinkPeersType() {
        return linkPeersType;
    }
    
    
    /**
     * Return the appropriate serializer for the type of connected object.
     *
     * @return connectedEndpoints
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = " Return the appropriate serializer for the type of connected object. ")
    
    public List<String> getConnectedEndpoints() {
        return connectedEndpoints;
    }
    
    
    /**
     * Get connectedEndpointsType
     *
     * @return connectedEndpointsType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public String getConnectedEndpointsType() {
        return connectedEndpointsType;
    }
    
    
    /**
     * Get connectedEndpointsReachable
     *
     * @return connectedEndpointsReachable
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Boolean getConnectedEndpointsReachable() {
        return connectedEndpointsReachable;
    }
    
    
    public PowerFeed tags(List<NestedTag> tags) {
        
        this.tags = tags;
        return this;
    }
    
    public PowerFeed addTagsItem(NestedTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }
    
    /**
     * Get tags
     *
     * @return tags
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public List<NestedTag> getTags() {
        return tags;
    }
    
    
    public void setTags(List<NestedTag> tags) {
        this.tags = tags;
    }
    
    
    public PowerFeed customFields(Object customFields) {
        
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Get customFields
     *
     * @return customFields
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Object getCustomFields() {
        return customFields;
    }
    
    
    public void setCustomFields(Object customFields) {
        this.customFields = customFields;
    }
    
    
    /**
     * Get created
     *
     * @return created
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getCreated() {
        return created;
    }
    
    
    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }
    
    
    /**
     * Get occupied
     *
     * @return occupied
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    
    public Boolean getOccupied() {
        return occupied;
    }
    
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PowerFeed powerFeed = (PowerFeed) o;
        return Objects.equals(this.id, powerFeed.id) && Objects.equals(this.url, powerFeed.url) && Objects.equals(this.display, powerFeed.display) && Objects.equals(this.powerPanel, powerFeed.powerPanel) && Objects.equals(this.rack, powerFeed.rack) && Objects.equals(this.name, powerFeed.name) && Objects.equals(this.status, powerFeed.status) && Objects.equals(this.type, powerFeed.type) && Objects.equals(this.supply, powerFeed.supply) && Objects.equals(this.phase, powerFeed.phase) && Objects.equals(this.voltage, powerFeed.voltage) && Objects.equals(this.amperage, powerFeed.amperage) && Objects.equals(this.maxUtilization, powerFeed.maxUtilization) && Objects.equals(this.comments, powerFeed.comments) && Objects.equals(this.markConnected, powerFeed.markConnected) && Objects.equals(this.cable, powerFeed.cable) && Objects.equals(this.cableEnd, powerFeed.cableEnd) && Objects.equals(this.linkPeers, powerFeed.linkPeers) && Objects.equals(this.linkPeersType, powerFeed.linkPeersType) && Objects.equals(this.connectedEndpoints, powerFeed.connectedEndpoints) && Objects.equals(this.connectedEndpointsType, powerFeed.connectedEndpointsType) && Objects.equals(this.connectedEndpointsReachable, powerFeed.connectedEndpointsReachable) && Objects.equals(this.tags, powerFeed.tags) && Objects.equals(this.customFields, powerFeed.customFields) && Objects.equals(this.created, powerFeed.created) && Objects.equals(this.lastUpdated, powerFeed.lastUpdated) && Objects.equals(this.occupied, powerFeed.occupied);
    }
    
    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, url, display, powerPanel, rack, name, status, type, supply, phase, voltage, amperage, maxUtilization, comments, markConnected, cable, cableEnd, linkPeers, linkPeersType, connectedEndpoints, connectedEndpointsType, connectedEndpointsReachable, tags, customFields, created, lastUpdated, occupied);
    }
    
    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PowerFeed {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    display: ").append(toIndentedString(display)).append("\n");
        sb.append("    powerPanel: ").append(toIndentedString(powerPanel)).append("\n");
        sb.append("    rack: ").append(toIndentedString(rack)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    supply: ").append(toIndentedString(supply)).append("\n");
        sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
        sb.append("    voltage: ").append(toIndentedString(voltage)).append("\n");
        sb.append("    amperage: ").append(toIndentedString(amperage)).append("\n");
        sb.append("    maxUtilization: ").append(toIndentedString(maxUtilization)).append("\n");
        sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
        sb.append("    markConnected: ").append(toIndentedString(markConnected)).append("\n");
        sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
        sb.append("    cableEnd: ").append(toIndentedString(cableEnd)).append("\n");
        sb.append("    linkPeers: ").append(toIndentedString(linkPeers)).append("\n");
        sb.append("    linkPeersType: ").append(toIndentedString(linkPeersType)).append("\n");
        sb.append("    connectedEndpoints: ").append(toIndentedString(connectedEndpoints)).append("\n");
        sb.append("    connectedEndpointsType: ").append(toIndentedString(connectedEndpointsType)).append("\n");
        sb.append("    connectedEndpointsReachable: ").append(toIndentedString(connectedEndpointsReachable)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
        sb.append("    created: ").append(toIndentedString(created)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("    occupied: ").append(toIndentedString(occupied)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    
    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
    
    
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;
    
    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("url");
        openapiFields.add("display");
        openapiFields.add("power_panel");
        openapiFields.add("rack");
        openapiFields.add("name");
        openapiFields.add("status");
        openapiFields.add("type");
        openapiFields.add("supply");
        openapiFields.add("phase");
        openapiFields.add("voltage");
        openapiFields.add("amperage");
        openapiFields.add("max_utilization");
        openapiFields.add("comments");
        openapiFields.add("mark_connected");
        openapiFields.add("cable");
        openapiFields.add("cable_end");
        openapiFields.add("link_peers");
        openapiFields.add("link_peers_type");
        openapiFields.add("connected_endpoints");
        openapiFields.add("connected_endpoints_type");
        openapiFields.add("connected_endpoints_reachable");
        openapiFields.add("tags");
        openapiFields.add("custom_fields");
        openapiFields.add("created");
        openapiFields.add("last_updated");
        openapiFields.add("_occupied");
        
        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("power_panel");
        openapiRequiredFields.add("name");
    }
    
    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     *
     * @throws IOException if the JSON Object is invalid with respect to PowerFeed
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (PowerFeed.openapiRequiredFields.isEmpty()) {
                return;
            } else { // has required fields
                throw new IllegalArgumentException(String.format("The required field(s) %s in PowerFeed is not found in the empty JSON string", PowerFeed.openapiRequiredFields.toString()));
            }
        }
        
        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PowerFeed.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PowerFeed` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
            }
        }
        
        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PowerFeed.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url")
                    .toString()));
        }
        if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display")
                    .toString()));
        }
        // validate the optional field `power_panel`
        if (jsonObj.getAsJsonObject("power_panel") != null) {
            NestedPowerPanel.validateJsonObject(jsonObj.getAsJsonObject("power_panel"));
        }
        // validate the optional field `rack`
        if (jsonObj.getAsJsonObject("rack") != null) {
            NestedRack.validateJsonObject(jsonObj.getAsJsonObject("rack"));
        }
        if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name")
                    .toString()));
        }
        // validate the optional field `status`
        if (jsonObj.getAsJsonObject("status") != null) {
            Status4.validateJsonObject(jsonObj.getAsJsonObject("status"));
        }
        // validate the optional field `type`
        if (jsonObj.getAsJsonObject("type") != null) {
            Type3.validateJsonObject(jsonObj.getAsJsonObject("type"));
        }
        // validate the optional field `supply`
        if (jsonObj.getAsJsonObject("supply") != null) {
            Supply.validateJsonObject(jsonObj.getAsJsonObject("supply"));
        }
        // validate the optional field `phase`
        if (jsonObj.getAsJsonObject("phase") != null) {
            Phase.validateJsonObject(jsonObj.getAsJsonObject("phase"));
        }
        if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments")
                    .toString()));
        }
        // validate the optional field `cable`
        if (jsonObj.getAsJsonObject("cable") != null) {
            NestedCable.validateJsonObject(jsonObj.getAsJsonObject("cable"));
        }
        if (jsonObj.get("cable_end") != null && !jsonObj.get("cable_end").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `cable_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cable_end")
                    .toString()));
        }
        // ensure the json data is an array
        if (jsonObj.get("link_peers") != null && !jsonObj.get("link_peers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `link_peers` to be an array in the JSON string but got `%s`", jsonObj.get("link_peers")
                    .toString()));
        }
        if (jsonObj.get("link_peers_type") != null && !jsonObj.get("link_peers_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `link_peers_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_peers_type")
                    .toString()));
        }
        // ensure the json data is an array
        if (jsonObj.get("connected_endpoints") != null && !jsonObj.get("connected_endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("connected_endpoints")
                    .toString()));
        }
        if (jsonObj.get("connected_endpoints_type") != null && !jsonObj.get("connected_endpoints_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_endpoints_type")
                    .toString()));
        }
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
            // ensure the json data is an array
            if (!jsonObj.get("tags").isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags")
                        .toString()));
            }
            
            // validate the optional field `tags` (array)
            for (int i = 0; i < jsonArraytags.size(); i++) {
                NestedTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
            }
            ;
        }
    }
    
    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PowerFeed.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PowerFeed' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PowerFeed> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(PowerFeed.class));
            
            return (TypeAdapter<T>) new TypeAdapter<PowerFeed>() {
                @Override
                public void write(JsonWriter out, PowerFeed value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }
                
                @Override
                public PowerFeed read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }
                
            }.nullSafe();
        }
    }
    
    /**
     * Create an instance of PowerFeed given an JSON string
     *
     * @param jsonString JSON string
     *
     * @return An instance of PowerFeed
     *
     * @throws IOException if the JSON string is invalid with respect to PowerFeed
     */
    public static PowerFeed fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PowerFeed.class);
    }
    
    /**
     * Convert an instance of PowerFeed to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

