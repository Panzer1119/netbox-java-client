/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Pair;

import de.codemakers.netbox.client.model.ASN;
import de.codemakers.netbox.client.model.Aggregate;
import de.codemakers.netbox.client.model.AvailableIP;
import de.codemakers.netbox.client.model.AvailablePrefix;
import de.codemakers.netbox.client.model.AvailableVLAN;
import java.math.BigDecimal;
import de.codemakers.netbox.client.model.FHRPGroup;
import de.codemakers.netbox.client.model.FHRPGroupAssignment;
import de.codemakers.netbox.client.model.IPAddress;
import de.codemakers.netbox.client.model.IPRange;
import de.codemakers.netbox.client.model.IpamAggregatesList200Response;
import de.codemakers.netbox.client.model.IpamAsnsList200Response;
import de.codemakers.netbox.client.model.IpamFhrpGroupAssignmentsList200Response;
import de.codemakers.netbox.client.model.IpamFhrpGroupsList200Response;
import de.codemakers.netbox.client.model.IpamIpAddressesList200Response;
import de.codemakers.netbox.client.model.IpamIpRangesList200Response;
import de.codemakers.netbox.client.model.IpamPrefixesList200Response;
import de.codemakers.netbox.client.model.IpamRirsList200Response;
import de.codemakers.netbox.client.model.IpamRolesList200Response;
import de.codemakers.netbox.client.model.IpamRouteTargetsList200Response;
import de.codemakers.netbox.client.model.IpamServiceTemplatesList200Response;
import de.codemakers.netbox.client.model.IpamServicesList200Response;
import de.codemakers.netbox.client.model.IpamVlanGroupsList200Response;
import de.codemakers.netbox.client.model.IpamVlansList200Response;
import de.codemakers.netbox.client.model.IpamVrfsList200Response;
import de.codemakers.netbox.client.model.Prefix;
import de.codemakers.netbox.client.model.PrefixLength;
import de.codemakers.netbox.client.model.RIR;
import de.codemakers.netbox.client.model.Role;
import de.codemakers.netbox.client.model.RouteTarget;
import de.codemakers.netbox.client.model.Service;
import de.codemakers.netbox.client.model.ServiceTemplate;
import de.codemakers.netbox.client.model.VLAN;
import de.codemakers.netbox.client.model.VLANGroup;
import de.codemakers.netbox.client.model.VRF;
import de.codemakers.netbox.client.model.WritableASN;
import de.codemakers.netbox.client.model.WritableAggregate;
import de.codemakers.netbox.client.model.WritableAvailableIP;
import de.codemakers.netbox.client.model.WritableCreateAvailableVLAN;
import de.codemakers.netbox.client.model.WritableFHRPGroupAssignment;
import de.codemakers.netbox.client.model.WritableIPAddress;
import de.codemakers.netbox.client.model.WritableIPRange;
import de.codemakers.netbox.client.model.WritablePrefix;
import de.codemakers.netbox.client.model.WritableRouteTarget;
import de.codemakers.netbox.client.model.WritableService;
import de.codemakers.netbox.client.model.WritableServiceTemplate;
import de.codemakers.netbox.client.model.WritableVLAN;
import de.codemakers.netbox.client.model.WritableVRF;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T18:36:37.665487300+02:00[Europe/Berlin]")
public class IpamApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public IpamApi() {
    this(new ApiClient());
  }

  public IpamApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamAggregatesBulkDelete() throws ApiException {
    ipamAggregatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamAggregatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Aggregate
   * @throws ApiException if fails to make API call
   */
  public Aggregate ipamAggregatesBulkPartialUpdate(WritableAggregate data) throws ApiException {
    ApiResponse<Aggregate> localVarResponse = ipamAggregatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Aggregate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Aggregate> ipamAggregatesBulkPartialUpdateWithHttpInfo(WritableAggregate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Aggregate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Aggregate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesBulkPartialUpdateRequestBuilder(WritableAggregate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAggregatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Aggregate
   * @throws ApiException if fails to make API call
   */
  public Aggregate ipamAggregatesBulkUpdate(WritableAggregate data) throws ApiException {
    ApiResponse<Aggregate> localVarResponse = ipamAggregatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Aggregate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Aggregate> ipamAggregatesBulkUpdateWithHttpInfo(WritableAggregate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Aggregate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Aggregate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesBulkUpdateRequestBuilder(WritableAggregate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAggregatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Aggregate
   * @throws ApiException if fails to make API call
   */
  public Aggregate ipamAggregatesCreate(WritableAggregate data) throws ApiException {
    ApiResponse<Aggregate> localVarResponse = ipamAggregatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Aggregate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Aggregate> ipamAggregatesCreateWithHttpInfo(WritableAggregate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesCreate", localVarResponse);
        }
        return new ApiResponse<Aggregate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Aggregate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesCreateRequestBuilder(WritableAggregate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAggregatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamAggregatesDelete(Integer id) throws ApiException {
    ipamAggregatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamAggregatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAggregatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param dateAdded  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param family  (optional)
   * @param prefix  (optional)
   * @param rirId  (optional)
   * @param rir  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param dateAddedN  (optional)
   * @param dateAddedLte  (optional)
   * @param dateAddedLt  (optional)
   * @param dateAddedGte  (optional)
   * @param dateAddedGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param rirIdN  (optional)
   * @param rirN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamAggregatesList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamAggregatesList200Response ipamAggregatesList(String id, String dateAdded, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamAggregatesList200Response> localVarResponse = ipamAggregatesListWithHttpInfo(id, dateAdded, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, rirId, rir, idN, idLte, idLt, idGte, idGt, dateAddedN, dateAddedLte, dateAddedLt, dateAddedGte, dateAddedGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param dateAdded  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param family  (optional)
   * @param prefix  (optional)
   * @param rirId  (optional)
   * @param rir  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param dateAddedN  (optional)
   * @param dateAddedLte  (optional)
   * @param dateAddedLt  (optional)
   * @param dateAddedGte  (optional)
   * @param dateAddedGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param rirIdN  (optional)
   * @param rirN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamAggregatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamAggregatesList200Response> ipamAggregatesListWithHttpInfo(String id, String dateAdded, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesListRequestBuilder(id, dateAdded, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, rirId, rir, idN, idLte, idLt, idGte, idGt, dateAddedN, dateAddedLte, dateAddedLt, dateAddedGte, dateAddedGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesList", localVarResponse);
        }
        return new ApiResponse<IpamAggregatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamAggregatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesListRequestBuilder(String id, String dateAdded, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_added", dateAdded));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("family", family));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("prefix", prefix));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir_id", rirId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir", rir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_added__n", dateAddedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_added__lte", dateAddedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_added__lt", dateAddedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_added__gte", dateAddedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_added__gt", dateAddedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir_id__n", rirIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir__n", rirN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @param data  (required)
   * @return Aggregate
   * @throws ApiException if fails to make API call
   */
  public Aggregate ipamAggregatesPartialUpdate(Integer id, WritableAggregate data) throws ApiException {
    ApiResponse<Aggregate> localVarResponse = ipamAggregatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Aggregate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Aggregate> ipamAggregatesPartialUpdateWithHttpInfo(Integer id, WritableAggregate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Aggregate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Aggregate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesPartialUpdateRequestBuilder(Integer id, WritableAggregate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAggregatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAggregatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @return Aggregate
   * @throws ApiException if fails to make API call
   */
  public Aggregate ipamAggregatesRead(Integer id) throws ApiException {
    ApiResponse<Aggregate> localVarResponse = ipamAggregatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @return ApiResponse&lt;Aggregate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Aggregate> ipamAggregatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesRead", localVarResponse);
        }
        return new ApiResponse<Aggregate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Aggregate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAggregatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @param data  (required)
   * @return Aggregate
   * @throws ApiException if fails to make API call
   */
  public Aggregate ipamAggregatesUpdate(Integer id, WritableAggregate data) throws ApiException {
    ApiResponse<Aggregate> localVarResponse = ipamAggregatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this aggregate. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Aggregate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Aggregate> ipamAggregatesUpdateWithHttpInfo(Integer id, WritableAggregate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAggregatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAggregatesUpdate", localVarResponse);
        }
        return new ApiResponse<Aggregate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Aggregate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAggregatesUpdateRequestBuilder(Integer id, WritableAggregate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAggregatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAggregatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/aggregates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamAsnsBulkDelete() throws ApiException {
    ipamAsnsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamAsnsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ASN
   * @throws ApiException if fails to make API call
   */
  public ASN ipamAsnsBulkPartialUpdate(WritableASN data) throws ApiException {
    ApiResponse<ASN> localVarResponse = ipamAsnsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ASN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ASN> ipamAsnsBulkPartialUpdateWithHttpInfo(WritableASN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ASN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ASN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsBulkPartialUpdateRequestBuilder(WritableASN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAsnsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ASN
   * @throws ApiException if fails to make API call
   */
  public ASN ipamAsnsBulkUpdate(WritableASN data) throws ApiException {
    ApiResponse<ASN> localVarResponse = ipamAsnsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ASN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ASN> ipamAsnsBulkUpdateWithHttpInfo(WritableASN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ASN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ASN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsBulkUpdateRequestBuilder(WritableASN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAsnsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ASN
   * @throws ApiException if fails to make API call
   */
  public ASN ipamAsnsCreate(WritableASN data) throws ApiException {
    ApiResponse<ASN> localVarResponse = ipamAsnsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ASN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ASN> ipamAsnsCreateWithHttpInfo(WritableASN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsCreate", localVarResponse);
        }
        return new ApiResponse<ASN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ASN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsCreateRequestBuilder(WritableASN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAsnsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamAsnsDelete(Integer id) throws ApiException {
    ipamAsnsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamAsnsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAsnsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param asn  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param rirId  (optional)
   * @param rir  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param asnN  (optional)
   * @param asnLte  (optional)
   * @param asnLt  (optional)
   * @param asnGte  (optional)
   * @param asnGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param rirIdN  (optional)
   * @param rirN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamAsnsList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamAsnsList200Response ipamAsnsList(String id, String asn, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamAsnsList200Response> localVarResponse = ipamAsnsListWithHttpInfo(id, asn, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rirId, rir, siteId, site, idN, idLte, idLt, idGte, idGt, asnN, asnLte, asnLt, asnGte, asnGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, siteIdN, siteN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param asn  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param rirId  (optional)
   * @param rir  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param asnN  (optional)
   * @param asnLte  (optional)
   * @param asnLt  (optional)
   * @param asnGte  (optional)
   * @param asnGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param rirIdN  (optional)
   * @param rirN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamAsnsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamAsnsList200Response> ipamAsnsListWithHttpInfo(String id, String asn, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsListRequestBuilder(id, asn, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rirId, rir, siteId, site, idN, idLte, idLt, idGte, idGt, asnN, asnLte, asnLt, asnGte, asnGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, siteIdN, siteN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsList", localVarResponse);
        }
        return new ApiResponse<IpamAsnsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamAsnsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsListRequestBuilder(String id, String asn, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn", asn));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir_id", rirId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir", rir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__n", asnN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__lte", asnLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__lt", asnLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__gte", asnGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__gt", asnGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir_id__n", rirIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rir__n", rirN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @param data  (required)
   * @return ASN
   * @throws ApiException if fails to make API call
   */
  public ASN ipamAsnsPartialUpdate(Integer id, WritableASN data) throws ApiException {
    ApiResponse<ASN> localVarResponse = ipamAsnsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ASN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ASN> ipamAsnsPartialUpdateWithHttpInfo(Integer id, WritableASN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ASN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ASN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsPartialUpdateRequestBuilder(Integer id, WritableASN data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAsnsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAsnsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @return ASN
   * @throws ApiException if fails to make API call
   */
  public ASN ipamAsnsRead(Integer id) throws ApiException {
    ApiResponse<ASN> localVarResponse = ipamAsnsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @return ApiResponse&lt;ASN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ASN> ipamAsnsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsRead", localVarResponse);
        }
        return new ApiResponse<ASN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ASN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAsnsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @param data  (required)
   * @return ASN
   * @throws ApiException if fails to make API call
   */
  public ASN ipamAsnsUpdate(Integer id, WritableASN data) throws ApiException {
    ApiResponse<ASN> localVarResponse = ipamAsnsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this ASN. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ASN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ASN> ipamAsnsUpdateWithHttpInfo(Integer id, WritableASN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamAsnsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamAsnsUpdate", localVarResponse);
        }
        return new ApiResponse<ASN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ASN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamAsnsUpdateRequestBuilder(Integer id, WritableASN data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamAsnsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamAsnsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/asns/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamFhrpGroupAssignmentsBulkDelete() throws ApiException {
    ipamFhrpGroupAssignmentsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamFhrpGroupAssignmentsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FHRPGroupAssignment
   * @throws ApiException if fails to make API call
   */
  public FHRPGroupAssignment ipamFhrpGroupAssignmentsBulkPartialUpdate(WritableFHRPGroupAssignment data) throws ApiException {
    ApiResponse<FHRPGroupAssignment> localVarResponse = ipamFhrpGroupAssignmentsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsBulkPartialUpdateWithHttpInfo(WritableFHRPGroupAssignment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroupAssignment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroupAssignment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsBulkPartialUpdateRequestBuilder(WritableFHRPGroupAssignment data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FHRPGroupAssignment
   * @throws ApiException if fails to make API call
   */
  public FHRPGroupAssignment ipamFhrpGroupAssignmentsBulkUpdate(WritableFHRPGroupAssignment data) throws ApiException {
    ApiResponse<FHRPGroupAssignment> localVarResponse = ipamFhrpGroupAssignmentsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsBulkUpdateWithHttpInfo(WritableFHRPGroupAssignment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroupAssignment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroupAssignment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsBulkUpdateRequestBuilder(WritableFHRPGroupAssignment data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FHRPGroupAssignment
   * @throws ApiException if fails to make API call
   */
  public FHRPGroupAssignment ipamFhrpGroupAssignmentsCreate(WritableFHRPGroupAssignment data) throws ApiException {
    ApiResponse<FHRPGroupAssignment> localVarResponse = ipamFhrpGroupAssignmentsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsCreateWithHttpInfo(WritableFHRPGroupAssignment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsCreate", localVarResponse);
        }
        return new ApiResponse<FHRPGroupAssignment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroupAssignment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsCreateRequestBuilder(WritableFHRPGroupAssignment data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamFhrpGroupAssignmentsDelete(Integer id) throws ApiException {
    ipamFhrpGroupAssignmentsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamFhrpGroupAssignmentsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param groupId  (optional)
   * @param interfaceType  (optional)
   * @param interfaceId  (optional)
   * @param priority  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param device  (optional)
   * @param deviceId  (optional)
   * @param virtualMachine  (optional)
   * @param virtualMachineId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param groupIdN  (optional)
   * @param interfaceTypeN  (optional)
   * @param interfaceIdN  (optional)
   * @param interfaceIdLte  (optional)
   * @param interfaceIdLt  (optional)
   * @param interfaceIdGte  (optional)
   * @param interfaceIdGt  (optional)
   * @param priorityN  (optional)
   * @param priorityLte  (optional)
   * @param priorityLt  (optional)
   * @param priorityGte  (optional)
   * @param priorityGt  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamFhrpGroupAssignmentsList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamFhrpGroupAssignmentsList200Response ipamFhrpGroupAssignmentsList(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamFhrpGroupAssignmentsList200Response> localVarResponse = ipamFhrpGroupAssignmentsListWithHttpInfo(id, groupId, interfaceType, interfaceId, priority, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, device, deviceId, virtualMachine, virtualMachineId, idN, idLte, idLt, idGte, idGt, groupIdN, interfaceTypeN, interfaceIdN, interfaceIdLte, interfaceIdLt, interfaceIdGte, interfaceIdGt, priorityN, priorityLte, priorityLt, priorityGte, priorityGt, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param groupId  (optional)
   * @param interfaceType  (optional)
   * @param interfaceId  (optional)
   * @param priority  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param device  (optional)
   * @param deviceId  (optional)
   * @param virtualMachine  (optional)
   * @param virtualMachineId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param groupIdN  (optional)
   * @param interfaceTypeN  (optional)
   * @param interfaceIdN  (optional)
   * @param interfaceIdLte  (optional)
   * @param interfaceIdLt  (optional)
   * @param interfaceIdGte  (optional)
   * @param interfaceIdGt  (optional)
   * @param priorityN  (optional)
   * @param priorityLte  (optional)
   * @param priorityLt  (optional)
   * @param priorityGte  (optional)
   * @param priorityGt  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamFhrpGroupAssignmentsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamFhrpGroupAssignmentsList200Response> ipamFhrpGroupAssignmentsListWithHttpInfo(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsListRequestBuilder(id, groupId, interfaceType, interfaceId, priority, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, device, deviceId, virtualMachine, virtualMachineId, idN, idLte, idLt, idGte, idGt, groupIdN, interfaceTypeN, interfaceIdN, interfaceIdLte, interfaceIdLt, interfaceIdGte, interfaceIdGt, priorityN, priorityLte, priorityLt, priorityGte, priorityGt, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsList", localVarResponse);
        }
        return new ApiResponse<IpamFhrpGroupAssignmentsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamFhrpGroupAssignmentsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsListRequestBuilder(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_type", interfaceType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id", interfaceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("priority", priority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine", virtualMachine));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine_id", virtualMachineId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_type__n", interfaceTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id__n", interfaceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id__lte", interfaceIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id__lt", interfaceIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id__gte", interfaceIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id__gt", interfaceIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("priority__n", priorityN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("priority__lte", priorityLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("priority__lt", priorityLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("priority__gte", priorityGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("priority__gt", priorityGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @param data  (required)
   * @return FHRPGroupAssignment
   * @throws ApiException if fails to make API call
   */
  public FHRPGroupAssignment ipamFhrpGroupAssignmentsPartialUpdate(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
    ApiResponse<FHRPGroupAssignment> localVarResponse = ipamFhrpGroupAssignmentsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsPartialUpdateWithHttpInfo(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroupAssignment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroupAssignment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsPartialUpdateRequestBuilder(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @return FHRPGroupAssignment
   * @throws ApiException if fails to make API call
   */
  public FHRPGroupAssignment ipamFhrpGroupAssignmentsRead(Integer id) throws ApiException {
    ApiResponse<FHRPGroupAssignment> localVarResponse = ipamFhrpGroupAssignmentsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @return ApiResponse&lt;FHRPGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsRead", localVarResponse);
        }
        return new ApiResponse<FHRPGroupAssignment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroupAssignment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @param data  (required)
   * @return FHRPGroupAssignment
   * @throws ApiException if fails to make API call
   */
  public FHRPGroupAssignment ipamFhrpGroupAssignmentsUpdate(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
    ApiResponse<FHRPGroupAssignment> localVarResponse = ipamFhrpGroupAssignmentsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group assignment. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsUpdateWithHttpInfo(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupAssignmentsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupAssignmentsUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroupAssignment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroupAssignment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupAssignmentsUpdateRequestBuilder(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-group-assignments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamFhrpGroupsBulkDelete() throws ApiException {
    ipamFhrpGroupsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamFhrpGroupsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FHRPGroup
   * @throws ApiException if fails to make API call
   */
  public FHRPGroup ipamFhrpGroupsBulkPartialUpdate(FHRPGroup data) throws ApiException {
    ApiResponse<FHRPGroup> localVarResponse = ipamFhrpGroupsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroup> ipamFhrpGroupsBulkPartialUpdateWithHttpInfo(FHRPGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsBulkPartialUpdateRequestBuilder(FHRPGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FHRPGroup
   * @throws ApiException if fails to make API call
   */
  public FHRPGroup ipamFhrpGroupsBulkUpdate(FHRPGroup data) throws ApiException {
    ApiResponse<FHRPGroup> localVarResponse = ipamFhrpGroupsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroup> ipamFhrpGroupsBulkUpdateWithHttpInfo(FHRPGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsBulkUpdateRequestBuilder(FHRPGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FHRPGroup
   * @throws ApiException if fails to make API call
   */
  public FHRPGroup ipamFhrpGroupsCreate(FHRPGroup data) throws ApiException {
    ApiResponse<FHRPGroup> localVarResponse = ipamFhrpGroupsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroup> ipamFhrpGroupsCreateWithHttpInfo(FHRPGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsCreate", localVarResponse);
        }
        return new ApiResponse<FHRPGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsCreateRequestBuilder(FHRPGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamFhrpGroupsDelete(Integer id) throws ApiException {
    ipamFhrpGroupsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamFhrpGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param groupId  (optional)
   * @param authKey  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param protocol  (optional)
   * @param authType  (optional)
   * @param relatedIp  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param groupIdN  (optional)
   * @param groupIdLte  (optional)
   * @param groupIdLt  (optional)
   * @param groupIdGte  (optional)
   * @param groupIdGt  (optional)
   * @param authKeyN  (optional)
   * @param authKeyIc  (optional)
   * @param authKeyNic  (optional)
   * @param authKeyIew  (optional)
   * @param authKeyNiew  (optional)
   * @param authKeyIsw  (optional)
   * @param authKeyNisw  (optional)
   * @param authKeyIe  (optional)
   * @param authKeyNie  (optional)
   * @param tagN  (optional)
   * @param protocolN  (optional)
   * @param authTypeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamFhrpGroupsList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamFhrpGroupsList200Response ipamFhrpGroupsList(String id, String groupId, String authKey, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String tagN, String protocolN, String authTypeN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamFhrpGroupsList200Response> localVarResponse = ipamFhrpGroupsListWithHttpInfo(id, groupId, authKey, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, protocol, authType, relatedIp, idN, idLte, idLt, idGte, idGt, groupIdN, groupIdLte, groupIdLt, groupIdGte, groupIdGt, authKeyN, authKeyIc, authKeyNic, authKeyIew, authKeyNiew, authKeyIsw, authKeyNisw, authKeyIe, authKeyNie, tagN, protocolN, authTypeN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param groupId  (optional)
   * @param authKey  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param protocol  (optional)
   * @param authType  (optional)
   * @param relatedIp  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param groupIdN  (optional)
   * @param groupIdLte  (optional)
   * @param groupIdLt  (optional)
   * @param groupIdGte  (optional)
   * @param groupIdGt  (optional)
   * @param authKeyN  (optional)
   * @param authKeyIc  (optional)
   * @param authKeyNic  (optional)
   * @param authKeyIew  (optional)
   * @param authKeyNiew  (optional)
   * @param authKeyIsw  (optional)
   * @param authKeyNisw  (optional)
   * @param authKeyIe  (optional)
   * @param authKeyNie  (optional)
   * @param tagN  (optional)
   * @param protocolN  (optional)
   * @param authTypeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamFhrpGroupsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamFhrpGroupsList200Response> ipamFhrpGroupsListWithHttpInfo(String id, String groupId, String authKey, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String tagN, String protocolN, String authTypeN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsListRequestBuilder(id, groupId, authKey, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, protocol, authType, relatedIp, idN, idLte, idLt, idGte, idGt, groupIdN, groupIdLte, groupIdLt, groupIdGte, groupIdGt, authKeyN, authKeyIc, authKeyNic, authKeyIew, authKeyNiew, authKeyIsw, authKeyNisw, authKeyIe, authKeyNie, tagN, protocolN, authTypeN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsList", localVarResponse);
        }
        return new ApiResponse<IpamFhrpGroupsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamFhrpGroupsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsListRequestBuilder(String id, String groupId, String authKey, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String tagN, String protocolN, String authTypeN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key", authKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("protocol", protocol));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_type", authType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("related_ip", relatedIp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__lte", groupIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__lt", groupIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__gte", groupIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__gt", groupIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__n", authKeyN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__ic", authKeyIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__nic", authKeyNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__iew", authKeyIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__niew", authKeyNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__isw", authKeyIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__nisw", authKeyNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__ie", authKeyIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_key__nie", authKeyNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("protocol__n", protocolN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_type__n", authTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @param data  (required)
   * @return FHRPGroup
   * @throws ApiException if fails to make API call
   */
  public FHRPGroup ipamFhrpGroupsPartialUpdate(Integer id, FHRPGroup data) throws ApiException {
    ApiResponse<FHRPGroup> localVarResponse = ipamFhrpGroupsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroup> ipamFhrpGroupsPartialUpdateWithHttpInfo(Integer id, FHRPGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsPartialUpdateRequestBuilder(Integer id, FHRPGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @return FHRPGroup
   * @throws ApiException if fails to make API call
   */
  public FHRPGroup ipamFhrpGroupsRead(Integer id) throws ApiException {
    ApiResponse<FHRPGroup> localVarResponse = ipamFhrpGroupsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @return ApiResponse&lt;FHRPGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroup> ipamFhrpGroupsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsRead", localVarResponse);
        }
        return new ApiResponse<FHRPGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @param data  (required)
   * @return FHRPGroup
   * @throws ApiException if fails to make API call
   */
  public FHRPGroup ipamFhrpGroupsUpdate(Integer id, FHRPGroup data) throws ApiException {
    ApiResponse<FHRPGroup> localVarResponse = ipamFhrpGroupsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this FHRP group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FHRPGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FHRPGroup> ipamFhrpGroupsUpdateWithHttpInfo(Integer id, FHRPGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamFhrpGroupsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamFhrpGroupsUpdate", localVarResponse);
        }
        return new ApiResponse<FHRPGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FHRPGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamFhrpGroupsUpdateRequestBuilder(Integer id, FHRPGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamFhrpGroupsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamFhrpGroupsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/fhrp-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamIpAddressesBulkDelete() throws ApiException {
    ipamIpAddressesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamIpAddressesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return IPAddress
   * @throws ApiException if fails to make API call
   */
  public IPAddress ipamIpAddressesBulkPartialUpdate(WritableIPAddress data) throws ApiException {
    ApiResponse<IPAddress> localVarResponse = ipamIpAddressesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPAddress> ipamIpAddressesBulkPartialUpdateWithHttpInfo(WritableIPAddress data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<IPAddress>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPAddress>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesBulkPartialUpdateRequestBuilder(WritableIPAddress data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpAddressesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return IPAddress
   * @throws ApiException if fails to make API call
   */
  public IPAddress ipamIpAddressesBulkUpdate(WritableIPAddress data) throws ApiException {
    ApiResponse<IPAddress> localVarResponse = ipamIpAddressesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPAddress> ipamIpAddressesBulkUpdateWithHttpInfo(WritableIPAddress data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<IPAddress>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPAddress>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesBulkUpdateRequestBuilder(WritableIPAddress data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpAddressesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return IPAddress
   * @throws ApiException if fails to make API call
   */
  public IPAddress ipamIpAddressesCreate(WritableIPAddress data) throws ApiException {
    ApiResponse<IPAddress> localVarResponse = ipamIpAddressesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPAddress> ipamIpAddressesCreateWithHttpInfo(WritableIPAddress data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesCreate", localVarResponse);
        }
        return new ApiResponse<IPAddress>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPAddress>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesCreateRequestBuilder(WritableIPAddress data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpAddressesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamIpAddressesDelete(Integer id) throws ApiException {
    ipamIpAddressesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamIpAddressesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpAddressesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param dnsName  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param family  (optional)
   * @param parent  (optional)
   * @param address  (optional)
   * @param maskLength  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param presentInVrfId  (optional)
   * @param presentInVrf  (optional)
   * @param device  (optional)
   * @param deviceId  (optional)
   * @param virtualMachine  (optional)
   * @param virtualMachineId  (optional)
   * @param _interface  (optional)
   * @param interfaceId  (optional)
   * @param vminterface  (optional)
   * @param vminterfaceId  (optional)
   * @param fhrpgroupId  (optional)
   * @param assignedToInterface  (optional)
   * @param status  (optional)
   * @param role  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param dnsNameN  (optional)
   * @param dnsNameIc  (optional)
   * @param dnsNameNic  (optional)
   * @param dnsNameIew  (optional)
   * @param dnsNameNiew  (optional)
   * @param dnsNameIsw  (optional)
   * @param dnsNameNisw  (optional)
   * @param dnsNameIe  (optional)
   * @param dnsNameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param interfaceN  (optional)
   * @param interfaceIdN  (optional)
   * @param vminterfaceN  (optional)
   * @param vminterfaceIdN  (optional)
   * @param fhrpgroupIdN  (optional)
   * @param statusN  (optional)
   * @param roleN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamIpAddressesList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamIpAddressesList200Response ipamIpAddressesList(String id, String dnsName, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamIpAddressesList200Response> localVarResponse = ipamIpAddressesListWithHttpInfo(id, dnsName, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, parent, address, maskLength, vrfId, vrf, presentInVrfId, presentInVrf, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, fhrpgroupId, assignedToInterface, status, role, idN, idLte, idLt, idGte, idGt, dnsNameN, dnsNameIc, dnsNameNic, dnsNameIew, dnsNameNiew, dnsNameIsw, dnsNameNisw, dnsNameIe, dnsNameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, vrfIdN, vrfN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, fhrpgroupIdN, statusN, roleN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param dnsName  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param family  (optional)
   * @param parent  (optional)
   * @param address  (optional)
   * @param maskLength  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param presentInVrfId  (optional)
   * @param presentInVrf  (optional)
   * @param device  (optional)
   * @param deviceId  (optional)
   * @param virtualMachine  (optional)
   * @param virtualMachineId  (optional)
   * @param _interface  (optional)
   * @param interfaceId  (optional)
   * @param vminterface  (optional)
   * @param vminterfaceId  (optional)
   * @param fhrpgroupId  (optional)
   * @param assignedToInterface  (optional)
   * @param status  (optional)
   * @param role  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param dnsNameN  (optional)
   * @param dnsNameIc  (optional)
   * @param dnsNameNic  (optional)
   * @param dnsNameIew  (optional)
   * @param dnsNameNiew  (optional)
   * @param dnsNameIsw  (optional)
   * @param dnsNameNisw  (optional)
   * @param dnsNameIe  (optional)
   * @param dnsNameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param interfaceN  (optional)
   * @param interfaceIdN  (optional)
   * @param vminterfaceN  (optional)
   * @param vminterfaceIdN  (optional)
   * @param fhrpgroupIdN  (optional)
   * @param statusN  (optional)
   * @param roleN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamIpAddressesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamIpAddressesList200Response> ipamIpAddressesListWithHttpInfo(String id, String dnsName, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesListRequestBuilder(id, dnsName, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, parent, address, maskLength, vrfId, vrf, presentInVrfId, presentInVrf, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, fhrpgroupId, assignedToInterface, status, role, idN, idLte, idLt, idGte, idGt, dnsNameN, dnsNameIc, dnsNameNic, dnsNameIew, dnsNameNiew, dnsNameIsw, dnsNameNisw, dnsNameIe, dnsNameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, vrfIdN, vrfN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, fhrpgroupIdN, statusN, roleN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesList", localVarResponse);
        }
        return new ApiResponse<IpamIpAddressesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamIpAddressesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesListRequestBuilder(String id, String dnsName, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name", dnsName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("family", family));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent", parent));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("address", address));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mask_length", maskLength));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id", vrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf", vrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("present_in_vrf_id", presentInVrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("present_in_vrf", presentInVrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine", virtualMachine));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine_id", virtualMachineId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface", _interface));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id", interfaceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vminterface", vminterface));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vminterface_id", vminterfaceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fhrpgroup_id", fhrpgroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_to_interface", assignedToInterface));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__n", dnsNameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__ic", dnsNameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__nic", dnsNameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__iew", dnsNameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__niew", dnsNameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__isw", dnsNameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__nisw", dnsNameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__ie", dnsNameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dns_name__nie", dnsNameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id__n", vrfIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf__n", vrfN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface__n", interfaceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_id__n", interfaceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vminterface__n", vminterfaceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vminterface_id__n", vminterfaceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fhrpgroup_id__n", fhrpgroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return IPAddress
   * @throws ApiException if fails to make API call
   */
  public IPAddress ipamIpAddressesPartialUpdate(Integer id, WritableIPAddress data) throws ApiException {
    ApiResponse<IPAddress> localVarResponse = ipamIpAddressesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return ApiResponse&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPAddress> ipamIpAddressesPartialUpdateWithHttpInfo(Integer id, WritableIPAddress data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<IPAddress>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPAddress>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesPartialUpdateRequestBuilder(Integer id, WritableIPAddress data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpAddressesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpAddressesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @return IPAddress
   * @throws ApiException if fails to make API call
   */
  public IPAddress ipamIpAddressesRead(Integer id) throws ApiException {
    ApiResponse<IPAddress> localVarResponse = ipamIpAddressesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @return ApiResponse&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPAddress> ipamIpAddressesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesRead", localVarResponse);
        }
        return new ApiResponse<IPAddress>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPAddress>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpAddressesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return IPAddress
   * @throws ApiException if fails to make API call
   */
  public IPAddress ipamIpAddressesUpdate(Integer id, WritableIPAddress data) throws ApiException {
    ApiResponse<IPAddress> localVarResponse = ipamIpAddressesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return ApiResponse&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPAddress> ipamIpAddressesUpdateWithHttpInfo(Integer id, WritableIPAddress data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpAddressesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpAddressesUpdate", localVarResponse);
        }
        return new ApiResponse<IPAddress>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPAddress>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpAddressesUpdateRequestBuilder(Integer id, WritableIPAddress data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpAddressesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpAddressesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-addresses/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return List&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IPAddress> ipamIpRangesAvailableIpsCreate(Integer id, WritableAvailableIP data) throws ApiException {
    ApiResponse<List<IPAddress>> localVarResponse = ipamIpRangesAvailableIpsCreateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return ApiResponse&lt;List&lt;IPAddress&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<IPAddress>> ipamIpRangesAvailableIpsCreateWithHttpInfo(Integer id, WritableAvailableIP data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesAvailableIpsCreateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesAvailableIpsCreate", localVarResponse);
        }
        return new ApiResponse<List<IPAddress>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<IPAddress>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesAvailableIpsCreateRequestBuilder(Integer id, WritableAvailableIP data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpRangesAvailableIpsCreate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpRangesAvailableIpsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/{id}/available-ips/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @return List&lt;AvailableIP&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AvailableIP> ipamIpRangesAvailableIpsList(Integer id) throws ApiException {
    ApiResponse<List<AvailableIP>> localVarResponse = ipamIpRangesAvailableIpsListWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @return ApiResponse&lt;List&lt;AvailableIP&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AvailableIP>> ipamIpRangesAvailableIpsListWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesAvailableIpsListRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesAvailableIpsList", localVarResponse);
        }
        return new ApiResponse<List<AvailableIP>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<AvailableIP>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesAvailableIpsListRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpRangesAvailableIpsList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/{id}/available-ips/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamIpRangesBulkDelete() throws ApiException {
    ipamIpRangesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamIpRangesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return IPRange
   * @throws ApiException if fails to make API call
   */
  public IPRange ipamIpRangesBulkPartialUpdate(WritableIPRange data) throws ApiException {
    ApiResponse<IPRange> localVarResponse = ipamIpRangesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;IPRange&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPRange> ipamIpRangesBulkPartialUpdateWithHttpInfo(WritableIPRange data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<IPRange>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPRange>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesBulkPartialUpdateRequestBuilder(WritableIPRange data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpRangesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return IPRange
   * @throws ApiException if fails to make API call
   */
  public IPRange ipamIpRangesBulkUpdate(WritableIPRange data) throws ApiException {
    ApiResponse<IPRange> localVarResponse = ipamIpRangesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;IPRange&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPRange> ipamIpRangesBulkUpdateWithHttpInfo(WritableIPRange data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<IPRange>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPRange>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesBulkUpdateRequestBuilder(WritableIPRange data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpRangesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return IPRange
   * @throws ApiException if fails to make API call
   */
  public IPRange ipamIpRangesCreate(WritableIPRange data) throws ApiException {
    ApiResponse<IPRange> localVarResponse = ipamIpRangesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;IPRange&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPRange> ipamIpRangesCreateWithHttpInfo(WritableIPRange data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesCreate", localVarResponse);
        }
        return new ApiResponse<IPRange>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPRange>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesCreateRequestBuilder(WritableIPRange data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpRangesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamIpRangesDelete(Integer id) throws ApiException {
    ipamIpRangesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamIpRangesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpRangesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param description  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param family  (optional)
   * @param contains  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param status  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param tagN  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param statusN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamIpRangesList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamIpRangesList200Response ipamIpRangesList(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamIpRangesList200Response> localVarResponse = ipamIpRangesListWithHttpInfo(id, description, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, family, contains, vrfId, vrf, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, vrfIdN, vrfN, roleIdN, roleN, statusN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param description  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param family  (optional)
   * @param contains  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param status  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param tagN  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param statusN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamIpRangesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamIpRangesList200Response> ipamIpRangesListWithHttpInfo(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesListRequestBuilder(id, description, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, family, contains, vrfId, vrf, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, vrfIdN, vrfN, roleIdN, roleN, statusN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesList", localVarResponse);
        }
        return new ApiResponse<IpamIpRangesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamIpRangesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesListRequestBuilder(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("family", family));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contains", contains));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id", vrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf", vrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id__n", vrfIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf__n", vrfN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @param data  (required)
   * @return IPRange
   * @throws ApiException if fails to make API call
   */
  public IPRange ipamIpRangesPartialUpdate(Integer id, WritableIPRange data) throws ApiException {
    ApiResponse<IPRange> localVarResponse = ipamIpRangesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @param data  (required)
   * @return ApiResponse&lt;IPRange&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPRange> ipamIpRangesPartialUpdateWithHttpInfo(Integer id, WritableIPRange data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<IPRange>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPRange>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesPartialUpdateRequestBuilder(Integer id, WritableIPRange data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpRangesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpRangesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @return IPRange
   * @throws ApiException if fails to make API call
   */
  public IPRange ipamIpRangesRead(Integer id) throws ApiException {
    ApiResponse<IPRange> localVarResponse = ipamIpRangesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @return ApiResponse&lt;IPRange&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPRange> ipamIpRangesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesRead", localVarResponse);
        }
        return new ApiResponse<IPRange>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPRange>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpRangesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @param data  (required)
   * @return IPRange
   * @throws ApiException if fails to make API call
   */
  public IPRange ipamIpRangesUpdate(Integer id, WritableIPRange data) throws ApiException {
    ApiResponse<IPRange> localVarResponse = ipamIpRangesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP range. (required)
   * @param data  (required)
   * @return ApiResponse&lt;IPRange&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IPRange> ipamIpRangesUpdateWithHttpInfo(Integer id, WritableIPRange data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamIpRangesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamIpRangesUpdate", localVarResponse);
        }
        return new ApiResponse<IPRange>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IPRange>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamIpRangesUpdateRequestBuilder(Integer id, WritableIPRange data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamIpRangesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamIpRangesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/ip-ranges/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return List&lt;IPAddress&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IPAddress> ipamPrefixesAvailableIpsCreate(Integer id, WritableAvailableIP data) throws ApiException {
    ApiResponse<List<IPAddress>> localVarResponse = ipamPrefixesAvailableIpsCreateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @param data  (required)
   * @return ApiResponse&lt;List&lt;IPAddress&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<IPAddress>> ipamPrefixesAvailableIpsCreateWithHttpInfo(Integer id, WritableAvailableIP data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesAvailableIpsCreateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesAvailableIpsCreate", localVarResponse);
        }
        return new ApiResponse<List<IPAddress>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<IPAddress>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesAvailableIpsCreateRequestBuilder(Integer id, WritableAvailableIP data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsCreate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamPrefixesAvailableIpsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/available-ips/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @return List&lt;AvailableIP&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AvailableIP> ipamPrefixesAvailableIpsList(Integer id) throws ApiException {
    ApiResponse<List<AvailableIP>> localVarResponse = ipamPrefixesAvailableIpsListWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this IP address. (required)
   * @return ApiResponse&lt;List&lt;AvailableIP&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AvailableIP>> ipamPrefixesAvailableIpsListWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesAvailableIpsListRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesAvailableIpsList", localVarResponse);
        }
        return new ApiResponse<List<AvailableIP>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<AvailableIP>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesAvailableIpsListRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/available-ips/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @param data  (required)
   * @return List&lt;Prefix&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Prefix> ipamPrefixesAvailablePrefixesCreate(Integer id, PrefixLength data) throws ApiException {
    ApiResponse<List<Prefix>> localVarResponse = ipamPrefixesAvailablePrefixesCreateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @param data  (required)
   * @return ApiResponse&lt;List&lt;Prefix&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Prefix>> ipamPrefixesAvailablePrefixesCreateWithHttpInfo(Integer id, PrefixLength data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesAvailablePrefixesCreateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesAvailablePrefixesCreate", localVarResponse);
        }
        return new ApiResponse<List<Prefix>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Prefix>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesAvailablePrefixesCreateRequestBuilder(Integer id, PrefixLength data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesCreate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamPrefixesAvailablePrefixesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/available-prefixes/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @return List&lt;AvailablePrefix&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AvailablePrefix> ipamPrefixesAvailablePrefixesList(Integer id) throws ApiException {
    ApiResponse<List<AvailablePrefix>> localVarResponse = ipamPrefixesAvailablePrefixesListWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @return ApiResponse&lt;List&lt;AvailablePrefix&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AvailablePrefix>> ipamPrefixesAvailablePrefixesListWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesAvailablePrefixesListRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesAvailablePrefixesList", localVarResponse);
        }
        return new ApiResponse<List<AvailablePrefix>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<AvailablePrefix>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesAvailablePrefixesListRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/available-prefixes/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamPrefixesBulkDelete() throws ApiException {
    ipamPrefixesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamPrefixesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Prefix
   * @throws ApiException if fails to make API call
   */
  public Prefix ipamPrefixesBulkPartialUpdate(WritablePrefix data) throws ApiException {
    ApiResponse<Prefix> localVarResponse = ipamPrefixesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Prefix&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Prefix> ipamPrefixesBulkPartialUpdateWithHttpInfo(WritablePrefix data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Prefix>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Prefix>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesBulkPartialUpdateRequestBuilder(WritablePrefix data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamPrefixesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Prefix
   * @throws ApiException if fails to make API call
   */
  public Prefix ipamPrefixesBulkUpdate(WritablePrefix data) throws ApiException {
    ApiResponse<Prefix> localVarResponse = ipamPrefixesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Prefix&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Prefix> ipamPrefixesBulkUpdateWithHttpInfo(WritablePrefix data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Prefix>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Prefix>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesBulkUpdateRequestBuilder(WritablePrefix data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamPrefixesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Prefix
   * @throws ApiException if fails to make API call
   */
  public Prefix ipamPrefixesCreate(WritablePrefix data) throws ApiException {
    ApiResponse<Prefix> localVarResponse = ipamPrefixesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Prefix&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Prefix> ipamPrefixesCreateWithHttpInfo(WritablePrefix data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesCreate", localVarResponse);
        }
        return new ApiResponse<Prefix>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Prefix>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesCreateRequestBuilder(WritablePrefix data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamPrefixesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamPrefixesDelete(Integer id) throws ApiException {
    ipamPrefixesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamPrefixesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param isPool  (optional)
   * @param markUtilized  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param family  (optional)
   * @param prefix  (optional)
   * @param within  (optional)
   * @param withinInclude  (optional)
   * @param contains  (optional)
   * @param depth  (optional)
   * @param children  (optional)
   * @param maskLength  (optional)
   * @param maskLengthGte  (optional)
   * @param maskLengthLte  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param presentInVrfId  (optional)
   * @param presentInVrf  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param vlanId  (optional)
   * @param vlanVid  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param status  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param depthN  (optional)
   * @param depthLte  (optional)
   * @param depthLt  (optional)
   * @param depthGte  (optional)
   * @param depthGt  (optional)
   * @param childrenN  (optional)
   * @param childrenLte  (optional)
   * @param childrenLt  (optional)
   * @param childrenGte  (optional)
   * @param childrenGt  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param vlanIdN  (optional)
   * @param vlanVidN  (optional)
   * @param vlanVidLte  (optional)
   * @param vlanVidLt  (optional)
   * @param vlanVidGte  (optional)
   * @param vlanVidGt  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param statusN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamPrefixesList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamPrefixesList200Response ipamPrefixesList(String id, String isPool, String markUtilized, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamPrefixesList200Response> localVarResponse = ipamPrefixesListWithHttpInfo(id, isPool, markUtilized, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, within, withinInclude, contains, depth, children, maskLength, maskLengthGte, maskLengthLte, vrfId, vrf, presentInVrfId, presentInVrf, regionId, region, siteGroupId, siteGroup, siteId, site, vlanId, vlanVid, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, depthN, depthLte, depthLt, depthGte, depthGt, childrenN, childrenLte, childrenLt, childrenGte, childrenGt, vrfIdN, vrfN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, vlanIdN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, roleIdN, roleN, statusN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param isPool  (optional)
   * @param markUtilized  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param family  (optional)
   * @param prefix  (optional)
   * @param within  (optional)
   * @param withinInclude  (optional)
   * @param contains  (optional)
   * @param depth  (optional)
   * @param children  (optional)
   * @param maskLength  (optional)
   * @param maskLengthGte  (optional)
   * @param maskLengthLte  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param presentInVrfId  (optional)
   * @param presentInVrf  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param vlanId  (optional)
   * @param vlanVid  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param status  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param depthN  (optional)
   * @param depthLte  (optional)
   * @param depthLt  (optional)
   * @param depthGte  (optional)
   * @param depthGt  (optional)
   * @param childrenN  (optional)
   * @param childrenLte  (optional)
   * @param childrenLt  (optional)
   * @param childrenGte  (optional)
   * @param childrenGt  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param vlanIdN  (optional)
   * @param vlanVidN  (optional)
   * @param vlanVidLte  (optional)
   * @param vlanVidLt  (optional)
   * @param vlanVidGte  (optional)
   * @param vlanVidGt  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param statusN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamPrefixesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamPrefixesList200Response> ipamPrefixesListWithHttpInfo(String id, String isPool, String markUtilized, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesListRequestBuilder(id, isPool, markUtilized, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, within, withinInclude, contains, depth, children, maskLength, maskLengthGte, maskLengthLte, vrfId, vrf, presentInVrfId, presentInVrf, regionId, region, siteGroupId, siteGroup, siteId, site, vlanId, vlanVid, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, depthN, depthLte, depthLt, depthGte, depthGt, childrenN, childrenLte, childrenLt, childrenGte, childrenGt, vrfIdN, vrfN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, vlanIdN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, roleIdN, roleN, statusN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesList", localVarResponse);
        }
        return new ApiResponse<IpamPrefixesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamPrefixesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesListRequestBuilder(String id, String isPool, String markUtilized, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("is_pool", isPool));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mark_utilized", markUtilized));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("family", family));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("prefix", prefix));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("within", within));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("within_include", withinInclude));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contains", contains));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("depth", depth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("children", children));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mask_length", maskLength));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mask_length__gte", maskLengthGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mask_length__lte", maskLengthLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id", vrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf", vrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("present_in_vrf_id", presentInVrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("present_in_vrf", presentInVrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_id", vlanId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_vid", vlanVid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("depth__n", depthN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("depth__lte", depthLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("depth__lt", depthLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("depth__gte", depthGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("depth__gt", depthGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("children__n", childrenN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("children__lte", childrenLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("children__lt", childrenLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("children__gte", childrenGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("children__gt", childrenGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id__n", vrfIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf__n", vrfN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_id__n", vlanIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_vid__n", vlanVidN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_vid__lte", vlanVidLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_vid__lt", vlanVidLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_vid__gte", vlanVidGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_vid__gt", vlanVidGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @param data  (required)
   * @return Prefix
   * @throws ApiException if fails to make API call
   */
  public Prefix ipamPrefixesPartialUpdate(Integer id, WritablePrefix data) throws ApiException {
    ApiResponse<Prefix> localVarResponse = ipamPrefixesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Prefix&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Prefix> ipamPrefixesPartialUpdateWithHttpInfo(Integer id, WritablePrefix data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Prefix>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Prefix>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesPartialUpdateRequestBuilder(Integer id, WritablePrefix data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamPrefixesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @return Prefix
   * @throws ApiException if fails to make API call
   */
  public Prefix ipamPrefixesRead(Integer id) throws ApiException {
    ApiResponse<Prefix> localVarResponse = ipamPrefixesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @return ApiResponse&lt;Prefix&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Prefix> ipamPrefixesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesRead", localVarResponse);
        }
        return new ApiResponse<Prefix>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Prefix>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @param data  (required)
   * @return Prefix
   * @throws ApiException if fails to make API call
   */
  public Prefix ipamPrefixesUpdate(Integer id, WritablePrefix data) throws ApiException {
    ApiResponse<Prefix> localVarResponse = ipamPrefixesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this prefix. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Prefix&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Prefix> ipamPrefixesUpdateWithHttpInfo(Integer id, WritablePrefix data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamPrefixesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamPrefixesUpdate", localVarResponse);
        }
        return new ApiResponse<Prefix>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Prefix>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamPrefixesUpdateRequestBuilder(Integer id, WritablePrefix data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamPrefixesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamPrefixesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/prefixes/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamRirsBulkDelete() throws ApiException {
    ipamRirsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamRirsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RIR
   * @throws ApiException if fails to make API call
   */
  public RIR ipamRirsBulkPartialUpdate(RIR data) throws ApiException {
    ApiResponse<RIR> localVarResponse = ipamRirsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RIR&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RIR> ipamRirsBulkPartialUpdateWithHttpInfo(RIR data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RIR>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RIR>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsBulkPartialUpdateRequestBuilder(RIR data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRirsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RIR
   * @throws ApiException if fails to make API call
   */
  public RIR ipamRirsBulkUpdate(RIR data) throws ApiException {
    ApiResponse<RIR> localVarResponse = ipamRirsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RIR&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RIR> ipamRirsBulkUpdateWithHttpInfo(RIR data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<RIR>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RIR>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsBulkUpdateRequestBuilder(RIR data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRirsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RIR
   * @throws ApiException if fails to make API call
   */
  public RIR ipamRirsCreate(RIR data) throws ApiException {
    ApiResponse<RIR> localVarResponse = ipamRirsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RIR&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RIR> ipamRirsCreateWithHttpInfo(RIR data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsCreate", localVarResponse);
        }
        return new ApiResponse<RIR>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RIR>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsCreateRequestBuilder(RIR data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRirsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamRirsDelete(Integer id) throws ApiException {
    ipamRirsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamRirsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRirsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param isPrivate  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamRirsList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamRirsList200Response ipamRirsList(String id, String name, String slug, String isPrivate, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamRirsList200Response> localVarResponse = ipamRirsListWithHttpInfo(id, name, slug, isPrivate, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param isPrivate  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamRirsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamRirsList200Response> ipamRirsListWithHttpInfo(String id, String name, String slug, String isPrivate, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsListRequestBuilder(id, name, slug, isPrivate, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsList", localVarResponse);
        }
        return new ApiResponse<IpamRirsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamRirsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsListRequestBuilder(String id, String name, String slug, String isPrivate, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("is_private", isPrivate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @param data  (required)
   * @return RIR
   * @throws ApiException if fails to make API call
   */
  public RIR ipamRirsPartialUpdate(Integer id, RIR data) throws ApiException {
    ApiResponse<RIR> localVarResponse = ipamRirsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RIR&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RIR> ipamRirsPartialUpdateWithHttpInfo(Integer id, RIR data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RIR>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RIR>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsPartialUpdateRequestBuilder(Integer id, RIR data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRirsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRirsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @return RIR
   * @throws ApiException if fails to make API call
   */
  public RIR ipamRirsRead(Integer id) throws ApiException {
    ApiResponse<RIR> localVarResponse = ipamRirsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @return ApiResponse&lt;RIR&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RIR> ipamRirsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsRead", localVarResponse);
        }
        return new ApiResponse<RIR>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RIR>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRirsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @param data  (required)
   * @return RIR
   * @throws ApiException if fails to make API call
   */
  public RIR ipamRirsUpdate(Integer id, RIR data) throws ApiException {
    ApiResponse<RIR> localVarResponse = ipamRirsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this RIR. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RIR&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RIR> ipamRirsUpdateWithHttpInfo(Integer id, RIR data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRirsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRirsUpdate", localVarResponse);
        }
        return new ApiResponse<RIR>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RIR>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRirsUpdateRequestBuilder(Integer id, RIR data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRirsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRirsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/rirs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamRolesBulkDelete() throws ApiException {
    ipamRolesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamRolesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role ipamRolesBulkPartialUpdate(Role data) throws ApiException {
    ApiResponse<Role> localVarResponse = ipamRolesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Role> ipamRolesBulkPartialUpdateWithHttpInfo(Role data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Role>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesBulkPartialUpdateRequestBuilder(Role data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRolesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role ipamRolesBulkUpdate(Role data) throws ApiException {
    ApiResponse<Role> localVarResponse = ipamRolesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Role> ipamRolesBulkUpdateWithHttpInfo(Role data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Role>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesBulkUpdateRequestBuilder(Role data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRolesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role ipamRolesCreate(Role data) throws ApiException {
    ApiResponse<Role> localVarResponse = ipamRolesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Role> ipamRolesCreateWithHttpInfo(Role data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesCreate", localVarResponse);
        }
        return new ApiResponse<Role>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesCreateRequestBuilder(Role data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRolesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamRolesDelete(Integer id) throws ApiException {
    ipamRolesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamRolesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRolesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamRolesList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamRolesList200Response ipamRolesList(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamRolesList200Response> localVarResponse = ipamRolesListWithHttpInfo(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamRolesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamRolesList200Response> ipamRolesListWithHttpInfo(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesListRequestBuilder(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesList", localVarResponse);
        }
        return new ApiResponse<IpamRolesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamRolesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesListRequestBuilder(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @param data  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role ipamRolesPartialUpdate(Integer id, Role data) throws ApiException {
    ApiResponse<Role> localVarResponse = ipamRolesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Role> ipamRolesPartialUpdateWithHttpInfo(Integer id, Role data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Role>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesPartialUpdateRequestBuilder(Integer id, Role data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRolesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRolesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role ipamRolesRead(Integer id) throws ApiException {
    ApiResponse<Role> localVarResponse = ipamRolesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @return ApiResponse&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Role> ipamRolesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesRead", localVarResponse);
        }
        return new ApiResponse<Role>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRolesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @param data  (required)
   * @return Role
   * @throws ApiException if fails to make API call
   */
  public Role ipamRolesUpdate(Integer id, Role data) throws ApiException {
    ApiResponse<Role> localVarResponse = ipamRolesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Role> ipamRolesUpdateWithHttpInfo(Integer id, Role data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRolesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRolesUpdate", localVarResponse);
        }
        return new ApiResponse<Role>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRolesUpdateRequestBuilder(Integer id, Role data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRolesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRolesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamRouteTargetsBulkDelete() throws ApiException {
    ipamRouteTargetsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamRouteTargetsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RouteTarget
   * @throws ApiException if fails to make API call
   */
  public RouteTarget ipamRouteTargetsBulkPartialUpdate(WritableRouteTarget data) throws ApiException {
    ApiResponse<RouteTarget> localVarResponse = ipamRouteTargetsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RouteTarget&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteTarget> ipamRouteTargetsBulkPartialUpdateWithHttpInfo(WritableRouteTarget data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RouteTarget>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteTarget>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsBulkPartialUpdateRequestBuilder(WritableRouteTarget data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRouteTargetsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RouteTarget
   * @throws ApiException if fails to make API call
   */
  public RouteTarget ipamRouteTargetsBulkUpdate(WritableRouteTarget data) throws ApiException {
    ApiResponse<RouteTarget> localVarResponse = ipamRouteTargetsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RouteTarget&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteTarget> ipamRouteTargetsBulkUpdateWithHttpInfo(WritableRouteTarget data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<RouteTarget>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteTarget>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsBulkUpdateRequestBuilder(WritableRouteTarget data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRouteTargetsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RouteTarget
   * @throws ApiException if fails to make API call
   */
  public RouteTarget ipamRouteTargetsCreate(WritableRouteTarget data) throws ApiException {
    ApiResponse<RouteTarget> localVarResponse = ipamRouteTargetsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RouteTarget&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteTarget> ipamRouteTargetsCreateWithHttpInfo(WritableRouteTarget data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsCreate", localVarResponse);
        }
        return new ApiResponse<RouteTarget>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteTarget>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsCreateRequestBuilder(WritableRouteTarget data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRouteTargetsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamRouteTargetsDelete(Integer id) throws ApiException {
    ipamRouteTargetsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamRouteTargetsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRouteTargetsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param importingVrfId  (optional)
   * @param importingVrf  (optional)
   * @param exportingVrfId  (optional)
   * @param exportingVrf  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param importingVrfIdN  (optional)
   * @param importingVrfN  (optional)
   * @param exportingVrfIdN  (optional)
   * @param exportingVrfN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamRouteTargetsList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamRouteTargetsList200Response ipamRouteTargetsList(String id, String name, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamRouteTargetsList200Response> localVarResponse = ipamRouteTargetsListWithHttpInfo(id, name, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importingVrfId, importingVrf, exportingVrfId, exportingVrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importingVrfIdN, importingVrfN, exportingVrfIdN, exportingVrfN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param importingVrfId  (optional)
   * @param importingVrf  (optional)
   * @param exportingVrfId  (optional)
   * @param exportingVrf  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param importingVrfIdN  (optional)
   * @param importingVrfN  (optional)
   * @param exportingVrfIdN  (optional)
   * @param exportingVrfN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamRouteTargetsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamRouteTargetsList200Response> ipamRouteTargetsListWithHttpInfo(String id, String name, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsListRequestBuilder(id, name, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importingVrfId, importingVrf, exportingVrfId, exportingVrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importingVrfIdN, importingVrfN, exportingVrfIdN, exportingVrfN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsList", localVarResponse);
        }
        return new ApiResponse<IpamRouteTargetsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamRouteTargetsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsListRequestBuilder(String id, String name, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("importing_vrf_id", importingVrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("importing_vrf", importingVrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("exporting_vrf_id", exportingVrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("exporting_vrf", exportingVrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("importing_vrf_id__n", importingVrfIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("importing_vrf__n", importingVrfN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("exporting_vrf_id__n", exportingVrfIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("exporting_vrf__n", exportingVrfN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @param data  (required)
   * @return RouteTarget
   * @throws ApiException if fails to make API call
   */
  public RouteTarget ipamRouteTargetsPartialUpdate(Integer id, WritableRouteTarget data) throws ApiException {
    ApiResponse<RouteTarget> localVarResponse = ipamRouteTargetsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RouteTarget&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteTarget> ipamRouteTargetsPartialUpdateWithHttpInfo(Integer id, WritableRouteTarget data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RouteTarget>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteTarget>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsPartialUpdateRequestBuilder(Integer id, WritableRouteTarget data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRouteTargetsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRouteTargetsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @return RouteTarget
   * @throws ApiException if fails to make API call
   */
  public RouteTarget ipamRouteTargetsRead(Integer id) throws ApiException {
    ApiResponse<RouteTarget> localVarResponse = ipamRouteTargetsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @return ApiResponse&lt;RouteTarget&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteTarget> ipamRouteTargetsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsRead", localVarResponse);
        }
        return new ApiResponse<RouteTarget>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteTarget>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRouteTargetsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @param data  (required)
   * @return RouteTarget
   * @throws ApiException if fails to make API call
   */
  public RouteTarget ipamRouteTargetsUpdate(Integer id, WritableRouteTarget data) throws ApiException {
    ApiResponse<RouteTarget> localVarResponse = ipamRouteTargetsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this route target. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RouteTarget&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteTarget> ipamRouteTargetsUpdateWithHttpInfo(Integer id, WritableRouteTarget data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamRouteTargetsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamRouteTargetsUpdate", localVarResponse);
        }
        return new ApiResponse<RouteTarget>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteTarget>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamRouteTargetsUpdateRequestBuilder(Integer id, WritableRouteTarget data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamRouteTargetsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamRouteTargetsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/route-targets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamServiceTemplatesBulkDelete() throws ApiException {
    ipamServiceTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamServiceTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ServiceTemplate
   * @throws ApiException if fails to make API call
   */
  public ServiceTemplate ipamServiceTemplatesBulkPartialUpdate(WritableServiceTemplate data) throws ApiException {
    ApiResponse<ServiceTemplate> localVarResponse = ipamServiceTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ServiceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceTemplate> ipamServiceTemplatesBulkPartialUpdateWithHttpInfo(WritableServiceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ServiceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesBulkPartialUpdateRequestBuilder(WritableServiceTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServiceTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ServiceTemplate
   * @throws ApiException if fails to make API call
   */
  public ServiceTemplate ipamServiceTemplatesBulkUpdate(WritableServiceTemplate data) throws ApiException {
    ApiResponse<ServiceTemplate> localVarResponse = ipamServiceTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ServiceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceTemplate> ipamServiceTemplatesBulkUpdateWithHttpInfo(WritableServiceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ServiceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesBulkUpdateRequestBuilder(WritableServiceTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServiceTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ServiceTemplate
   * @throws ApiException if fails to make API call
   */
  public ServiceTemplate ipamServiceTemplatesCreate(WritableServiceTemplate data) throws ApiException {
    ApiResponse<ServiceTemplate> localVarResponse = ipamServiceTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ServiceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceTemplate> ipamServiceTemplatesCreateWithHttpInfo(WritableServiceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<ServiceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesCreateRequestBuilder(WritableServiceTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServiceTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamServiceTemplatesDelete(Integer id) throws ApiException {
    ipamServiceTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamServiceTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServiceTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param protocol  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param port  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param protocolN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamServiceTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamServiceTemplatesList200Response ipamServiceTemplatesList(String id, String name, String protocol, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamServiceTemplatesList200Response> localVarResponse = ipamServiceTemplatesListWithHttpInfo(id, name, protocol, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param protocol  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param port  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param protocolN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamServiceTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamServiceTemplatesList200Response> ipamServiceTemplatesListWithHttpInfo(String id, String name, String protocol, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesListRequestBuilder(id, name, protocol, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesList", localVarResponse);
        }
        return new ApiResponse<IpamServiceTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamServiceTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesListRequestBuilder(String id, String name, String protocol, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("protocol", protocol));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port", port));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("protocol__n", protocolN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @param data  (required)
   * @return ServiceTemplate
   * @throws ApiException if fails to make API call
   */
  public ServiceTemplate ipamServiceTemplatesPartialUpdate(Integer id, WritableServiceTemplate data) throws ApiException {
    ApiResponse<ServiceTemplate> localVarResponse = ipamServiceTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ServiceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceTemplate> ipamServiceTemplatesPartialUpdateWithHttpInfo(Integer id, WritableServiceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ServiceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesPartialUpdateRequestBuilder(Integer id, WritableServiceTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServiceTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServiceTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @return ServiceTemplate
   * @throws ApiException if fails to make API call
   */
  public ServiceTemplate ipamServiceTemplatesRead(Integer id) throws ApiException {
    ApiResponse<ServiceTemplate> localVarResponse = ipamServiceTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @return ApiResponse&lt;ServiceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceTemplate> ipamServiceTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesRead", localVarResponse);
        }
        return new ApiResponse<ServiceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServiceTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @param data  (required)
   * @return ServiceTemplate
   * @throws ApiException if fails to make API call
   */
  public ServiceTemplate ipamServiceTemplatesUpdate(Integer id, WritableServiceTemplate data) throws ApiException {
    ApiResponse<ServiceTemplate> localVarResponse = ipamServiceTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ServiceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceTemplate> ipamServiceTemplatesUpdateWithHttpInfo(Integer id, WritableServiceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServiceTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServiceTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<ServiceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServiceTemplatesUpdateRequestBuilder(Integer id, WritableServiceTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServiceTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServiceTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/service-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamServicesBulkDelete() throws ApiException {
    ipamServicesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamServicesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Service
   * @throws ApiException if fails to make API call
   */
  public Service ipamServicesBulkPartialUpdate(WritableService data) throws ApiException {
    ApiResponse<Service> localVarResponse = ipamServicesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Service> ipamServicesBulkPartialUpdateWithHttpInfo(WritableService data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Service>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Service>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesBulkPartialUpdateRequestBuilder(WritableService data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServicesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Service
   * @throws ApiException if fails to make API call
   */
  public Service ipamServicesBulkUpdate(WritableService data) throws ApiException {
    ApiResponse<Service> localVarResponse = ipamServicesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Service> ipamServicesBulkUpdateWithHttpInfo(WritableService data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Service>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Service>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesBulkUpdateRequestBuilder(WritableService data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServicesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Service
   * @throws ApiException if fails to make API call
   */
  public Service ipamServicesCreate(WritableService data) throws ApiException {
    ApiResponse<Service> localVarResponse = ipamServicesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Service> ipamServicesCreateWithHttpInfo(WritableService data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesCreate", localVarResponse);
        }
        return new ApiResponse<Service>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Service>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesCreateRequestBuilder(WritableService data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServicesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamServicesDelete(Integer id) throws ApiException {
    ipamServicesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamServicesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServicesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param protocol  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualMachineId  (optional)
   * @param virtualMachine  (optional)
   * @param port  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param protocolN  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualMachineIdN  (optional)
   * @param virtualMachineN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamServicesList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamServicesList200Response ipamServicesList(String id, String name, String protocol, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamServicesList200Response> localVarResponse = ipamServicesListWithHttpInfo(id, name, protocol, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, deviceId, device, virtualMachineId, virtualMachine, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, deviceIdN, deviceN, virtualMachineIdN, virtualMachineN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param protocol  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualMachineId  (optional)
   * @param virtualMachine  (optional)
   * @param port  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param protocolN  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualMachineIdN  (optional)
   * @param virtualMachineN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamServicesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamServicesList200Response> ipamServicesListWithHttpInfo(String id, String name, String protocol, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesListRequestBuilder(id, name, protocol, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, deviceId, device, virtualMachineId, virtualMachine, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, deviceIdN, deviceN, virtualMachineIdN, virtualMachineN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesList", localVarResponse);
        }
        return new ApiResponse<IpamServicesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamServicesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesListRequestBuilder(String id, String name, String protocol, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("protocol", protocol));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine_id", virtualMachineId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine", virtualMachine));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port", port));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("protocol__n", protocolN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine_id__n", virtualMachineIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine__n", virtualMachineN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @param data  (required)
   * @return Service
   * @throws ApiException if fails to make API call
   */
  public Service ipamServicesPartialUpdate(Integer id, WritableService data) throws ApiException {
    ApiResponse<Service> localVarResponse = ipamServicesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Service> ipamServicesPartialUpdateWithHttpInfo(Integer id, WritableService data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Service>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Service>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesPartialUpdateRequestBuilder(Integer id, WritableService data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServicesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServicesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @return Service
   * @throws ApiException if fails to make API call
   */
  public Service ipamServicesRead(Integer id) throws ApiException {
    ApiResponse<Service> localVarResponse = ipamServicesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @return ApiResponse&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Service> ipamServicesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesRead", localVarResponse);
        }
        return new ApiResponse<Service>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Service>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServicesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @param data  (required)
   * @return Service
   * @throws ApiException if fails to make API call
   */
  public Service ipamServicesUpdate(Integer id, WritableService data) throws ApiException {
    ApiResponse<Service> localVarResponse = ipamServicesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this service. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Service> ipamServicesUpdateWithHttpInfo(Integer id, WritableService data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamServicesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamServicesUpdate", localVarResponse);
        }
        return new ApiResponse<Service>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Service>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamServicesUpdateRequestBuilder(Integer id, WritableService data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamServicesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamServicesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/services/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @param data  (required)
   * @return List&lt;VLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public List<VLAN> ipamVlanGroupsAvailableVlansCreate(Integer id, WritableCreateAvailableVLAN data) throws ApiException {
    ApiResponse<List<VLAN>> localVarResponse = ipamVlanGroupsAvailableVlansCreateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @param data  (required)
   * @return ApiResponse&lt;List&lt;VLAN&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<VLAN>> ipamVlanGroupsAvailableVlansCreateWithHttpInfo(Integer id, WritableCreateAvailableVLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsAvailableVlansCreateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsAvailableVlansCreate", localVarResponse);
        }
        return new ApiResponse<List<VLAN>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<VLAN>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsAvailableVlansCreateRequestBuilder(Integer id, WritableCreateAvailableVLAN data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlanGroupsAvailableVlansCreate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlanGroupsAvailableVlansCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/{id}/available-vlans/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @return List&lt;AvailableVLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AvailableVLAN> ipamVlanGroupsAvailableVlansList(Integer id) throws ApiException {
    ApiResponse<List<AvailableVLAN>> localVarResponse = ipamVlanGroupsAvailableVlansListWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @return ApiResponse&lt;List&lt;AvailableVLAN&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AvailableVLAN>> ipamVlanGroupsAvailableVlansListWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsAvailableVlansListRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsAvailableVlansList", localVarResponse);
        }
        return new ApiResponse<List<AvailableVLAN>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<AvailableVLAN>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsAvailableVlansListRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlanGroupsAvailableVlansList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/{id}/available-vlans/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamVlanGroupsBulkDelete() throws ApiException {
    ipamVlanGroupsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamVlanGroupsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VLANGroup
   * @throws ApiException if fails to make API call
   */
  public VLANGroup ipamVlanGroupsBulkPartialUpdate(VLANGroup data) throws ApiException {
    ApiResponse<VLANGroup> localVarResponse = ipamVlanGroupsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLANGroup> ipamVlanGroupsBulkPartialUpdateWithHttpInfo(VLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsBulkPartialUpdateRequestBuilder(VLANGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlanGroupsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VLANGroup
   * @throws ApiException if fails to make API call
   */
  public VLANGroup ipamVlanGroupsBulkUpdate(VLANGroup data) throws ApiException {
    ApiResponse<VLANGroup> localVarResponse = ipamVlanGroupsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLANGroup> ipamVlanGroupsBulkUpdateWithHttpInfo(VLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<VLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsBulkUpdateRequestBuilder(VLANGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlanGroupsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VLANGroup
   * @throws ApiException if fails to make API call
   */
  public VLANGroup ipamVlanGroupsCreate(VLANGroup data) throws ApiException {
    ApiResponse<VLANGroup> localVarResponse = ipamVlanGroupsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLANGroup> ipamVlanGroupsCreateWithHttpInfo(VLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsCreate", localVarResponse);
        }
        return new ApiResponse<VLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsCreateRequestBuilder(VLANGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlanGroupsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamVlanGroupsDelete(Integer id) throws ApiException {
    ipamVlanGroupsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamVlanGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlanGroupsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param minVid  (optional)
   * @param maxVid  (optional)
   * @param description  (optional)
   * @param scopeId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param scopeType  (optional)
   * @param region  (optional)
   * @param sitegroup  (optional)
   * @param site  (optional)
   * @param location  (optional)
   * @param rack  (optional)
   * @param clustergroup  (optional)
   * @param cluster  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param minVidN  (optional)
   * @param minVidLte  (optional)
   * @param minVidLt  (optional)
   * @param minVidGte  (optional)
   * @param minVidGt  (optional)
   * @param maxVidN  (optional)
   * @param maxVidLte  (optional)
   * @param maxVidLt  (optional)
   * @param maxVidGte  (optional)
   * @param maxVidGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param scopeIdN  (optional)
   * @param scopeIdLte  (optional)
   * @param scopeIdLt  (optional)
   * @param scopeIdGte  (optional)
   * @param scopeIdGt  (optional)
   * @param tagN  (optional)
   * @param scopeTypeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamVlanGroupsList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamVlanGroupsList200Response ipamVlanGroupsList(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String tagN, String scopeTypeN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamVlanGroupsList200Response> localVarResponse = ipamVlanGroupsListWithHttpInfo(id, name, slug, minVid, maxVid, description, scopeId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, scopeType, region, sitegroup, site, location, rack, clustergroup, cluster, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, minVidN, minVidLte, minVidLt, minVidGte, minVidGt, maxVidN, maxVidLte, maxVidLt, maxVidGte, maxVidGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, scopeIdN, scopeIdLte, scopeIdLt, scopeIdGte, scopeIdGt, tagN, scopeTypeN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param minVid  (optional)
   * @param maxVid  (optional)
   * @param description  (optional)
   * @param scopeId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param scopeType  (optional)
   * @param region  (optional)
   * @param sitegroup  (optional)
   * @param site  (optional)
   * @param location  (optional)
   * @param rack  (optional)
   * @param clustergroup  (optional)
   * @param cluster  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param minVidN  (optional)
   * @param minVidLte  (optional)
   * @param minVidLt  (optional)
   * @param minVidGte  (optional)
   * @param minVidGt  (optional)
   * @param maxVidN  (optional)
   * @param maxVidLte  (optional)
   * @param maxVidLt  (optional)
   * @param maxVidGte  (optional)
   * @param maxVidGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param scopeIdN  (optional)
   * @param scopeIdLte  (optional)
   * @param scopeIdLt  (optional)
   * @param scopeIdGte  (optional)
   * @param scopeIdGt  (optional)
   * @param tagN  (optional)
   * @param scopeTypeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamVlanGroupsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamVlanGroupsList200Response> ipamVlanGroupsListWithHttpInfo(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String tagN, String scopeTypeN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsListRequestBuilder(id, name, slug, minVid, maxVid, description, scopeId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, scopeType, region, sitegroup, site, location, rack, clustergroup, cluster, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, minVidN, minVidLte, minVidLt, minVidGte, minVidGt, maxVidN, maxVidLte, maxVidLt, maxVidGte, maxVidGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, scopeIdN, scopeIdLte, scopeIdLt, scopeIdGte, scopeIdGt, tagN, scopeTypeN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsList", localVarResponse);
        }
        return new ApiResponse<IpamVlanGroupsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamVlanGroupsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsListRequestBuilder(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String tagN, String scopeTypeN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_vid", minVid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_vid", maxVid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_id", scopeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_type", scopeType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sitegroup", sitegroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack", rack));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("clustergroup", clustergroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster", cluster));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_vid__n", minVidN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_vid__lte", minVidLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_vid__lt", minVidLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_vid__gte", minVidGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_vid__gt", minVidGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_vid__n", maxVidN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_vid__lte", maxVidLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_vid__lt", maxVidLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_vid__gte", maxVidGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_vid__gt", maxVidGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_id__n", scopeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_id__lte", scopeIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_id__lt", scopeIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_id__gte", scopeIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_id__gt", scopeIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope_type__n", scopeTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @param data  (required)
   * @return VLANGroup
   * @throws ApiException if fails to make API call
   */
  public VLANGroup ipamVlanGroupsPartialUpdate(Integer id, VLANGroup data) throws ApiException {
    ApiResponse<VLANGroup> localVarResponse = ipamVlanGroupsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLANGroup> ipamVlanGroupsPartialUpdateWithHttpInfo(Integer id, VLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsPartialUpdateRequestBuilder(Integer id, VLANGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlanGroupsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlanGroupsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @return VLANGroup
   * @throws ApiException if fails to make API call
   */
  public VLANGroup ipamVlanGroupsRead(Integer id) throws ApiException {
    ApiResponse<VLANGroup> localVarResponse = ipamVlanGroupsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @return ApiResponse&lt;VLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLANGroup> ipamVlanGroupsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsRead", localVarResponse);
        }
        return new ApiResponse<VLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlanGroupsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @param data  (required)
   * @return VLANGroup
   * @throws ApiException if fails to make API call
   */
  public VLANGroup ipamVlanGroupsUpdate(Integer id, VLANGroup data) throws ApiException {
    ApiResponse<VLANGroup> localVarResponse = ipamVlanGroupsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLANGroup> ipamVlanGroupsUpdateWithHttpInfo(Integer id, VLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlanGroupsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlanGroupsUpdate", localVarResponse);
        }
        return new ApiResponse<VLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlanGroupsUpdateRequestBuilder(Integer id, VLANGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlanGroupsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlanGroupsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamVlansBulkDelete() throws ApiException {
    ipamVlansBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamVlansBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VLAN
   * @throws ApiException if fails to make API call
   */
  public VLAN ipamVlansBulkPartialUpdate(WritableVLAN data) throws ApiException {
    ApiResponse<VLAN> localVarResponse = ipamVlansBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLAN> ipamVlansBulkPartialUpdateWithHttpInfo(WritableVLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansBulkPartialUpdateRequestBuilder(WritableVLAN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlansBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VLAN
   * @throws ApiException if fails to make API call
   */
  public VLAN ipamVlansBulkUpdate(WritableVLAN data) throws ApiException {
    ApiResponse<VLAN> localVarResponse = ipamVlansBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLAN> ipamVlansBulkUpdateWithHttpInfo(WritableVLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansBulkUpdate", localVarResponse);
        }
        return new ApiResponse<VLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansBulkUpdateRequestBuilder(WritableVLAN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlansBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VLAN
   * @throws ApiException if fails to make API call
   */
  public VLAN ipamVlansCreate(WritableVLAN data) throws ApiException {
    ApiResponse<VLAN> localVarResponse = ipamVlansCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLAN> ipamVlansCreateWithHttpInfo(WritableVLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansCreate", localVarResponse);
        }
        return new ApiResponse<VLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansCreateRequestBuilder(WritableVLAN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlansCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamVlansDelete(Integer id) throws ApiException {
    ipamVlansDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamVlansDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlansDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param vid  (optional)
   * @param name  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param status  (optional)
   * @param availableOnDevice  (optional)
   * @param availableOnVirtualmachine  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param vidN  (optional)
   * @param vidLte  (optional)
   * @param vidLt  (optional)
   * @param vidGte  (optional)
   * @param vidGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param statusN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamVlansList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamVlansList200Response ipamVlansList(String id, String vid, String name, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamVlansList200Response> localVarResponse = ipamVlansListWithHttpInfo(id, vid, name, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, roleId, role, status, availableOnDevice, availableOnVirtualmachine, idN, idLte, idLt, idGte, idGt, vidN, vidLte, vidLt, vidGte, vidGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, roleIdN, roleN, statusN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param vid  (optional)
   * @param name  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param status  (optional)
   * @param availableOnDevice  (optional)
   * @param availableOnVirtualmachine  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param vidN  (optional)
   * @param vidLte  (optional)
   * @param vidLt  (optional)
   * @param vidGte  (optional)
   * @param vidGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param statusN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamVlansList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamVlansList200Response> ipamVlansListWithHttpInfo(String id, String vid, String name, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansListRequestBuilder(id, vid, name, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, roleId, role, status, availableOnDevice, availableOnVirtualmachine, idN, idLte, idLt, idGte, idGt, vidN, vidLte, vidLt, vidGte, vidGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, roleIdN, roleN, statusN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansList", localVarResponse);
        }
        return new ApiResponse<IpamVlansList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamVlansList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansListRequestBuilder(String id, String vid, String name, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vid", vid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group", group));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("available_on_device", availableOnDevice));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("available_on_virtualmachine", availableOnVirtualmachine));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vid__n", vidN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vid__lte", vidLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vid__lt", vidLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vid__gte", vidGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vid__gt", vidGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group__n", groupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @param data  (required)
   * @return VLAN
   * @throws ApiException if fails to make API call
   */
  public VLAN ipamVlansPartialUpdate(Integer id, WritableVLAN data) throws ApiException {
    ApiResponse<VLAN> localVarResponse = ipamVlansPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLAN> ipamVlansPartialUpdateWithHttpInfo(Integer id, WritableVLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansPartialUpdateRequestBuilder(Integer id, WritableVLAN data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlansPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlansPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @return VLAN
   * @throws ApiException if fails to make API call
   */
  public VLAN ipamVlansRead(Integer id) throws ApiException {
    ApiResponse<VLAN> localVarResponse = ipamVlansReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @return ApiResponse&lt;VLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLAN> ipamVlansReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansRead", localVarResponse);
        }
        return new ApiResponse<VLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlansRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @param data  (required)
   * @return VLAN
   * @throws ApiException if fails to make API call
   */
  public VLAN ipamVlansUpdate(Integer id, WritableVLAN data) throws ApiException {
    ApiResponse<VLAN> localVarResponse = ipamVlansUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VLAN. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VLAN> ipamVlansUpdateWithHttpInfo(Integer id, WritableVLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVlansUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVlansUpdate", localVarResponse);
        }
        return new ApiResponse<VLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVlansUpdateRequestBuilder(Integer id, WritableVLAN data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVlansUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVlansUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vlans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void ipamVrfsBulkDelete() throws ApiException {
    ipamVrfsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamVrfsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VRF
   * @throws ApiException if fails to make API call
   */
  public VRF ipamVrfsBulkPartialUpdate(WritableVRF data) throws ApiException {
    ApiResponse<VRF> localVarResponse = ipamVrfsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VRF&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VRF> ipamVrfsBulkPartialUpdateWithHttpInfo(WritableVRF data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VRF>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VRF>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsBulkPartialUpdateRequestBuilder(WritableVRF data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVrfsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VRF
   * @throws ApiException if fails to make API call
   */
  public VRF ipamVrfsBulkUpdate(WritableVRF data) throws ApiException {
    ApiResponse<VRF> localVarResponse = ipamVrfsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VRF&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VRF> ipamVrfsBulkUpdateWithHttpInfo(WritableVRF data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<VRF>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VRF>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsBulkUpdateRequestBuilder(WritableVRF data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVrfsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VRF
   * @throws ApiException if fails to make API call
   */
  public VRF ipamVrfsCreate(WritableVRF data) throws ApiException {
    ApiResponse<VRF> localVarResponse = ipamVrfsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VRF&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VRF> ipamVrfsCreateWithHttpInfo(WritableVRF data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsCreate", localVarResponse);
        }
        return new ApiResponse<VRF>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VRF>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsCreateRequestBuilder(WritableVRF data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVrfsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @throws ApiException if fails to make API call
   */
  public void ipamVrfsDelete(Integer id) throws ApiException {
    ipamVrfsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ipamVrfsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVrfsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param rd  (optional)
   * @param enforceUnique  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param importTargetId  (optional)
   * @param importTarget  (optional)
   * @param exportTargetId  (optional)
   * @param exportTarget  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param rdN  (optional)
   * @param rdIc  (optional)
   * @param rdNic  (optional)
   * @param rdIew  (optional)
   * @param rdNiew  (optional)
   * @param rdIsw  (optional)
   * @param rdNisw  (optional)
   * @param rdIe  (optional)
   * @param rdNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param importTargetIdN  (optional)
   * @param importTargetN  (optional)
   * @param exportTargetIdN  (optional)
   * @param exportTargetN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return IpamVrfsList200Response
   * @throws ApiException if fails to make API call
   */
  public IpamVrfsList200Response ipamVrfsList(String id, String name, String rd, String enforceUnique, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<IpamVrfsList200Response> localVarResponse = ipamVrfsListWithHttpInfo(id, name, rd, enforceUnique, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, rdN, rdIc, rdNic, rdIew, rdNiew, rdIsw, rdNisw, rdIe, rdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param rd  (optional)
   * @param enforceUnique  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param importTargetId  (optional)
   * @param importTarget  (optional)
   * @param exportTargetId  (optional)
   * @param exportTarget  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param rdN  (optional)
   * @param rdIc  (optional)
   * @param rdNic  (optional)
   * @param rdIew  (optional)
   * @param rdNiew  (optional)
   * @param rdIsw  (optional)
   * @param rdNisw  (optional)
   * @param rdIe  (optional)
   * @param rdNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param importTargetIdN  (optional)
   * @param importTargetN  (optional)
   * @param exportTargetIdN  (optional)
   * @param exportTargetN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;IpamVrfsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IpamVrfsList200Response> ipamVrfsListWithHttpInfo(String id, String name, String rd, String enforceUnique, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsListRequestBuilder(id, name, rd, enforceUnique, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, rdN, rdIc, rdNic, rdIew, rdNiew, rdIsw, rdNisw, rdIe, rdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsList", localVarResponse);
        }
        return new ApiResponse<IpamVrfsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IpamVrfsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsListRequestBuilder(String id, String name, String rd, String enforceUnique, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd", rd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enforce_unique", enforceUnique));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("import_target_id", importTargetId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("import_target", importTarget));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("export_target_id", exportTargetId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("export_target", exportTarget));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__n", rdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__ic", rdIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__nic", rdNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__iew", rdIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__niew", rdNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__isw", rdIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__nisw", rdNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__ie", rdIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rd__nie", rdNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("import_target_id__n", importTargetIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("import_target__n", importTargetN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("export_target_id__n", exportTargetIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("export_target__n", exportTargetN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @param data  (required)
   * @return VRF
   * @throws ApiException if fails to make API call
   */
  public VRF ipamVrfsPartialUpdate(Integer id, WritableVRF data) throws ApiException {
    ApiResponse<VRF> localVarResponse = ipamVrfsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VRF&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VRF> ipamVrfsPartialUpdateWithHttpInfo(Integer id, WritableVRF data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VRF>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VRF>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsPartialUpdateRequestBuilder(Integer id, WritableVRF data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVrfsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVrfsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @return VRF
   * @throws ApiException if fails to make API call
   */
  public VRF ipamVrfsRead(Integer id) throws ApiException {
    ApiResponse<VRF> localVarResponse = ipamVrfsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @return ApiResponse&lt;VRF&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VRF> ipamVrfsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsRead", localVarResponse);
        }
        return new ApiResponse<VRF>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VRF>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVrfsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @param data  (required)
   * @return VRF
   * @throws ApiException if fails to make API call
   */
  public VRF ipamVrfsUpdate(Integer id, WritableVRF data) throws ApiException {
    ApiResponse<VRF> localVarResponse = ipamVrfsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this VRF. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VRF&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VRF> ipamVrfsUpdateWithHttpInfo(Integer id, WritableVRF data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ipamVrfsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ipamVrfsUpdate", localVarResponse);
        }
        return new ApiResponse<VRF>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VRF>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ipamVrfsUpdateRequestBuilder(Integer id, WritableVRF data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling ipamVrfsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling ipamVrfsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/ipam/vrfs/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
