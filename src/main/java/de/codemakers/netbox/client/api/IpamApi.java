/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.api;

import com.google.gson.reflect.TypeToken;
import de.codemakers.netbox.client.*;
import de.codemakers.netbox.client.model.*;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    
    public IpamApi() {
        this(Configuration.getDefaultApiClient());
    }
    
    public IpamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    
    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public int getHostIndex() {
        return localHostIndex;
    }
    
    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }
    
    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }
    
    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }
    
    /**
     * Build call for ipamAggregatesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamAggregatesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamAggregatesBulkDelete() throws ApiException {
        ipamAggregatesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamAggregatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesBulkPartialUpdateCall(WritableAggregate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesBulkPartialUpdateValidateBeforeCall(WritableAggregate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAggregatesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAggregatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Aggregate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Aggregate ipamAggregatesBulkPartialUpdate(WritableAggregate data) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Aggregate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesBulkPartialUpdateWithHttpInfo(WritableAggregate data) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesBulkPartialUpdateAsync(WritableAggregate data, final ApiCallback<Aggregate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesBulkUpdateCall(WritableAggregate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesBulkUpdateValidateBeforeCall(WritableAggregate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAggregatesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAggregatesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Aggregate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Aggregate ipamAggregatesBulkUpdate(WritableAggregate data) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Aggregate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesBulkUpdateWithHttpInfo(WritableAggregate data) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesBulkUpdateAsync(WritableAggregate data, final ApiCallback<Aggregate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesCreateCall(WritableAggregate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesCreateValidateBeforeCall(WritableAggregate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAggregatesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAggregatesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Aggregate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Aggregate ipamAggregatesCreate(WritableAggregate data) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Aggregate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesCreateWithHttpInfo(WritableAggregate data) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesCreateAsync(WritableAggregate data, final ApiCallback<Aggregate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesDelete
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAggregatesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamAggregatesDelete(Integer id) throws ApiException {
        ipamAggregatesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamAggregatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesList
     *
     * @param id (optional)
     * @param dateAdded (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dateAddedN (optional)
     * @param dateAddedLte (optional)
     * @param dateAddedLt (optional)
     * @param dateAddedGte (optional)
     * @param dateAddedGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesListCall(String id, String dateAdded, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (dateAdded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_added", dateAdded));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (family != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family", family));
        }
        
        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }
        
        if (rirId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir_id", rirId));
        }
        
        if (rir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir", rir));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (dateAddedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_added__n", dateAddedN));
        }
        
        if (dateAddedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_added__lte", dateAddedLte));
        }
        
        if (dateAddedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_added__lt", dateAddedLt));
        }
        
        if (dateAddedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_added__gte", dateAddedGte));
        }
        
        if (dateAddedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_added__gt", dateAddedGt));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (rirIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir_id__n", rirIdN));
        }
        
        if (rirN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir__n", rirN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesListValidateBeforeCall(String id, String dateAdded, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamAggregatesListCall(id, dateAdded, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, rirId, rir, idN, idLte, idLt, idGte, idGt, dateAddedN, dateAddedLte, dateAddedLt, dateAddedGte, dateAddedGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param dateAdded (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dateAddedN (optional)
     * @param dateAddedLte (optional)
     * @param dateAddedLt (optional)
     * @param dateAddedGte (optional)
     * @param dateAddedGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamAggregatesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamAggregatesList200Response ipamAggregatesList(String id, String dateAdded, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamAggregatesList200Response> localVarResp = ipamAggregatesListWithHttpInfo(id, dateAdded, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, rirId, rir, idN, idLte, idLt, idGte, idGt, dateAddedN, dateAddedLte, dateAddedLt, dateAddedGte, dateAddedGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param dateAdded (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dateAddedN (optional)
     * @param dateAddedLte (optional)
     * @param dateAddedLt (optional)
     * @param dateAddedGte (optional)
     * @param dateAddedGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamAggregatesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamAggregatesList200Response> ipamAggregatesListWithHttpInfo(String id, String dateAdded, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesListValidateBeforeCall(id, dateAdded, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, rirId, rir, idN, idLte, idLt, idGte, idGt, dateAddedN, dateAddedLte, dateAddedLt, dateAddedGte, dateAddedGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamAggregatesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param dateAdded (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dateAddedN (optional)
     * @param dateAddedLte (optional)
     * @param dateAddedLt (optional)
     * @param dateAddedGte (optional)
     * @param dateAddedGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesListAsync(String id, String dateAdded, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String rirId, String rir, String idN, String idLte, String idLt, String idGte, String idGt, String dateAddedN, String dateAddedLte, String dateAddedLt, String dateAddedGte, String dateAddedGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamAggregatesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesListValidateBeforeCall(id, dateAdded, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, rirId, rir, idN, idLte, idLt, idGte, idGt, dateAddedN, dateAddedLte, dateAddedLt, dateAddedGte, dateAddedGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamAggregatesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesPartialUpdate
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesPartialUpdateCall(Integer id, WritableAggregate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesPartialUpdateValidateBeforeCall(Integer id, WritableAggregate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAggregatesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAggregatesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     *
     * @return Aggregate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Aggregate ipamAggregatesPartialUpdate(Integer id, WritableAggregate data) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Aggregate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesPartialUpdateWithHttpInfo(Integer id, WritableAggregate data) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesPartialUpdateAsync(Integer id, WritableAggregate data, final ApiCallback<Aggregate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesRead
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAggregatesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     *
     * @return Aggregate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Aggregate ipamAggregatesRead(Integer id) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     *
     * @return ApiResponse&lt;Aggregate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesReadAsync(Integer id, final ApiCallback<Aggregate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAggregatesUpdate
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesUpdateCall(Integer id, WritableAggregate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/aggregates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAggregatesUpdateValidateBeforeCall(Integer id, WritableAggregate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAggregatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAggregatesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAggregatesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     *
     * @return Aggregate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Aggregate ipamAggregatesUpdate(Integer id, WritableAggregate data) throws ApiException {
        ApiResponse<Aggregate> localVarResp = ipamAggregatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Aggregate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Aggregate> ipamAggregatesUpdateWithHttpInfo(Integer id, WritableAggregate data) throws ApiException {
        okhttp3.Call localVarCall = ipamAggregatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this aggregate. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAggregatesUpdateAsync(Integer id, WritableAggregate data, final ApiCallback<Aggregate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAggregatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Aggregate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamAsnsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamAsnsBulkDelete() throws ApiException {
        ipamAsnsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamAsnsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsBulkPartialUpdateCall(WritableASN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsBulkPartialUpdateValidateBeforeCall(WritableASN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAsnsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAsnsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ASN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ASN ipamAsnsBulkPartialUpdate(WritableASN data) throws ApiException {
        ApiResponse<ASN> localVarResp = ipamAsnsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ASN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ASN> ipamAsnsBulkPartialUpdateWithHttpInfo(WritableASN data) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsBulkPartialUpdateAsync(WritableASN data, final ApiCallback<ASN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsBulkUpdateCall(WritableASN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsBulkUpdateValidateBeforeCall(WritableASN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAsnsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAsnsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ASN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ASN ipamAsnsBulkUpdate(WritableASN data) throws ApiException {
        ApiResponse<ASN> localVarResp = ipamAsnsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ASN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ASN> ipamAsnsBulkUpdateWithHttpInfo(WritableASN data) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsBulkUpdateAsync(WritableASN data, final ApiCallback<ASN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsCreateCall(WritableASN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsCreateValidateBeforeCall(WritableASN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAsnsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAsnsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ASN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ASN ipamAsnsCreate(WritableASN data) throws ApiException {
        ApiResponse<ASN> localVarResp = ipamAsnsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ASN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ASN> ipamAsnsCreateWithHttpInfo(WritableASN data) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsCreateAsync(WritableASN data, final ApiCallback<ASN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsDelete
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAsnsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAsnsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamAsnsDelete(Integer id) throws ApiException {
        ipamAsnsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamAsnsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsList
     *
     * @param id (optional)
     * @param asn (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsListCall(String id, String asn, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (rirId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir_id", rirId));
        }
        
        if (rir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir", rir));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (asnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__n", asnN));
        }
        
        if (asnLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lte", asnLte));
        }
        
        if (asnLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lt", asnLt));
        }
        
        if (asnGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gte", asnGte));
        }
        
        if (asnGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gt", asnGt));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (rirIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir_id__n", rirIdN));
        }
        
        if (rirN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rir__n", rirN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsListValidateBeforeCall(String id, String asn, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamAsnsListCall(id, asn, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rirId, rir, siteId, site, idN, idLte, idLt, idGte, idGt, asnN, asnLte, asnLt, asnGte, asnGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, siteIdN, siteN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param asn (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamAsnsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamAsnsList200Response ipamAsnsList(String id, String asn, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamAsnsList200Response> localVarResp = ipamAsnsListWithHttpInfo(id, asn, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rirId, rir, siteId, site, idN, idLte, idLt, idGte, idGt, asnN, asnLte, asnLt, asnGte, asnGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, siteIdN, siteN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param asn (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamAsnsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamAsnsList200Response> ipamAsnsListWithHttpInfo(String id, String asn, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsListValidateBeforeCall(id, asn, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rirId, rir, siteId, site, idN, idLte, idLt, idGte, idGt, asnN, asnLte, asnLt, asnGte, asnGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, siteIdN, siteN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamAsnsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param asn (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param rirId (optional)
     * @param rir (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param rirIdN (optional)
     * @param rirN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsListAsync(String id, String asn, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rirId, String rir, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rirIdN, String rirN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamAsnsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsListValidateBeforeCall(id, asn, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rirId, rir, siteId, site, idN, idLte, idLt, idGte, idGt, asnN, asnLte, asnLt, asnGte, asnGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rirIdN, rirN, siteIdN, siteN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamAsnsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsPartialUpdate
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsPartialUpdateCall(Integer id, WritableASN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsPartialUpdateValidateBeforeCall(Integer id, WritableASN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAsnsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAsnsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAsnsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     *
     * @return ASN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ASN ipamAsnsPartialUpdate(Integer id, WritableASN data) throws ApiException {
        ApiResponse<ASN> localVarResp = ipamAsnsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ASN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ASN> ipamAsnsPartialUpdateWithHttpInfo(Integer id, WritableASN data) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsPartialUpdateAsync(Integer id, WritableASN data, final ApiCallback<ASN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsRead
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAsnsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAsnsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     *
     * @return ASN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ASN ipamAsnsRead(Integer id) throws ApiException {
        ApiResponse<ASN> localVarResp = ipamAsnsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     *
     * @return ApiResponse&lt;ASN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ASN> ipamAsnsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsReadAsync(Integer id, final ApiCallback<ASN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamAsnsUpdate
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsUpdateCall(Integer id, WritableASN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/asns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamAsnsUpdateValidateBeforeCall(Integer id, WritableASN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamAsnsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamAsnsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamAsnsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     *
     * @return ASN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ASN ipamAsnsUpdate(Integer id, WritableASN data) throws ApiException {
        ApiResponse<ASN> localVarResp = ipamAsnsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ASN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ASN> ipamAsnsUpdateWithHttpInfo(Integer id, WritableASN data) throws ApiException {
        okhttp3.Call localVarCall = ipamAsnsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this ASN. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamAsnsUpdateAsync(Integer id, WritableASN data, final ApiCallback<ASN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamAsnsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ASN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamFhrpGroupAssignmentsBulkDelete() throws ApiException {
        ipamFhrpGroupAssignmentsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamFhrpGroupAssignmentsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsBulkPartialUpdateCall(WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsBulkPartialUpdateValidateBeforeCall(WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return FHRPGroupAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroupAssignment ipamFhrpGroupAssignmentsBulkPartialUpdate(WritableFHRPGroupAssignment data) throws ApiException {
        ApiResponse<FHRPGroupAssignment> localVarResp = ipamFhrpGroupAssignmentsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroupAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsBulkPartialUpdateWithHttpInfo(WritableFHRPGroupAssignment data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsBulkPartialUpdateAsync(WritableFHRPGroupAssignment data, final ApiCallback<FHRPGroupAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsBulkUpdateCall(WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsBulkUpdateValidateBeforeCall(WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return FHRPGroupAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroupAssignment ipamFhrpGroupAssignmentsBulkUpdate(WritableFHRPGroupAssignment data) throws ApiException {
        ApiResponse<FHRPGroupAssignment> localVarResp = ipamFhrpGroupAssignmentsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroupAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsBulkUpdateWithHttpInfo(WritableFHRPGroupAssignment data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsBulkUpdateAsync(WritableFHRPGroupAssignment data, final ApiCallback<FHRPGroupAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsCreateCall(WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsCreateValidateBeforeCall(WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return FHRPGroupAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroupAssignment ipamFhrpGroupAssignmentsCreate(WritableFHRPGroupAssignment data) throws ApiException {
        ApiResponse<FHRPGroupAssignment> localVarResp = ipamFhrpGroupAssignmentsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroupAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsCreateWithHttpInfo(WritableFHRPGroupAssignment data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsCreateAsync(WritableFHRPGroupAssignment data, final ApiCallback<FHRPGroupAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsDelete
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamFhrpGroupAssignmentsDelete(Integer id) throws ApiException {
        ipamFhrpGroupAssignmentsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamFhrpGroupAssignmentsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsList
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param interfaceType (optional)
     * @param interfaceId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param interfaceTypeN (optional)
     * @param interfaceIdN (optional)
     * @param interfaceIdLte (optional)
     * @param interfaceIdLt (optional)
     * @param interfaceIdGte (optional)
     * @param interfaceIdGt (optional)
     * @param priorityN (optional)
     * @param priorityLte (optional)
     * @param priorityLt (optional)
     * @param priorityGte (optional)
     * @param priorityGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsListCall(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String lastUpdated, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }
        
        if (interfaceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_type", interfaceType));
        }
        
        if (interfaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id", interfaceId));
        }
        
        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }
        
        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }
        
        if (virtualMachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine", virtualMachine));
        }
        
        if (virtualMachineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id", virtualMachineId));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }
        
        if (interfaceTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_type__n", interfaceTypeN));
        }
        
        if (interfaceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id__n", interfaceIdN));
        }
        
        if (interfaceIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id__lte", interfaceIdLte));
        }
        
        if (interfaceIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id__lt", interfaceIdLt));
        }
        
        if (interfaceIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id__gte", interfaceIdGte));
        }
        
        if (interfaceIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id__gt", interfaceIdGt));
        }
        
        if (priorityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority__n", priorityN));
        }
        
        if (priorityLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority__lte", priorityLte));
        }
        
        if (priorityLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority__lt", priorityLt));
        }
        
        if (priorityGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority__gte", priorityGte));
        }
        
        if (priorityGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority__gt", priorityGt));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsListValidateBeforeCall(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String lastUpdated, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsListCall(id, groupId, interfaceType, interfaceId, priority, created, lastUpdated, device, deviceId, virtualMachine, virtualMachineId, idN, idLte, idLt, idGte, idGt, groupIdN, interfaceTypeN, interfaceIdN, interfaceIdLte, interfaceIdLt, interfaceIdGte, interfaceIdGt, priorityN, priorityLte, priorityLt, priorityGte, priorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param interfaceType (optional)
     * @param interfaceId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param interfaceTypeN (optional)
     * @param interfaceIdN (optional)
     * @param interfaceIdLte (optional)
     * @param interfaceIdLt (optional)
     * @param interfaceIdGte (optional)
     * @param interfaceIdGt (optional)
     * @param priorityN (optional)
     * @param priorityLte (optional)
     * @param priorityLt (optional)
     * @param priorityGte (optional)
     * @param priorityGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamFhrpGroupAssignmentsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamFhrpGroupAssignmentsList200Response ipamFhrpGroupAssignmentsList(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String lastUpdated, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamFhrpGroupAssignmentsList200Response> localVarResp = ipamFhrpGroupAssignmentsListWithHttpInfo(id, groupId, interfaceType, interfaceId, priority, created, lastUpdated, device, deviceId, virtualMachine, virtualMachineId, idN, idLte, idLt, idGte, idGt, groupIdN, interfaceTypeN, interfaceIdN, interfaceIdLte, interfaceIdLt, interfaceIdGte, interfaceIdGt, priorityN, priorityLte, priorityLt, priorityGte, priorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param interfaceType (optional)
     * @param interfaceId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param interfaceTypeN (optional)
     * @param interfaceIdN (optional)
     * @param interfaceIdLte (optional)
     * @param interfaceIdLt (optional)
     * @param interfaceIdGte (optional)
     * @param interfaceIdGt (optional)
     * @param priorityN (optional)
     * @param priorityLte (optional)
     * @param priorityLt (optional)
     * @param priorityGte (optional)
     * @param priorityGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamFhrpGroupAssignmentsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamFhrpGroupAssignmentsList200Response> ipamFhrpGroupAssignmentsListWithHttpInfo(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String lastUpdated, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsListValidateBeforeCall(id, groupId, interfaceType, interfaceId, priority, created, lastUpdated, device, deviceId, virtualMachine, virtualMachineId, idN, idLte, idLt, idGte, idGt, groupIdN, interfaceTypeN, interfaceIdN, interfaceIdLte, interfaceIdLt, interfaceIdGte, interfaceIdGt, priorityN, priorityLte, priorityLt, priorityGte, priorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamFhrpGroupAssignmentsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param interfaceType (optional)
     * @param interfaceId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param interfaceTypeN (optional)
     * @param interfaceIdN (optional)
     * @param interfaceIdLte (optional)
     * @param interfaceIdLt (optional)
     * @param interfaceIdGte (optional)
     * @param interfaceIdGt (optional)
     * @param priorityN (optional)
     * @param priorityLte (optional)
     * @param priorityLt (optional)
     * @param priorityGte (optional)
     * @param priorityGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsListAsync(String id, String groupId, String interfaceType, String interfaceId, String priority, String created, String lastUpdated, String device, String deviceId, String virtualMachine, String virtualMachineId, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String interfaceTypeN, String interfaceIdN, String interfaceIdLte, String interfaceIdLt, String interfaceIdGte, String interfaceIdGt, String priorityN, String priorityLte, String priorityLt, String priorityGte, String priorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset, final ApiCallback<IpamFhrpGroupAssignmentsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsListValidateBeforeCall(id, groupId, interfaceType, interfaceId, priority, created, lastUpdated, device, deviceId, virtualMachine, virtualMachineId, idN, idLte, idLt, idGte, idGt, groupIdN, interfaceTypeN, interfaceIdN, interfaceIdLte, interfaceIdLt, interfaceIdGte, interfaceIdGt, priorityN, priorityLte, priorityLt, priorityGte, priorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamFhrpGroupAssignmentsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsPartialUpdate
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsPartialUpdateCall(Integer id, WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsPartialUpdateValidateBeforeCall(Integer id, WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     *
     * @return FHRPGroupAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroupAssignment ipamFhrpGroupAssignmentsPartialUpdate(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
        ApiResponse<FHRPGroupAssignment> localVarResp = ipamFhrpGroupAssignmentsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroupAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsPartialUpdateWithHttpInfo(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsPartialUpdateAsync(Integer id, WritableFHRPGroupAssignment data, final ApiCallback<FHRPGroupAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsRead
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     *
     * @return FHRPGroupAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroupAssignment ipamFhrpGroupAssignmentsRead(Integer id) throws ApiException {
        ApiResponse<FHRPGroupAssignment> localVarResp = ipamFhrpGroupAssignmentsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     *
     * @return ApiResponse&lt;FHRPGroupAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsReadAsync(Integer id, final ApiCallback<FHRPGroupAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupAssignmentsUpdate
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsUpdateCall(Integer id, WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-group-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupAssignmentsUpdateValidateBeforeCall(Integer id, WritableFHRPGroupAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupAssignmentsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     *
     * @return FHRPGroupAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroupAssignment ipamFhrpGroupAssignmentsUpdate(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
        ApiResponse<FHRPGroupAssignment> localVarResp = ipamFhrpGroupAssignmentsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroupAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroupAssignment> ipamFhrpGroupAssignmentsUpdateWithHttpInfo(Integer id, WritableFHRPGroupAssignment data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group assignment. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupAssignmentsUpdateAsync(Integer id, WritableFHRPGroupAssignment data, final ApiCallback<FHRPGroupAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupAssignmentsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroupAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamFhrpGroupsBulkDelete() throws ApiException {
        ipamFhrpGroupsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamFhrpGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsBulkPartialUpdateCall(FHRPGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsBulkPartialUpdateValidateBeforeCall(FHRPGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return FHRPGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroup ipamFhrpGroupsBulkPartialUpdate(FHRPGroup data) throws ApiException {
        ApiResponse<FHRPGroup> localVarResp = ipamFhrpGroupsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroup> ipamFhrpGroupsBulkPartialUpdateWithHttpInfo(FHRPGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsBulkPartialUpdateAsync(FHRPGroup data, final ApiCallback<FHRPGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsBulkUpdateCall(FHRPGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsBulkUpdateValidateBeforeCall(FHRPGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return FHRPGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroup ipamFhrpGroupsBulkUpdate(FHRPGroup data) throws ApiException {
        ApiResponse<FHRPGroup> localVarResp = ipamFhrpGroupsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroup> ipamFhrpGroupsBulkUpdateWithHttpInfo(FHRPGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsBulkUpdateAsync(FHRPGroup data, final ApiCallback<FHRPGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsCreateCall(FHRPGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsCreateValidateBeforeCall(FHRPGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return FHRPGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroup ipamFhrpGroupsCreate(FHRPGroup data) throws ApiException {
        ApiResponse<FHRPGroup> localVarResp = ipamFhrpGroupsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroup> ipamFhrpGroupsCreateWithHttpInfo(FHRPGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsCreateAsync(FHRPGroup data, final ApiCallback<FHRPGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsDelete
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamFhrpGroupsDelete(Integer id) throws ApiException {
        ipamFhrpGroupsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamFhrpGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsList
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param authKey (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param protocol (optional)
     * @param authType (optional)
     * @param relatedIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param groupIdLte (optional)
     * @param groupIdLt (optional)
     * @param groupIdGte (optional)
     * @param groupIdGt (optional)
     * @param authKeyN (optional)
     * @param authKeyIc (optional)
     * @param authKeyNic (optional)
     * @param authKeyIew (optional)
     * @param authKeyNiew (optional)
     * @param authKeyIsw (optional)
     * @param authKeyNisw (optional)
     * @param authKeyIe (optional)
     * @param authKeyNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param protocolN (optional)
     * @param authTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsListCall(String id, String groupId, String authKey, String created, String lastUpdated, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String protocolN, String authTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }
        
        if (authKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key", authKey));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol", protocol));
        }
        
        if (authType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_type", authType));
        }
        
        if (relatedIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("related_ip", relatedIp));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }
        
        if (groupIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__lte", groupIdLte));
        }
        
        if (groupIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__lt", groupIdLt));
        }
        
        if (groupIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__gte", groupIdGte));
        }
        
        if (groupIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__gt", groupIdGt));
        }
        
        if (authKeyN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__n", authKeyN));
        }
        
        if (authKeyIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__ic", authKeyIc));
        }
        
        if (authKeyNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__nic", authKeyNic));
        }
        
        if (authKeyIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__iew", authKeyIew));
        }
        
        if (authKeyNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__niew", authKeyNiew));
        }
        
        if (authKeyIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__isw", authKeyIsw));
        }
        
        if (authKeyNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__nisw", authKeyNisw));
        }
        
        if (authKeyIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__ie", authKeyIe));
        }
        
        if (authKeyNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key__nie", authKeyNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (protocolN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol__n", protocolN));
        }
        
        if (authTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_type__n", authTypeN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsListValidateBeforeCall(String id, String groupId, String authKey, String created, String lastUpdated, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String protocolN, String authTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsListCall(id, groupId, authKey, created, lastUpdated, q, tag, protocol, authType, relatedIp, idN, idLte, idLt, idGte, idGt, groupIdN, groupIdLte, groupIdLt, groupIdGte, groupIdGt, authKeyN, authKeyIc, authKeyNic, authKeyIew, authKeyNiew, authKeyIsw, authKeyNisw, authKeyIe, authKeyNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, protocolN, authTypeN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param authKey (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param protocol (optional)
     * @param authType (optional)
     * @param relatedIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param groupIdLte (optional)
     * @param groupIdLt (optional)
     * @param groupIdGte (optional)
     * @param groupIdGt (optional)
     * @param authKeyN (optional)
     * @param authKeyIc (optional)
     * @param authKeyNic (optional)
     * @param authKeyIew (optional)
     * @param authKeyNiew (optional)
     * @param authKeyIsw (optional)
     * @param authKeyNisw (optional)
     * @param authKeyIe (optional)
     * @param authKeyNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param protocolN (optional)
     * @param authTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamFhrpGroupsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamFhrpGroupsList200Response ipamFhrpGroupsList(String id, String groupId, String authKey, String created, String lastUpdated, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String protocolN, String authTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamFhrpGroupsList200Response> localVarResp = ipamFhrpGroupsListWithHttpInfo(id, groupId, authKey, created, lastUpdated, q, tag, protocol, authType, relatedIp, idN, idLte, idLt, idGte, idGt, groupIdN, groupIdLte, groupIdLt, groupIdGte, groupIdGt, authKeyN, authKeyIc, authKeyNic, authKeyIew, authKeyNiew, authKeyIsw, authKeyNisw, authKeyIe, authKeyNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, protocolN, authTypeN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param authKey (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param protocol (optional)
     * @param authType (optional)
     * @param relatedIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param groupIdLte (optional)
     * @param groupIdLt (optional)
     * @param groupIdGte (optional)
     * @param groupIdGt (optional)
     * @param authKeyN (optional)
     * @param authKeyIc (optional)
     * @param authKeyNic (optional)
     * @param authKeyIew (optional)
     * @param authKeyNiew (optional)
     * @param authKeyIsw (optional)
     * @param authKeyNisw (optional)
     * @param authKeyIe (optional)
     * @param authKeyNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param protocolN (optional)
     * @param authTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamFhrpGroupsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamFhrpGroupsList200Response> ipamFhrpGroupsListWithHttpInfo(String id, String groupId, String authKey, String created, String lastUpdated, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String protocolN, String authTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsListValidateBeforeCall(id, groupId, authKey, created, lastUpdated, q, tag, protocol, authType, relatedIp, idN, idLte, idLt, idGte, idGt, groupIdN, groupIdLte, groupIdLt, groupIdGte, groupIdGt, authKeyN, authKeyIc, authKeyNic, authKeyIew, authKeyNiew, authKeyIsw, authKeyNisw, authKeyIe, authKeyNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, protocolN, authTypeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamFhrpGroupsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param groupId (optional)
     * @param authKey (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param protocol (optional)
     * @param authType (optional)
     * @param relatedIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param groupIdN (optional)
     * @param groupIdLte (optional)
     * @param groupIdLt (optional)
     * @param groupIdGte (optional)
     * @param groupIdGt (optional)
     * @param authKeyN (optional)
     * @param authKeyIc (optional)
     * @param authKeyNic (optional)
     * @param authKeyIew (optional)
     * @param authKeyNiew (optional)
     * @param authKeyIsw (optional)
     * @param authKeyNisw (optional)
     * @param authKeyIe (optional)
     * @param authKeyNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param protocolN (optional)
     * @param authTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsListAsync(String id, String groupId, String authKey, String created, String lastUpdated, String q, String tag, String protocol, String authType, String relatedIp, String idN, String idLte, String idLt, String idGte, String idGt, String groupIdN, String groupIdLte, String groupIdLt, String groupIdGte, String groupIdGt, String authKeyN, String authKeyIc, String authKeyNic, String authKeyIew, String authKeyNiew, String authKeyIsw, String authKeyNisw, String authKeyIe, String authKeyNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String protocolN, String authTypeN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamFhrpGroupsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsListValidateBeforeCall(id, groupId, authKey, created, lastUpdated, q, tag, protocol, authType, relatedIp, idN, idLte, idLt, idGte, idGt, groupIdN, groupIdLte, groupIdLt, groupIdGte, groupIdGt, authKeyN, authKeyIc, authKeyNic, authKeyIew, authKeyNiew, authKeyIsw, authKeyNisw, authKeyIe, authKeyNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, protocolN, authTypeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamFhrpGroupsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsPartialUpdate
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsPartialUpdateCall(Integer id, FHRPGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsPartialUpdateValidateBeforeCall(Integer id, FHRPGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     *
     * @return FHRPGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroup ipamFhrpGroupsPartialUpdate(Integer id, FHRPGroup data) throws ApiException {
        ApiResponse<FHRPGroup> localVarResp = ipamFhrpGroupsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroup> ipamFhrpGroupsPartialUpdateWithHttpInfo(Integer id, FHRPGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsPartialUpdateAsync(Integer id, FHRPGroup data, final ApiCallback<FHRPGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsRead
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     *
     * @return FHRPGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroup ipamFhrpGroupsRead(Integer id) throws ApiException {
        ApiResponse<FHRPGroup> localVarResp = ipamFhrpGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     *
     * @return ApiResponse&lt;FHRPGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroup> ipamFhrpGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsReadAsync(Integer id, final ApiCallback<FHRPGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamFhrpGroupsUpdate
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsUpdateCall(Integer id, FHRPGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/fhrp-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamFhrpGroupsUpdateValidateBeforeCall(Integer id, FHRPGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamFhrpGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamFhrpGroupsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamFhrpGroupsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     *
     * @return FHRPGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public FHRPGroup ipamFhrpGroupsUpdate(Integer id, FHRPGroup data) throws ApiException {
        ApiResponse<FHRPGroup> localVarResp = ipamFhrpGroupsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;FHRPGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<FHRPGroup> ipamFhrpGroupsUpdateWithHttpInfo(Integer id, FHRPGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamFhrpGroupsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this FHRP group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamFhrpGroupsUpdateAsync(Integer id, FHRPGroup data, final ApiCallback<FHRPGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamFhrpGroupsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FHRPGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamIpAddressesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamIpAddressesBulkDelete() throws ApiException {
        ipamIpAddressesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamIpAddressesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesBulkPartialUpdateCall(WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesBulkPartialUpdateValidateBeforeCall(WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpAddressesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpAddressesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return IPAddress
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPAddress ipamIpAddressesBulkPartialUpdate(WritableIPAddress data) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesBulkPartialUpdateWithHttpInfo(WritableIPAddress data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesBulkPartialUpdateAsync(WritableIPAddress data, final ApiCallback<IPAddress> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesBulkUpdateCall(WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesBulkUpdateValidateBeforeCall(WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpAddressesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpAddressesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return IPAddress
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPAddress ipamIpAddressesBulkUpdate(WritableIPAddress data) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesBulkUpdateWithHttpInfo(WritableIPAddress data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesBulkUpdateAsync(WritableIPAddress data, final ApiCallback<IPAddress> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesCreateCall(WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesCreateValidateBeforeCall(WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpAddressesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpAddressesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return IPAddress
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPAddress ipamIpAddressesCreate(WritableIPAddress data) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesCreateWithHttpInfo(WritableIPAddress data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesCreateAsync(WritableIPAddress data, final ApiCallback<IPAddress> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesDelete
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpAddressesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamIpAddressesDelete(Integer id) throws ApiException {
        ipamIpAddressesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamIpAddressesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesList
     *
     * @param id (optional)
     * @param dnsName (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param parent (optional)
     * @param address (optional)
     * @param maskLength (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param fhrpgroupId (optional)
     * @param assignedToInterface (optional)
     * @param status (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dnsNameN (optional)
     * @param dnsNameIc (optional)
     * @param dnsNameNic (optional)
     * @param dnsNameIew (optional)
     * @param dnsNameNiew (optional)
     * @param dnsNameIsw (optional)
     * @param dnsNameNisw (optional)
     * @param dnsNameIe (optional)
     * @param dnsNameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param fhrpgroupIdN (optional)
     * @param statusN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesListCall(String id, String dnsName, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (dnsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name", dnsName));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (family != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family", family));
        }
        
        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }
        
        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }
        
        if (maskLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mask_length", maskLength));
        }
        
        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }
        
        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }
        
        if (presentInVrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("present_in_vrf_id", presentInVrfId));
        }
        
        if (presentInVrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("present_in_vrf", presentInVrf));
        }
        
        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }
        
        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }
        
        if (virtualMachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine", virtualMachine));
        }
        
        if (virtualMachineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id", virtualMachineId));
        }
        
        if (_interface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface", _interface));
        }
        
        if (interfaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id", interfaceId));
        }
        
        if (vminterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface", vminterface));
        }
        
        if (vminterfaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface_id", vminterfaceId));
        }
        
        if (fhrpgroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fhrpgroup_id", fhrpgroupId));
        }
        
        if (assignedToInterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_to_interface", assignedToInterface));
        }
        
        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }
        
        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (dnsNameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__n", dnsNameN));
        }
        
        if (dnsNameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__ic", dnsNameIc));
        }
        
        if (dnsNameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__nic", dnsNameNic));
        }
        
        if (dnsNameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__iew", dnsNameIew));
        }
        
        if (dnsNameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__niew", dnsNameNiew));
        }
        
        if (dnsNameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__isw", dnsNameIsw));
        }
        
        if (dnsNameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__nisw", dnsNameNisw));
        }
        
        if (dnsNameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__ie", dnsNameIe));
        }
        
        if (dnsNameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dns_name__nie", dnsNameNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (vrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id__n", vrfIdN));
        }
        
        if (vrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf__n", vrfN));
        }
        
        if (interfaceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface__n", interfaceN));
        }
        
        if (interfaceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id__n", interfaceIdN));
        }
        
        if (vminterfaceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface__n", vminterfaceN));
        }
        
        if (vminterfaceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface_id__n", vminterfaceIdN));
        }
        
        if (fhrpgroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fhrpgroup_id__n", fhrpgroupIdN));
        }
        
        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }
        
        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesListValidateBeforeCall(String id, String dnsName, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamIpAddressesListCall(id, dnsName, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, parent, address, maskLength, vrfId, vrf, presentInVrfId, presentInVrf, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, fhrpgroupId, assignedToInterface, status, role, idN, idLte, idLt, idGte, idGt, dnsNameN, dnsNameIc, dnsNameNic, dnsNameIew, dnsNameNiew, dnsNameIsw, dnsNameNisw, dnsNameIe, dnsNameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, vrfIdN, vrfN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, fhrpgroupIdN, statusN, roleN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param dnsName (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param parent (optional)
     * @param address (optional)
     * @param maskLength (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param fhrpgroupId (optional)
     * @param assignedToInterface (optional)
     * @param status (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dnsNameN (optional)
     * @param dnsNameIc (optional)
     * @param dnsNameNic (optional)
     * @param dnsNameIew (optional)
     * @param dnsNameNiew (optional)
     * @param dnsNameIsw (optional)
     * @param dnsNameNisw (optional)
     * @param dnsNameIe (optional)
     * @param dnsNameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param fhrpgroupIdN (optional)
     * @param statusN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamIpAddressesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamIpAddressesList200Response ipamIpAddressesList(String id, String dnsName, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamIpAddressesList200Response> localVarResp = ipamIpAddressesListWithHttpInfo(id, dnsName, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, parent, address, maskLength, vrfId, vrf, presentInVrfId, presentInVrf, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, fhrpgroupId, assignedToInterface, status, role, idN, idLte, idLt, idGte, idGt, dnsNameN, dnsNameIc, dnsNameNic, dnsNameIew, dnsNameNiew, dnsNameIsw, dnsNameNisw, dnsNameIe, dnsNameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, vrfIdN, vrfN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, fhrpgroupIdN, statusN, roleN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param dnsName (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param parent (optional)
     * @param address (optional)
     * @param maskLength (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param fhrpgroupId (optional)
     * @param assignedToInterface (optional)
     * @param status (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dnsNameN (optional)
     * @param dnsNameIc (optional)
     * @param dnsNameNic (optional)
     * @param dnsNameIew (optional)
     * @param dnsNameNiew (optional)
     * @param dnsNameIsw (optional)
     * @param dnsNameNisw (optional)
     * @param dnsNameIe (optional)
     * @param dnsNameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param fhrpgroupIdN (optional)
     * @param statusN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamIpAddressesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamIpAddressesList200Response> ipamIpAddressesListWithHttpInfo(String id, String dnsName, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesListValidateBeforeCall(id, dnsName, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, parent, address, maskLength, vrfId, vrf, presentInVrfId, presentInVrf, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, fhrpgroupId, assignedToInterface, status, role, idN, idLte, idLt, idGte, idGt, dnsNameN, dnsNameIc, dnsNameNic, dnsNameIew, dnsNameNiew, dnsNameIsw, dnsNameNisw, dnsNameIe, dnsNameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, vrfIdN, vrfN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, fhrpgroupIdN, statusN, roleN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamIpAddressesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param dnsName (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param parent (optional)
     * @param address (optional)
     * @param maskLength (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param fhrpgroupId (optional)
     * @param assignedToInterface (optional)
     * @param status (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param dnsNameN (optional)
     * @param dnsNameIc (optional)
     * @param dnsNameNic (optional)
     * @param dnsNameIew (optional)
     * @param dnsNameNiew (optional)
     * @param dnsNameIsw (optional)
     * @param dnsNameNisw (optional)
     * @param dnsNameIe (optional)
     * @param dnsNameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param fhrpgroupIdN (optional)
     * @param statusN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesListAsync(String id, String dnsName, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String parent, String address, BigDecimal maskLength, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String fhrpgroupId, String assignedToInterface, String status, String role, String idN, String idLte, String idLt, String idGte, String idGt, String dnsNameN, String dnsNameIc, String dnsNameNic, String dnsNameIew, String dnsNameNiew, String dnsNameIsw, String dnsNameNisw, String dnsNameIe, String dnsNameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String vrfIdN, String vrfN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String fhrpgroupIdN, String statusN, String roleN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamIpAddressesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesListValidateBeforeCall(id, dnsName, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, parent, address, maskLength, vrfId, vrf, presentInVrfId, presentInVrf, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, fhrpgroupId, assignedToInterface, status, role, idN, idLte, idLt, idGte, idGt, dnsNameN, dnsNameIc, dnsNameNic, dnsNameIew, dnsNameNiew, dnsNameIsw, dnsNameNisw, dnsNameIe, dnsNameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, vrfIdN, vrfN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, fhrpgroupIdN, statusN, roleN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamIpAddressesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesPartialUpdate
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesPartialUpdateCall(Integer id, WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesPartialUpdateValidateBeforeCall(Integer id, WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpAddressesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpAddressesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return IPAddress
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPAddress ipamIpAddressesPartialUpdate(Integer id, WritableIPAddress data) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesPartialUpdateWithHttpInfo(Integer id, WritableIPAddress data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesPartialUpdateAsync(Integer id, WritableIPAddress data, final ApiCallback<IPAddress> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesRead
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpAddressesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @return IPAddress
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPAddress ipamIpAddressesRead(Integer id) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @return ApiResponse&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesReadAsync(Integer id, final ApiCallback<IPAddress> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpAddressesUpdate
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesUpdateCall(Integer id, WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-addresses/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpAddressesUpdateValidateBeforeCall(Integer id, WritableIPAddress data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpAddressesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpAddressesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpAddressesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return IPAddress
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPAddress ipamIpAddressesUpdate(Integer id, WritableIPAddress data) throws ApiException {
        ApiResponse<IPAddress> localVarResp = ipamIpAddressesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPAddress> ipamIpAddressesUpdateWithHttpInfo(Integer id, WritableIPAddress data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpAddressesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpAddressesUpdateAsync(Integer id, WritableIPAddress data, final ApiCallback<IPAddress> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpAddressesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<IPAddress>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesAvailableIpsCreate
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesAvailableIpsCreateCall(Integer id, WritableAvailableIP data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/{id}/available-ips/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesAvailableIpsCreateValidateBeforeCall(Integer id, WritableAvailableIP data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpRangesAvailableIpsCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpRangesAvailableIpsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesAvailableIpsCreateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return List&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<IPAddress> ipamIpRangesAvailableIpsCreate(Integer id, WritableAvailableIP data) throws ApiException {
        ApiResponse<List<IPAddress>> localVarResp = ipamIpRangesAvailableIpsCreateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;List&lt;IPAddress&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<IPAddress>> ipamIpRangesAvailableIpsCreateWithHttpInfo(Integer id, WritableAvailableIP data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesAvailableIpsCreateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<List<IPAddress>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesAvailableIpsCreateAsync(Integer id, WritableAvailableIP data, final ApiCallback<List<IPAddress>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesAvailableIpsCreateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<List<IPAddress>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesAvailableIpsList
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesAvailableIpsListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/{id}/available-ips/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesAvailableIpsListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpRangesAvailableIpsList(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesAvailableIpsListCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @return List&lt;AvailableIP&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<AvailableIP> ipamIpRangesAvailableIpsList(Integer id) throws ApiException {
        ApiResponse<List<AvailableIP>> localVarResp = ipamIpRangesAvailableIpsListWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @return ApiResponse&lt;List&lt;AvailableIP&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<AvailableIP>> ipamIpRangesAvailableIpsListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesAvailableIpsListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<AvailableIP>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesAvailableIpsListAsync(Integer id, final ApiCallback<List<AvailableIP>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesAvailableIpsListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<AvailableIP>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamIpRangesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamIpRangesBulkDelete() throws ApiException {
        ipamIpRangesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamIpRangesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesBulkPartialUpdateCall(WritableIPRange data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesBulkPartialUpdateValidateBeforeCall(WritableIPRange data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpRangesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return IPRange
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPRange ipamIpRangesBulkPartialUpdate(WritableIPRange data) throws ApiException {
        ApiResponse<IPRange> localVarResp = ipamIpRangesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;IPRange&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPRange> ipamIpRangesBulkPartialUpdateWithHttpInfo(WritableIPRange data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesBulkPartialUpdateAsync(WritableIPRange data, final ApiCallback<IPRange> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesBulkUpdateCall(WritableIPRange data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesBulkUpdateValidateBeforeCall(WritableIPRange data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpRangesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return IPRange
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPRange ipamIpRangesBulkUpdate(WritableIPRange data) throws ApiException {
        ApiResponse<IPRange> localVarResp = ipamIpRangesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;IPRange&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPRange> ipamIpRangesBulkUpdateWithHttpInfo(WritableIPRange data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesBulkUpdateAsync(WritableIPRange data, final ApiCallback<IPRange> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesCreateCall(WritableIPRange data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesCreateValidateBeforeCall(WritableIPRange data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpRangesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return IPRange
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPRange ipamIpRangesCreate(WritableIPRange data) throws ApiException {
        ApiResponse<IPRange> localVarResp = ipamIpRangesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;IPRange&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPRange> ipamIpRangesCreateWithHttpInfo(WritableIPRange data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesCreateAsync(WritableIPRange data, final ApiCallback<IPRange> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesDelete
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpRangesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamIpRangesDelete(Integer id) throws ApiException {
        ipamIpRangesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamIpRangesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesList
     *
     * @param id (optional)
     * @param description (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param family (optional)
     * @param contains (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesListCall(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (family != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family", family));
        }
        
        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }
        
        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }
        
        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }
        
        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }
        
        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }
        
        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (vrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id__n", vrfIdN));
        }
        
        if (vrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf__n", vrfN));
        }
        
        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }
        
        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }
        
        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesListValidateBeforeCall(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamIpRangesListCall(id, description, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, family, contains, vrfId, vrf, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, vrfIdN, vrfN, roleIdN, roleN, statusN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param description (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param family (optional)
     * @param contains (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamIpRangesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamIpRangesList200Response ipamIpRangesList(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamIpRangesList200Response> localVarResp = ipamIpRangesListWithHttpInfo(id, description, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, family, contains, vrfId, vrf, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, vrfIdN, vrfN, roleIdN, roleN, statusN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param description (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param family (optional)
     * @param contains (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamIpRangesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamIpRangesList200Response> ipamIpRangesListWithHttpInfo(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesListValidateBeforeCall(id, description, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, family, contains, vrfId, vrf, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, vrfIdN, vrfN, roleIdN, roleN, statusN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamIpRangesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param description (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param family (optional)
     * @param contains (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesListAsync(String id, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, BigDecimal family, String contains, String vrfId, String vrf, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String vrfIdN, String vrfN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamIpRangesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesListValidateBeforeCall(id, description, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, family, contains, vrfId, vrf, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, vrfIdN, vrfN, roleIdN, roleN, statusN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamIpRangesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesPartialUpdate
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesPartialUpdateCall(Integer id, WritableIPRange data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesPartialUpdateValidateBeforeCall(Integer id, WritableIPRange data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpRangesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpRangesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     *
     * @return IPRange
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPRange ipamIpRangesPartialUpdate(Integer id, WritableIPRange data) throws ApiException {
        ApiResponse<IPRange> localVarResp = ipamIpRangesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;IPRange&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPRange> ipamIpRangesPartialUpdateWithHttpInfo(Integer id, WritableIPRange data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesPartialUpdateAsync(Integer id, WritableIPRange data, final ApiCallback<IPRange> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesRead
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpRangesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     *
     * @return IPRange
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPRange ipamIpRangesRead(Integer id) throws ApiException {
        ApiResponse<IPRange> localVarResp = ipamIpRangesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     *
     * @return ApiResponse&lt;IPRange&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPRange> ipamIpRangesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesReadAsync(Integer id, final ApiCallback<IPRange> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamIpRangesUpdate
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesUpdateCall(Integer id, WritableIPRange data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/ip-ranges/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamIpRangesUpdateValidateBeforeCall(Integer id, WritableIPRange data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamIpRangesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamIpRangesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamIpRangesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     *
     * @return IPRange
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IPRange ipamIpRangesUpdate(Integer id, WritableIPRange data) throws ApiException {
        ApiResponse<IPRange> localVarResp = ipamIpRangesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;IPRange&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IPRange> ipamIpRangesUpdateWithHttpInfo(Integer id, WritableIPRange data) throws ApiException {
        okhttp3.Call localVarCall = ipamIpRangesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP range. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamIpRangesUpdateAsync(Integer id, WritableIPRange data, final ApiCallback<IPRange> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamIpRangesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<IPRange>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamL2vpnTerminationsBulkDelete() throws ApiException {
        ipamL2vpnTerminationsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamL2vpnTerminationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsBulkPartialUpdateCall(WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsBulkPartialUpdateValidateBeforeCall(WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnTerminationsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return L2VPNTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPNTermination ipamL2vpnTerminationsBulkPartialUpdate(WritableL2VPNTermination data) throws ApiException {
        ApiResponse<L2VPNTermination> localVarResp = ipamL2vpnTerminationsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPNTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPNTermination> ipamL2vpnTerminationsBulkPartialUpdateWithHttpInfo(WritableL2VPNTermination data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsBulkPartialUpdateAsync(WritableL2VPNTermination data, final ApiCallback<L2VPNTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsBulkUpdateCall(WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsBulkUpdateValidateBeforeCall(WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnTerminationsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return L2VPNTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPNTermination ipamL2vpnTerminationsBulkUpdate(WritableL2VPNTermination data) throws ApiException {
        ApiResponse<L2VPNTermination> localVarResp = ipamL2vpnTerminationsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPNTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPNTermination> ipamL2vpnTerminationsBulkUpdateWithHttpInfo(WritableL2VPNTermination data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsBulkUpdateAsync(WritableL2VPNTermination data, final ApiCallback<L2VPNTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsCreateCall(WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsCreateValidateBeforeCall(WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnTerminationsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return L2VPNTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPNTermination ipamL2vpnTerminationsCreate(WritableL2VPNTermination data) throws ApiException {
        ApiResponse<L2VPNTermination> localVarResp = ipamL2vpnTerminationsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPNTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPNTermination> ipamL2vpnTerminationsCreateWithHttpInfo(WritableL2VPNTermination data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsCreateAsync(WritableL2VPNTermination data, final ApiCallback<L2VPNTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsDelete
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnTerminationsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamL2vpnTerminationsDelete(Integer id) throws ApiException {
        ipamL2vpnTerminationsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamL2vpnTerminationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsList
     *
     * @param id (optional)
     * @param assignedObjectTypeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param l2vpnId (optional)
     * @param l2vpn (optional)
     * @param region (optional)
     * @param regionId (optional)
     * @param site (optional)
     * @param siteId (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param vlan (optional)
     * @param vlanVid (optional)
     * @param vlanId (optional)
     * @param assignedObjectType (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param assignedObjectTypeIdN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param l2vpnIdN (optional)
     * @param l2vpnN (optional)
     * @param deviceN (optional)
     * @param deviceIdN (optional)
     * @param virtualMachineN (optional)
     * @param virtualMachineIdN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param vlanN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param vlanIdN (optional)
     * @param assignedObjectTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsListCall(String id, String assignedObjectTypeId, String created, String lastUpdated, String q, String tag, String l2vpnId, String l2vpn, String region, String regionId, String site, String siteId, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String vlan, BigDecimal vlanVid, String vlanId, String assignedObjectType, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String l2vpnIdN, String l2vpnN, String deviceN, String deviceIdN, String virtualMachineN, String virtualMachineIdN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String vlanN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String vlanIdN, String assignedObjectTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (assignedObjectTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type_id", assignedObjectTypeId));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (l2vpnId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn_id", l2vpnId));
        }
        
        if (l2vpn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn", l2vpn));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }
        
        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }
        
        if (virtualMachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine", virtualMachine));
        }
        
        if (virtualMachineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id", virtualMachineId));
        }
        
        if (_interface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface", _interface));
        }
        
        if (interfaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id", interfaceId));
        }
        
        if (vminterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface", vminterface));
        }
        
        if (vminterfaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface_id", vminterfaceId));
        }
        
        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }
        
        if (vlanVid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid", vlanVid));
        }
        
        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }
        
        if (assignedObjectType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type", assignedObjectType));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (assignedObjectTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type_id__n", assignedObjectTypeIdN));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (l2vpnIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn_id__n", l2vpnIdN));
        }
        
        if (l2vpnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn__n", l2vpnN));
        }
        
        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }
        
        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }
        
        if (virtualMachineN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine__n", virtualMachineN));
        }
        
        if (virtualMachineIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id__n", virtualMachineIdN));
        }
        
        if (interfaceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface__n", interfaceN));
        }
        
        if (interfaceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_id__n", interfaceIdN));
        }
        
        if (vminterfaceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface__n", vminterfaceN));
        }
        
        if (vminterfaceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vminterface_id__n", vminterfaceIdN));
        }
        
        if (vlanN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan__n", vlanN));
        }
        
        if (vlanVidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__n", vlanVidN));
        }
        
        if (vlanVidLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__lte", vlanVidLte));
        }
        
        if (vlanVidLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__lt", vlanVidLt));
        }
        
        if (vlanVidGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__gte", vlanVidGte));
        }
        
        if (vlanVidGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__gt", vlanVidGt));
        }
        
        if (vlanIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id__n", vlanIdN));
        }
        
        if (assignedObjectTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type__n", assignedObjectTypeN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsListValidateBeforeCall(String id, String assignedObjectTypeId, String created, String lastUpdated, String q, String tag, String l2vpnId, String l2vpn, String region, String regionId, String site, String siteId, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String vlan, BigDecimal vlanVid, String vlanId, String assignedObjectType, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String l2vpnIdN, String l2vpnN, String deviceN, String deviceIdN, String virtualMachineN, String virtualMachineIdN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String vlanN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String vlanIdN, String assignedObjectTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsListCall(id, assignedObjectTypeId, created, lastUpdated, q, tag, l2vpnId, l2vpn, region, regionId, site, siteId, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, vlan, vlanVid, vlanId, assignedObjectType, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, l2vpnIdN, l2vpnN, deviceN, deviceIdN, virtualMachineN, virtualMachineIdN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, vlanN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, vlanIdN, assignedObjectTypeN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param assignedObjectTypeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param l2vpnId (optional)
     * @param l2vpn (optional)
     * @param region (optional)
     * @param regionId (optional)
     * @param site (optional)
     * @param siteId (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param vlan (optional)
     * @param vlanVid (optional)
     * @param vlanId (optional)
     * @param assignedObjectType (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param assignedObjectTypeIdN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param l2vpnIdN (optional)
     * @param l2vpnN (optional)
     * @param deviceN (optional)
     * @param deviceIdN (optional)
     * @param virtualMachineN (optional)
     * @param virtualMachineIdN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param vlanN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param vlanIdN (optional)
     * @param assignedObjectTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamL2vpnTerminationsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamL2vpnTerminationsList200Response ipamL2vpnTerminationsList(String id, String assignedObjectTypeId, String created, String lastUpdated, String q, String tag, String l2vpnId, String l2vpn, String region, String regionId, String site, String siteId, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String vlan, BigDecimal vlanVid, String vlanId, String assignedObjectType, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String l2vpnIdN, String l2vpnN, String deviceN, String deviceIdN, String virtualMachineN, String virtualMachineIdN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String vlanN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String vlanIdN, String assignedObjectTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamL2vpnTerminationsList200Response> localVarResp = ipamL2vpnTerminationsListWithHttpInfo(id, assignedObjectTypeId, created, lastUpdated, q, tag, l2vpnId, l2vpn, region, regionId, site, siteId, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, vlan, vlanVid, vlanId, assignedObjectType, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, l2vpnIdN, l2vpnN, deviceN, deviceIdN, virtualMachineN, virtualMachineIdN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, vlanN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, vlanIdN, assignedObjectTypeN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param assignedObjectTypeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param l2vpnId (optional)
     * @param l2vpn (optional)
     * @param region (optional)
     * @param regionId (optional)
     * @param site (optional)
     * @param siteId (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param vlan (optional)
     * @param vlanVid (optional)
     * @param vlanId (optional)
     * @param assignedObjectType (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param assignedObjectTypeIdN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param l2vpnIdN (optional)
     * @param l2vpnN (optional)
     * @param deviceN (optional)
     * @param deviceIdN (optional)
     * @param virtualMachineN (optional)
     * @param virtualMachineIdN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param vlanN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param vlanIdN (optional)
     * @param assignedObjectTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamL2vpnTerminationsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamL2vpnTerminationsList200Response> ipamL2vpnTerminationsListWithHttpInfo(String id, String assignedObjectTypeId, String created, String lastUpdated, String q, String tag, String l2vpnId, String l2vpn, String region, String regionId, String site, String siteId, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String vlan, BigDecimal vlanVid, String vlanId, String assignedObjectType, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String l2vpnIdN, String l2vpnN, String deviceN, String deviceIdN, String virtualMachineN, String virtualMachineIdN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String vlanN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String vlanIdN, String assignedObjectTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsListValidateBeforeCall(id, assignedObjectTypeId, created, lastUpdated, q, tag, l2vpnId, l2vpn, region, regionId, site, siteId, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, vlan, vlanVid, vlanId, assignedObjectType, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, l2vpnIdN, l2vpnN, deviceN, deviceIdN, virtualMachineN, virtualMachineIdN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, vlanN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, vlanIdN, assignedObjectTypeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamL2vpnTerminationsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param assignedObjectTypeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param l2vpnId (optional)
     * @param l2vpn (optional)
     * @param region (optional)
     * @param regionId (optional)
     * @param site (optional)
     * @param siteId (optional)
     * @param device (optional)
     * @param deviceId (optional)
     * @param virtualMachine (optional)
     * @param virtualMachineId (optional)
     * @param _interface (optional)
     * @param interfaceId (optional)
     * @param vminterface (optional)
     * @param vminterfaceId (optional)
     * @param vlan (optional)
     * @param vlanVid (optional)
     * @param vlanId (optional)
     * @param assignedObjectType (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param assignedObjectTypeIdN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param l2vpnIdN (optional)
     * @param l2vpnN (optional)
     * @param deviceN (optional)
     * @param deviceIdN (optional)
     * @param virtualMachineN (optional)
     * @param virtualMachineIdN (optional)
     * @param interfaceN (optional)
     * @param interfaceIdN (optional)
     * @param vminterfaceN (optional)
     * @param vminterfaceIdN (optional)
     * @param vlanN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param vlanIdN (optional)
     * @param assignedObjectTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsListAsync(String id, String assignedObjectTypeId, String created, String lastUpdated, String q, String tag, String l2vpnId, String l2vpn, String region, String regionId, String site, String siteId, String device, String deviceId, String virtualMachine, String virtualMachineId, String _interface, String interfaceId, String vminterface, String vminterfaceId, String vlan, BigDecimal vlanVid, String vlanId, String assignedObjectType, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String l2vpnIdN, String l2vpnN, String deviceN, String deviceIdN, String virtualMachineN, String virtualMachineIdN, String interfaceN, String interfaceIdN, String vminterfaceN, String vminterfaceIdN, String vlanN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String vlanIdN, String assignedObjectTypeN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamL2vpnTerminationsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsListValidateBeforeCall(id, assignedObjectTypeId, created, lastUpdated, q, tag, l2vpnId, l2vpn, region, regionId, site, siteId, device, deviceId, virtualMachine, virtualMachineId, _interface, interfaceId, vminterface, vminterfaceId, vlan, vlanVid, vlanId, assignedObjectType, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, l2vpnIdN, l2vpnN, deviceN, deviceIdN, virtualMachineN, virtualMachineIdN, interfaceN, interfaceIdN, vminterfaceN, vminterfaceIdN, vlanN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, vlanIdN, assignedObjectTypeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamL2vpnTerminationsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsPartialUpdate
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsPartialUpdateCall(Integer id, WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsPartialUpdateValidateBeforeCall(Integer id, WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnTerminationsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnTerminationsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     *
     * @return L2VPNTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPNTermination ipamL2vpnTerminationsPartialUpdate(Integer id, WritableL2VPNTermination data) throws ApiException {
        ApiResponse<L2VPNTermination> localVarResp = ipamL2vpnTerminationsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPNTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPNTermination> ipamL2vpnTerminationsPartialUpdateWithHttpInfo(Integer id, WritableL2VPNTermination data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsPartialUpdateAsync(Integer id, WritableL2VPNTermination data, final ApiCallback<L2VPNTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsRead
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnTerminationsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     *
     * @return L2VPNTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPNTermination ipamL2vpnTerminationsRead(Integer id) throws ApiException {
        ApiResponse<L2VPNTermination> localVarResp = ipamL2vpnTerminationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     *
     * @return ApiResponse&lt;L2VPNTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPNTermination> ipamL2vpnTerminationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsReadAsync(Integer id, final ApiCallback<L2VPNTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnTerminationsUpdate
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsUpdateCall(Integer id, WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpn-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnTerminationsUpdateValidateBeforeCall(Integer id, WritableL2VPNTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnTerminationsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnTerminationsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     *
     * @return L2VPNTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPNTermination ipamL2vpnTerminationsUpdate(Integer id, WritableL2VPNTermination data) throws ApiException {
        ApiResponse<L2VPNTermination> localVarResp = ipamL2vpnTerminationsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPNTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPNTermination> ipamL2vpnTerminationsUpdateWithHttpInfo(Integer id, WritableL2VPNTermination data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnTerminationsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN termination. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnTerminationsUpdateAsync(Integer id, WritableL2VPNTermination data, final ApiCallback<L2VPNTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnTerminationsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<L2VPNTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamL2vpnsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamL2vpnsBulkDelete() throws ApiException {
        ipamL2vpnsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamL2vpnsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsBulkPartialUpdateCall(WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsBulkPartialUpdateValidateBeforeCall(WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return L2VPN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPN ipamL2vpnsBulkPartialUpdate(WritableL2VPN data) throws ApiException {
        ApiResponse<L2VPN> localVarResp = ipamL2vpnsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPN> ipamL2vpnsBulkPartialUpdateWithHttpInfo(WritableL2VPN data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsBulkPartialUpdateAsync(WritableL2VPN data, final ApiCallback<L2VPN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsBulkUpdateCall(WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsBulkUpdateValidateBeforeCall(WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return L2VPN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPN ipamL2vpnsBulkUpdate(WritableL2VPN data) throws ApiException {
        ApiResponse<L2VPN> localVarResp = ipamL2vpnsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPN> ipamL2vpnsBulkUpdateWithHttpInfo(WritableL2VPN data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsBulkUpdateAsync(WritableL2VPN data, final ApiCallback<L2VPN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsCreateCall(WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsCreateValidateBeforeCall(WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return L2VPN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPN ipamL2vpnsCreate(WritableL2VPN data) throws ApiException {
        ApiResponse<L2VPN> localVarResp = ipamL2vpnsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPN> ipamL2vpnsCreateWithHttpInfo(WritableL2VPN data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsCreateAsync(WritableL2VPN data, final ApiCallback<L2VPN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsDelete
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamL2vpnsDelete(Integer id) throws ApiException {
        ipamL2vpnsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamL2vpnsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsList
     *
     * @param id (optional)
     * @param identifier (optional)
     * @param name (optional)
     * @param type (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param identifierN (optional)
     * @param identifierLte (optional)
     * @param identifierLt (optional)
     * @param identifierGte (optional)
     * @param identifierGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param typeN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsListCall(String id, String identifier, String name, String type, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String identifierN, String identifierLte, String identifierLt, String identifierGte, String identifierGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (importTargetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target_id", importTargetId));
        }
        
        if (importTarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target", importTarget));
        }
        
        if (exportTargetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target_id", exportTargetId));
        }
        
        if (exportTarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target", exportTarget));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (identifierN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier__n", identifierN));
        }
        
        if (identifierLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier__lte", identifierLte));
        }
        
        if (identifierLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier__lt", identifierLt));
        }
        
        if (identifierGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier__gte", identifierGte));
        }
        
        if (identifierGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier__gt", identifierGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (importTargetIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target_id__n", importTargetIdN));
        }
        
        if (importTargetN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target__n", importTargetN));
        }
        
        if (exportTargetIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target_id__n", exportTargetIdN));
        }
        
        if (exportTargetN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target__n", exportTargetN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsListValidateBeforeCall(String id, String identifier, String name, String type, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String identifierN, String identifierLte, String identifierLt, String identifierGte, String identifierGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamL2vpnsListCall(id, identifier, name, type, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, identifierN, identifierLte, identifierLt, identifierGte, identifierGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param identifier (optional)
     * @param name (optional)
     * @param type (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param identifierN (optional)
     * @param identifierLte (optional)
     * @param identifierLt (optional)
     * @param identifierGte (optional)
     * @param identifierGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param typeN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamL2vpnsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamL2vpnsList200Response ipamL2vpnsList(String id, String identifier, String name, String type, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String identifierN, String identifierLte, String identifierLt, String identifierGte, String identifierGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamL2vpnsList200Response> localVarResp = ipamL2vpnsListWithHttpInfo(id, identifier, name, type, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, identifierN, identifierLte, identifierLt, identifierGte, identifierGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param identifier (optional)
     * @param name (optional)
     * @param type (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param identifierN (optional)
     * @param identifierLte (optional)
     * @param identifierLt (optional)
     * @param identifierGte (optional)
     * @param identifierGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param typeN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamL2vpnsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamL2vpnsList200Response> ipamL2vpnsListWithHttpInfo(String id, String identifier, String name, String type, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String identifierN, String identifierLte, String identifierLt, String identifierGte, String identifierGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsListValidateBeforeCall(id, identifier, name, type, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, identifierN, identifierLte, identifierLt, identifierGte, identifierGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamL2vpnsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param identifier (optional)
     * @param name (optional)
     * @param type (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param identifierN (optional)
     * @param identifierLte (optional)
     * @param identifierLt (optional)
     * @param identifierGte (optional)
     * @param identifierGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param typeN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsListAsync(String id, String identifier, String name, String type, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String identifierN, String identifierLte, String identifierLt, String identifierGte, String identifierGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamL2vpnsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsListValidateBeforeCall(id, identifier, name, type, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, identifierN, identifierLte, identifierLt, identifierGte, identifierGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamL2vpnsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsPartialUpdate
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsPartialUpdateCall(Integer id, WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsPartialUpdateValidateBeforeCall(Integer id, WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     *
     * @return L2VPN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPN ipamL2vpnsPartialUpdate(Integer id, WritableL2VPN data) throws ApiException {
        ApiResponse<L2VPN> localVarResp = ipamL2vpnsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPN> ipamL2vpnsPartialUpdateWithHttpInfo(Integer id, WritableL2VPN data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsPartialUpdateAsync(Integer id, WritableL2VPN data, final ApiCallback<L2VPN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsRead
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     *
     * @return L2VPN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPN ipamL2vpnsRead(Integer id) throws ApiException {
        ApiResponse<L2VPN> localVarResp = ipamL2vpnsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     *
     * @return ApiResponse&lt;L2VPN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPN> ipamL2vpnsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsReadAsync(Integer id, final ApiCallback<L2VPN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamL2vpnsUpdate
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsUpdateCall(Integer id, WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/l2vpns/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamL2vpnsUpdateValidateBeforeCall(Integer id, WritableL2VPN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamL2vpnsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamL2vpnsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamL2vpnsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     *
     * @return L2VPN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public L2VPN ipamL2vpnsUpdate(Integer id, WritableL2VPN data) throws ApiException {
        ApiResponse<L2VPN> localVarResp = ipamL2vpnsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;L2VPN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<L2VPN> ipamL2vpnsUpdateWithHttpInfo(Integer id, WritableL2VPN data) throws ApiException {
        okhttp3.Call localVarCall = ipamL2vpnsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this L2VPN. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamL2vpnsUpdateAsync(Integer id, WritableL2VPN data, final ApiCallback<L2VPN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamL2vpnsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<L2VPN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesAvailableIpsCreate
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsCreateCall(Integer id, WritableAvailableIP data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-ips/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailableIpsCreateValidateBeforeCall(Integer id, WritableAvailableIP data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamPrefixesAvailableIpsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsCreateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return List&lt;IPAddress&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<IPAddress> ipamPrefixesAvailableIpsCreate(Integer id, WritableAvailableIP data) throws ApiException {
        ApiResponse<List<IPAddress>> localVarResp = ipamPrefixesAvailableIpsCreateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;List&lt;IPAddress&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<IPAddress>> ipamPrefixesAvailableIpsCreateWithHttpInfo(Integer id, WritableAvailableIP data) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsCreateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<List<IPAddress>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsCreateAsync(Integer id, WritableAvailableIP data, final ApiCallback<List<IPAddress>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsCreateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<List<IPAddress>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesAvailableIpsList
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-ips/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailableIpsListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsList(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsListCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @return List&lt;AvailableIP&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<AvailableIP> ipamPrefixesAvailableIpsList(Integer id) throws ApiException {
        ApiResponse<List<AvailableIP>> localVarResp = ipamPrefixesAvailableIpsListWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this IP address. (required)
     *
     * @return ApiResponse&lt;List&lt;AvailableIP&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<AvailableIP>> ipamPrefixesAvailableIpsListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<AvailableIP>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this IP address. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailableIpsListAsync(Integer id, final ApiCallback<List<AvailableIP>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesAvailableIpsListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<AvailableIP>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesAvailablePrefixesCreate
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesCreateCall(Integer id, PrefixLength data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-prefixes/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailablePrefixesCreateValidateBeforeCall(Integer id, PrefixLength data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamPrefixesAvailablePrefixesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesCreateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     *
     * @return List&lt;Prefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<Prefix> ipamPrefixesAvailablePrefixesCreate(Integer id, PrefixLength data) throws ApiException {
        ApiResponse<List<Prefix>> localVarResp = ipamPrefixesAvailablePrefixesCreateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;List&lt;Prefix&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Prefix>> ipamPrefixesAvailablePrefixesCreateWithHttpInfo(Integer id, PrefixLength data) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesCreateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<List<Prefix>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesCreateAsync(Integer id, PrefixLength data, final ApiCallback<List<Prefix>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesCreateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<List<Prefix>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesAvailablePrefixesList
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/available-prefixes/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesAvailablePrefixesListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesList(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesListCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     *
     * @return List&lt;AvailablePrefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<AvailablePrefix> ipamPrefixesAvailablePrefixesList(Integer id) throws ApiException {
        ApiResponse<List<AvailablePrefix>> localVarResp = ipamPrefixesAvailablePrefixesListWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     *
     * @return ApiResponse&lt;List&lt;AvailablePrefix&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<AvailablePrefix>> ipamPrefixesAvailablePrefixesListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<AvailablePrefix>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesAvailablePrefixesListAsync(Integer id, final ApiCallback<List<AvailablePrefix>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesAvailablePrefixesListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<AvailablePrefix>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamPrefixesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamPrefixesBulkDelete() throws ApiException {
        ipamPrefixesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamPrefixesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesBulkPartialUpdateCall(WritablePrefix data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesBulkPartialUpdateValidateBeforeCall(WritablePrefix data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamPrefixesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Prefix
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Prefix ipamPrefixesBulkPartialUpdate(WritablePrefix data) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Prefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Prefix> ipamPrefixesBulkPartialUpdateWithHttpInfo(WritablePrefix data) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesBulkPartialUpdateAsync(WritablePrefix data, final ApiCallback<Prefix> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesBulkUpdateCall(WritablePrefix data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesBulkUpdateValidateBeforeCall(WritablePrefix data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamPrefixesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Prefix
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Prefix ipamPrefixesBulkUpdate(WritablePrefix data) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Prefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Prefix> ipamPrefixesBulkUpdateWithHttpInfo(WritablePrefix data) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesBulkUpdateAsync(WritablePrefix data, final ApiCallback<Prefix> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesCreateCall(WritablePrefix data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesCreateValidateBeforeCall(WritablePrefix data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamPrefixesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Prefix
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Prefix ipamPrefixesCreate(WritablePrefix data) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Prefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Prefix> ipamPrefixesCreateWithHttpInfo(WritablePrefix data) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesCreateAsync(WritablePrefix data, final ApiCallback<Prefix> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesDelete
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamPrefixesDelete(Integer id) throws ApiException {
        ipamPrefixesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamPrefixesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesList
     *
     * @param id (optional)
     * @param isPool (optional)
     * @param markUtilized (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param within (optional)
     * @param withinInclude (optional)
     * @param contains (optional)
     * @param depth (optional)
     * @param children (optional)
     * @param maskLength (optional)
     * @param maskLengthGte (optional)
     * @param maskLengthLte (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param vlanId (optional)
     * @param vlanVid (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param depthN (optional)
     * @param depthLte (optional)
     * @param depthLt (optional)
     * @param depthGte (optional)
     * @param depthGt (optional)
     * @param childrenN (optional)
     * @param childrenLte (optional)
     * @param childrenLt (optional)
     * @param childrenGte (optional)
     * @param childrenGt (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param vlanIdN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesListCall(String id, String isPool, String markUtilized, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (isPool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_pool", isPool));
        }
        
        if (markUtilized != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mark_utilized", markUtilized));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (family != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("family", family));
        }
        
        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }
        
        if (within != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within", within));
        }
        
        if (withinInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within_include", withinInclude));
        }
        
        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }
        
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }
        
        if (children != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children", children));
        }
        
        if (maskLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mask_length", maskLength));
        }
        
        if (maskLengthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mask_length__gte", maskLengthGte));
        }
        
        if (maskLengthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mask_length__lte", maskLengthLte));
        }
        
        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }
        
        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }
        
        if (presentInVrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("present_in_vrf_id", presentInVrfId));
        }
        
        if (presentInVrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("present_in_vrf", presentInVrf));
        }
        
        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }
        
        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }
        
        if (vlanVid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid", vlanVid));
        }
        
        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }
        
        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }
        
        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (depthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth__n", depthN));
        }
        
        if (depthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth__lte", depthLte));
        }
        
        if (depthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth__lt", depthLt));
        }
        
        if (depthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth__gte", depthGte));
        }
        
        if (depthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth__gt", depthGt));
        }
        
        if (childrenN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children__n", childrenN));
        }
        
        if (childrenLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children__lte", childrenLte));
        }
        
        if (childrenLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children__lt", childrenLt));
        }
        
        if (childrenGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children__gte", childrenGte));
        }
        
        if (childrenGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children__gt", childrenGt));
        }
        
        if (vrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id__n", vrfIdN));
        }
        
        if (vrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf__n", vrfN));
        }
        
        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }
        
        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }
        
        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }
        
        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (vlanIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id__n", vlanIdN));
        }
        
        if (vlanVidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__n", vlanVidN));
        }
        
        if (vlanVidLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__lte", vlanVidLte));
        }
        
        if (vlanVidLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__lt", vlanVidLt));
        }
        
        if (vlanVidGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__gte", vlanVidGte));
        }
        
        if (vlanVidGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_vid__gt", vlanVidGt));
        }
        
        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }
        
        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }
        
        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesListValidateBeforeCall(String id, String isPool, String markUtilized, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamPrefixesListCall(id, isPool, markUtilized, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, within, withinInclude, contains, depth, children, maskLength, maskLengthGte, maskLengthLte, vrfId, vrf, presentInVrfId, presentInVrf, regionId, region, siteGroupId, siteGroup, siteId, site, vlanId, vlanVid, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, depthN, depthLte, depthLt, depthGte, depthGt, childrenN, childrenLte, childrenLt, childrenGte, childrenGt, vrfIdN, vrfN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, vlanIdN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, roleIdN, roleN, statusN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param isPool (optional)
     * @param markUtilized (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param within (optional)
     * @param withinInclude (optional)
     * @param contains (optional)
     * @param depth (optional)
     * @param children (optional)
     * @param maskLength (optional)
     * @param maskLengthGte (optional)
     * @param maskLengthLte (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param vlanId (optional)
     * @param vlanVid (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param depthN (optional)
     * @param depthLte (optional)
     * @param depthLt (optional)
     * @param depthGte (optional)
     * @param depthGt (optional)
     * @param childrenN (optional)
     * @param childrenLte (optional)
     * @param childrenLt (optional)
     * @param childrenGte (optional)
     * @param childrenGt (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param vlanIdN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamPrefixesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamPrefixesList200Response ipamPrefixesList(String id, String isPool, String markUtilized, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamPrefixesList200Response> localVarResp = ipamPrefixesListWithHttpInfo(id, isPool, markUtilized, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, within, withinInclude, contains, depth, children, maskLength, maskLengthGte, maskLengthLte, vrfId, vrf, presentInVrfId, presentInVrf, regionId, region, siteGroupId, siteGroup, siteId, site, vlanId, vlanVid, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, depthN, depthLte, depthLt, depthGte, depthGt, childrenN, childrenLte, childrenLt, childrenGte, childrenGt, vrfIdN, vrfN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, vlanIdN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, roleIdN, roleN, statusN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param isPool (optional)
     * @param markUtilized (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param within (optional)
     * @param withinInclude (optional)
     * @param contains (optional)
     * @param depth (optional)
     * @param children (optional)
     * @param maskLength (optional)
     * @param maskLengthGte (optional)
     * @param maskLengthLte (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param vlanId (optional)
     * @param vlanVid (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param depthN (optional)
     * @param depthLte (optional)
     * @param depthLt (optional)
     * @param depthGte (optional)
     * @param depthGt (optional)
     * @param childrenN (optional)
     * @param childrenLte (optional)
     * @param childrenLt (optional)
     * @param childrenGte (optional)
     * @param childrenGt (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param vlanIdN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamPrefixesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamPrefixesList200Response> ipamPrefixesListWithHttpInfo(String id, String isPool, String markUtilized, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesListValidateBeforeCall(id, isPool, markUtilized, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, within, withinInclude, contains, depth, children, maskLength, maskLengthGte, maskLengthLte, vrfId, vrf, presentInVrfId, presentInVrf, regionId, region, siteGroupId, siteGroup, siteId, site, vlanId, vlanVid, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, depthN, depthLte, depthLt, depthGte, depthGt, childrenN, childrenLte, childrenLt, childrenGte, childrenGt, vrfIdN, vrfN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, vlanIdN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, roleIdN, roleN, statusN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamPrefixesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param isPool (optional)
     * @param markUtilized (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param family (optional)
     * @param prefix (optional)
     * @param within (optional)
     * @param withinInclude (optional)
     * @param contains (optional)
     * @param depth (optional)
     * @param children (optional)
     * @param maskLength (optional)
     * @param maskLengthGte (optional)
     * @param maskLengthLte (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param presentInVrfId (optional)
     * @param presentInVrf (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param vlanId (optional)
     * @param vlanVid (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param depthN (optional)
     * @param depthLte (optional)
     * @param depthLt (optional)
     * @param depthGte (optional)
     * @param depthGt (optional)
     * @param childrenN (optional)
     * @param childrenLte (optional)
     * @param childrenLt (optional)
     * @param childrenGte (optional)
     * @param childrenGt (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param vlanIdN (optional)
     * @param vlanVidN (optional)
     * @param vlanVidLte (optional)
     * @param vlanVidLt (optional)
     * @param vlanVidGte (optional)
     * @param vlanVidGt (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesListAsync(String id, String isPool, String markUtilized, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, BigDecimal family, String prefix, String within, String withinInclude, String contains, String depth, String children, String maskLength, BigDecimal maskLengthGte, BigDecimal maskLengthLte, String vrfId, String vrf, String presentInVrfId, String presentInVrf, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String vlanId, BigDecimal vlanVid, String roleId, String role, String status, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String depthN, String depthLte, String depthLt, String depthGte, String depthGt, String childrenN, String childrenLte, String childrenLt, String childrenGte, String childrenGt, String vrfIdN, String vrfN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String vlanIdN, BigDecimal vlanVidN, BigDecimal vlanVidLte, BigDecimal vlanVidLt, BigDecimal vlanVidGte, BigDecimal vlanVidGt, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamPrefixesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesListValidateBeforeCall(id, isPool, markUtilized, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, family, prefix, within, withinInclude, contains, depth, children, maskLength, maskLengthGte, maskLengthLte, vrfId, vrf, presentInVrfId, presentInVrf, regionId, region, siteGroupId, siteGroup, siteId, site, vlanId, vlanVid, roleId, role, status, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, depthN, depthLte, depthLt, depthGte, depthGt, childrenN, childrenLte, childrenLt, childrenGte, childrenGt, vrfIdN, vrfN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, vlanIdN, vlanVidN, vlanVidLte, vlanVidLt, vlanVidGte, vlanVidGt, roleIdN, roleN, statusN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamPrefixesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesPartialUpdate
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesPartialUpdateCall(Integer id, WritablePrefix data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesPartialUpdateValidateBeforeCall(Integer id, WritablePrefix data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamPrefixesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     *
     * @return Prefix
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Prefix ipamPrefixesPartialUpdate(Integer id, WritablePrefix data) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Prefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Prefix> ipamPrefixesPartialUpdateWithHttpInfo(Integer id, WritablePrefix data) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesPartialUpdateAsync(Integer id, WritablePrefix data, final ApiCallback<Prefix> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesRead
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     *
     * @return Prefix
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Prefix ipamPrefixesRead(Integer id) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     *
     * @return ApiResponse&lt;Prefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Prefix> ipamPrefixesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesReadAsync(Integer id, final ApiCallback<Prefix> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamPrefixesUpdate
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesUpdateCall(Integer id, WritablePrefix data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/prefixes/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamPrefixesUpdateValidateBeforeCall(Integer id, WritablePrefix data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamPrefixesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamPrefixesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamPrefixesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     *
     * @return Prefix
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Prefix ipamPrefixesUpdate(Integer id, WritablePrefix data) throws ApiException {
        ApiResponse<Prefix> localVarResp = ipamPrefixesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Prefix&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Prefix> ipamPrefixesUpdateWithHttpInfo(Integer id, WritablePrefix data) throws ApiException {
        okhttp3.Call localVarCall = ipamPrefixesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this prefix. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamPrefixesUpdateAsync(Integer id, WritablePrefix data, final ApiCallback<Prefix> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamPrefixesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Prefix>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamRirsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamRirsBulkDelete() throws ApiException {
        ipamRirsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamRirsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamRirsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsBulkPartialUpdateCall(RIR data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsBulkPartialUpdateValidateBeforeCall(RIR data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRirsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRirsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return RIR
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RIR ipamRirsBulkPartialUpdate(RIR data) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;RIR&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RIR> ipamRirsBulkPartialUpdateWithHttpInfo(RIR data) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsBulkPartialUpdateAsync(RIR data, final ApiCallback<RIR> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsBulkUpdateCall(RIR data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsBulkUpdateValidateBeforeCall(RIR data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRirsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRirsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return RIR
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RIR ipamRirsBulkUpdate(RIR data) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;RIR&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RIR> ipamRirsBulkUpdateWithHttpInfo(RIR data) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsBulkUpdateAsync(RIR data, final ApiCallback<RIR> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsCreateCall(RIR data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsCreateValidateBeforeCall(RIR data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRirsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRirsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return RIR
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RIR ipamRirsCreate(RIR data) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;RIR&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RIR> ipamRirsCreateWithHttpInfo(RIR data) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsCreateAsync(RIR data, final ApiCallback<RIR> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsDelete
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRirsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamRirsDelete(Integer id) throws ApiException {
        ipamRirsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamRirsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param isPrivate (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsListCall(String id, String name, String slug, String isPrivate, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_private", isPrivate));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsListValidateBeforeCall(String id, String name, String slug, String isPrivate, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamRirsListCall(id, name, slug, isPrivate, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param isPrivate (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamRirsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamRirsList200Response ipamRirsList(String id, String name, String slug, String isPrivate, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamRirsList200Response> localVarResp = ipamRirsListWithHttpInfo(id, name, slug, isPrivate, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param isPrivate (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamRirsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamRirsList200Response> ipamRirsListWithHttpInfo(String id, String name, String slug, String isPrivate, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsListValidateBeforeCall(id, name, slug, isPrivate, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamRirsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param isPrivate (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsListAsync(String id, String name, String slug, String isPrivate, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamRirsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsListValidateBeforeCall(id, name, slug, isPrivate, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamRirsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsPartialUpdate
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsPartialUpdateCall(Integer id, RIR data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsPartialUpdateValidateBeforeCall(Integer id, RIR data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRirsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRirsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     *
     * @return RIR
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RIR ipamRirsPartialUpdate(Integer id, RIR data) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;RIR&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RIR> ipamRirsPartialUpdateWithHttpInfo(Integer id, RIR data) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsPartialUpdateAsync(Integer id, RIR data, final ApiCallback<RIR> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsRead
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRirsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     *
     * @return RIR
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RIR ipamRirsRead(Integer id) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     *
     * @return ApiResponse&lt;RIR&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RIR> ipamRirsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsReadAsync(Integer id, final ApiCallback<RIR> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRirsUpdate
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsUpdateCall(Integer id, RIR data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/rirs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRirsUpdateValidateBeforeCall(Integer id, RIR data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRirsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRirsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRirsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     *
     * @return RIR
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RIR ipamRirsUpdate(Integer id, RIR data) throws ApiException {
        ApiResponse<RIR> localVarResp = ipamRirsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;RIR&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RIR> ipamRirsUpdateWithHttpInfo(Integer id, RIR data) throws ApiException {
        okhttp3.Call localVarCall = ipamRirsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this RIR. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRirsUpdateAsync(Integer id, RIR data, final ApiCallback<RIR> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRirsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RIR>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamRolesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamRolesBulkDelete() throws ApiException {
        ipamRolesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesBulkPartialUpdateCall(Role data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesBulkPartialUpdateValidateBeforeCall(Role data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRolesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRolesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Role
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Role ipamRolesBulkPartialUpdate(Role data) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Role&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Role> ipamRolesBulkPartialUpdateWithHttpInfo(Role data) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesBulkPartialUpdateAsync(Role data, final ApiCallback<Role> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesBulkUpdateCall(Role data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesBulkUpdateValidateBeforeCall(Role data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRolesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRolesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Role
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Role ipamRolesBulkUpdate(Role data) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Role&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Role> ipamRolesBulkUpdateWithHttpInfo(Role data) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesBulkUpdateAsync(Role data, final ApiCallback<Role> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesCreateCall(Role data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesCreateValidateBeforeCall(Role data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRolesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRolesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Role
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Role ipamRolesCreate(Role data) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Role&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Role> ipamRolesCreateWithHttpInfo(Role data) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesCreateAsync(Role data, final ApiCallback<Role> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesDelete
     *
     * @param id A unique integer value identifying this role. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRolesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamRolesDelete(Integer id) throws ApiException {
        ipamRolesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this role. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamRolesListCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamRolesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamRolesList200Response ipamRolesList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamRolesList200Response> localVarResp = ipamRolesListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamRolesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamRolesList200Response> ipamRolesListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamRolesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamRolesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamRolesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesPartialUpdate
     *
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesPartialUpdateCall(Integer id, Role data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesPartialUpdateValidateBeforeCall(Integer id, Role data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRolesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRolesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     *
     * @return Role
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Role ipamRolesPartialUpdate(Integer id, Role data) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Role&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Role> ipamRolesPartialUpdateWithHttpInfo(Integer id, Role data) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesPartialUpdateAsync(Integer id, Role data, final ApiCallback<Role> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesRead
     *
     * @param id A unique integer value identifying this role. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRolesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     *
     * @return Role
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Role ipamRolesRead(Integer id) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     *
     * @return ApiResponse&lt;Role&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Role> ipamRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this role. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesReadAsync(Integer id, final ApiCallback<Role> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRolesUpdate
     *
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesUpdateCall(Integer id, Role data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRolesUpdateValidateBeforeCall(Integer id, Role data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRolesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRolesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRolesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     *
     * @return Role
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Role ipamRolesUpdate(Integer id, Role data) throws ApiException {
        ApiResponse<Role> localVarResp = ipamRolesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Role&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Role> ipamRolesUpdateWithHttpInfo(Integer id, Role data) throws ApiException {
        okhttp3.Call localVarCall = ipamRolesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this role. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRolesUpdateAsync(Integer id, Role data, final ApiCallback<Role> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRolesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Role>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamRouteTargetsBulkDelete() throws ApiException {
        ipamRouteTargetsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamRouteTargetsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsBulkPartialUpdateCall(WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsBulkPartialUpdateValidateBeforeCall(WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRouteTargetsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return RouteTarget
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RouteTarget ipamRouteTargetsBulkPartialUpdate(WritableRouteTarget data) throws ApiException {
        ApiResponse<RouteTarget> localVarResp = ipamRouteTargetsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;RouteTarget&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RouteTarget> ipamRouteTargetsBulkPartialUpdateWithHttpInfo(WritableRouteTarget data) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsBulkPartialUpdateAsync(WritableRouteTarget data, final ApiCallback<RouteTarget> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsBulkUpdateCall(WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsBulkUpdateValidateBeforeCall(WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRouteTargetsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return RouteTarget
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RouteTarget ipamRouteTargetsBulkUpdate(WritableRouteTarget data) throws ApiException {
        ApiResponse<RouteTarget> localVarResp = ipamRouteTargetsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;RouteTarget&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RouteTarget> ipamRouteTargetsBulkUpdateWithHttpInfo(WritableRouteTarget data) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsBulkUpdateAsync(WritableRouteTarget data, final ApiCallback<RouteTarget> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsCreateCall(WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsCreateValidateBeforeCall(WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRouteTargetsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return RouteTarget
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RouteTarget ipamRouteTargetsCreate(WritableRouteTarget data) throws ApiException {
        ApiResponse<RouteTarget> localVarResp = ipamRouteTargetsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;RouteTarget&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RouteTarget> ipamRouteTargetsCreateWithHttpInfo(WritableRouteTarget data) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsCreateAsync(WritableRouteTarget data, final ApiCallback<RouteTarget> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsDelete
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRouteTargetsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamRouteTargetsDelete(Integer id) throws ApiException {
        ipamRouteTargetsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamRouteTargetsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importingVrfId (optional)
     * @param importingVrf (optional)
     * @param exportingVrfId (optional)
     * @param exportingVrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importingVrfIdN (optional)
     * @param importingVrfN (optional)
     * @param exportingVrfIdN (optional)
     * @param exportingVrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsListCall(String id, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (importingVrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importing_vrf_id", importingVrfId));
        }
        
        if (importingVrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importing_vrf", importingVrf));
        }
        
        if (exportingVrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exporting_vrf_id", exportingVrfId));
        }
        
        if (exportingVrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exporting_vrf", exportingVrf));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (importingVrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importing_vrf_id__n", importingVrfIdN));
        }
        
        if (importingVrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importing_vrf__n", importingVrfN));
        }
        
        if (exportingVrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exporting_vrf_id__n", exportingVrfIdN));
        }
        
        if (exportingVrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exporting_vrf__n", exportingVrfN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsListValidateBeforeCall(String id, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsListCall(id, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importingVrfId, importingVrf, exportingVrfId, exportingVrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importingVrfIdN, importingVrfN, exportingVrfIdN, exportingVrfN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importingVrfId (optional)
     * @param importingVrf (optional)
     * @param exportingVrfId (optional)
     * @param exportingVrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importingVrfIdN (optional)
     * @param importingVrfN (optional)
     * @param exportingVrfIdN (optional)
     * @param exportingVrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamRouteTargetsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamRouteTargetsList200Response ipamRouteTargetsList(String id, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamRouteTargetsList200Response> localVarResp = ipamRouteTargetsListWithHttpInfo(id, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importingVrfId, importingVrf, exportingVrfId, exportingVrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importingVrfIdN, importingVrfN, exportingVrfIdN, exportingVrfN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importingVrfId (optional)
     * @param importingVrf (optional)
     * @param exportingVrfId (optional)
     * @param exportingVrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importingVrfIdN (optional)
     * @param importingVrfN (optional)
     * @param exportingVrfIdN (optional)
     * @param exportingVrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamRouteTargetsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamRouteTargetsList200Response> ipamRouteTargetsListWithHttpInfo(String id, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsListValidateBeforeCall(id, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importingVrfId, importingVrf, exportingVrfId, exportingVrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importingVrfIdN, importingVrfN, exportingVrfIdN, exportingVrfN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamRouteTargetsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importingVrfId (optional)
     * @param importingVrf (optional)
     * @param exportingVrfId (optional)
     * @param exportingVrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importingVrfIdN (optional)
     * @param importingVrfN (optional)
     * @param exportingVrfIdN (optional)
     * @param exportingVrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsListAsync(String id, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importingVrfId, String importingVrf, String exportingVrfId, String exportingVrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importingVrfIdN, String importingVrfN, String exportingVrfIdN, String exportingVrfN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamRouteTargetsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsListValidateBeforeCall(id, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importingVrfId, importingVrf, exportingVrfId, exportingVrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importingVrfIdN, importingVrfN, exportingVrfIdN, exportingVrfN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamRouteTargetsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsPartialUpdate
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsPartialUpdateCall(Integer id, WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsPartialUpdateValidateBeforeCall(Integer id, WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRouteTargetsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRouteTargetsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     *
     * @return RouteTarget
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RouteTarget ipamRouteTargetsPartialUpdate(Integer id, WritableRouteTarget data) throws ApiException {
        ApiResponse<RouteTarget> localVarResp = ipamRouteTargetsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;RouteTarget&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RouteTarget> ipamRouteTargetsPartialUpdateWithHttpInfo(Integer id, WritableRouteTarget data) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsPartialUpdateAsync(Integer id, WritableRouteTarget data, final ApiCallback<RouteTarget> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsRead
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRouteTargetsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     *
     * @return RouteTarget
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RouteTarget ipamRouteTargetsRead(Integer id) throws ApiException {
        ApiResponse<RouteTarget> localVarResp = ipamRouteTargetsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     *
     * @return ApiResponse&lt;RouteTarget&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RouteTarget> ipamRouteTargetsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsReadAsync(Integer id, final ApiCallback<RouteTarget> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamRouteTargetsUpdate
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsUpdateCall(Integer id, WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/route-targets/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamRouteTargetsUpdateValidateBeforeCall(Integer id, WritableRouteTarget data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamRouteTargetsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamRouteTargetsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamRouteTargetsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     *
     * @return RouteTarget
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public RouteTarget ipamRouteTargetsUpdate(Integer id, WritableRouteTarget data) throws ApiException {
        ApiResponse<RouteTarget> localVarResp = ipamRouteTargetsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;RouteTarget&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RouteTarget> ipamRouteTargetsUpdateWithHttpInfo(Integer id, WritableRouteTarget data) throws ApiException {
        okhttp3.Call localVarCall = ipamRouteTargetsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this route target. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamRouteTargetsUpdateAsync(Integer id, WritableRouteTarget data, final ApiCallback<RouteTarget> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamRouteTargetsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RouteTarget>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamServiceTemplatesBulkDelete() throws ApiException {
        ipamServiceTemplatesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamServiceTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesBulkPartialUpdateCall(WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesBulkPartialUpdateValidateBeforeCall(WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServiceTemplatesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ServiceTemplate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ServiceTemplate ipamServiceTemplatesBulkPartialUpdate(WritableServiceTemplate data) throws ApiException {
        ApiResponse<ServiceTemplate> localVarResp = ipamServiceTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ServiceTemplate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ServiceTemplate> ipamServiceTemplatesBulkPartialUpdateWithHttpInfo(WritableServiceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesBulkPartialUpdateAsync(WritableServiceTemplate data, final ApiCallback<ServiceTemplate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesBulkUpdateCall(WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesBulkUpdateValidateBeforeCall(WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServiceTemplatesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ServiceTemplate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ServiceTemplate ipamServiceTemplatesBulkUpdate(WritableServiceTemplate data) throws ApiException {
        ApiResponse<ServiceTemplate> localVarResp = ipamServiceTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ServiceTemplate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ServiceTemplate> ipamServiceTemplatesBulkUpdateWithHttpInfo(WritableServiceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesBulkUpdateAsync(WritableServiceTemplate data, final ApiCallback<ServiceTemplate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesCreateCall(WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesCreateValidateBeforeCall(WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServiceTemplatesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ServiceTemplate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ServiceTemplate ipamServiceTemplatesCreate(WritableServiceTemplate data) throws ApiException {
        ApiResponse<ServiceTemplate> localVarResp = ipamServiceTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ServiceTemplate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ServiceTemplate> ipamServiceTemplatesCreateWithHttpInfo(WritableServiceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesCreateAsync(WritableServiceTemplate data, final ApiCallback<ServiceTemplate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesDelete
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServiceTemplatesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamServiceTemplatesDelete(Integer id) throws ApiException {
        ipamServiceTemplatesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamServiceTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesListCall(String id, String name, String protocol, String created, String lastUpdated, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol", protocol));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port", port));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (protocolN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol__n", protocolN));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesListValidateBeforeCall(String id, String name, String protocol, String created, String lastUpdated, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesListCall(id, name, protocol, created, lastUpdated, q, tag, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamServiceTemplatesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamServiceTemplatesList200Response ipamServiceTemplatesList(String id, String name, String protocol, String created, String lastUpdated, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamServiceTemplatesList200Response> localVarResp = ipamServiceTemplatesListWithHttpInfo(id, name, protocol, created, lastUpdated, q, tag, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamServiceTemplatesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamServiceTemplatesList200Response> ipamServiceTemplatesListWithHttpInfo(String id, String name, String protocol, String created, String lastUpdated, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesListValidateBeforeCall(id, name, protocol, created, lastUpdated, q, tag, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamServiceTemplatesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesListAsync(String id, String name, String protocol, String created, String lastUpdated, String q, String tag, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamServiceTemplatesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesListValidateBeforeCall(id, name, protocol, created, lastUpdated, q, tag, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamServiceTemplatesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesPartialUpdate
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesPartialUpdateCall(Integer id, WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServiceTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServiceTemplatesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     *
     * @return ServiceTemplate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ServiceTemplate ipamServiceTemplatesPartialUpdate(Integer id, WritableServiceTemplate data) throws ApiException {
        ApiResponse<ServiceTemplate> localVarResp = ipamServiceTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ServiceTemplate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ServiceTemplate> ipamServiceTemplatesPartialUpdateWithHttpInfo(Integer id, WritableServiceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesPartialUpdateAsync(Integer id, WritableServiceTemplate data, final ApiCallback<ServiceTemplate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesRead
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServiceTemplatesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     *
     * @return ServiceTemplate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ServiceTemplate ipamServiceTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ServiceTemplate> localVarResp = ipamServiceTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     *
     * @return ApiResponse&lt;ServiceTemplate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ServiceTemplate> ipamServiceTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesReadAsync(Integer id, final ApiCallback<ServiceTemplate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServiceTemplatesUpdate
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesUpdateCall(Integer id, WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/service-templates/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServiceTemplatesUpdateValidateBeforeCall(Integer id, WritableServiceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServiceTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServiceTemplatesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServiceTemplatesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     *
     * @return ServiceTemplate
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ServiceTemplate ipamServiceTemplatesUpdate(Integer id, WritableServiceTemplate data) throws ApiException {
        ApiResponse<ServiceTemplate> localVarResp = ipamServiceTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ServiceTemplate&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ServiceTemplate> ipamServiceTemplatesUpdateWithHttpInfo(Integer id, WritableServiceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = ipamServiceTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service template. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServiceTemplatesUpdateAsync(Integer id, WritableServiceTemplate data, final ApiCallback<ServiceTemplate> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServiceTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ServiceTemplate>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/services/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamServicesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamServicesBulkDelete() throws ApiException {
        ipamServicesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamServicesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamServicesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesBulkPartialUpdateCall(WritableService data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/services/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesBulkPartialUpdateValidateBeforeCall(WritableService data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServicesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServicesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Service
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Service ipamServicesBulkPartialUpdate(WritableService data) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Service&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Service> ipamServicesBulkPartialUpdateWithHttpInfo(WritableService data) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesBulkPartialUpdateAsync(WritableService data, final ApiCallback<Service> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesBulkUpdateCall(WritableService data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/services/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesBulkUpdateValidateBeforeCall(WritableService data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServicesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServicesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Service
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Service ipamServicesBulkUpdate(WritableService data) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Service&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Service> ipamServicesBulkUpdateWithHttpInfo(WritableService data) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesBulkUpdateAsync(WritableService data, final ApiCallback<Service> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesCreateCall(WritableService data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/services/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesCreateValidateBeforeCall(WritableService data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServicesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServicesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Service
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Service ipamServicesCreate(WritableService data) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Service&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Service> ipamServicesCreateWithHttpInfo(WritableService data) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesCreateAsync(WritableService data, final ApiCallback<Service> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesDelete
     *
     * @param id A unique integer value identifying this service. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/services/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServicesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamServicesDelete(Integer id) throws ApiException {
        ipamServicesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamServicesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesListCall(String id, String name, String protocol, String description, String created, String lastUpdated, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/services/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol", protocol));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }
        
        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }
        
        if (virtualMachineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id", virtualMachineId));
        }
        
        if (virtualMachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine", virtualMachine));
        }
        
        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port", port));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (protocolN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol__n", protocolN));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }
        
        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }
        
        if (virtualMachineIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id__n", virtualMachineIdN));
        }
        
        if (virtualMachineN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine__n", virtualMachineN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesListValidateBeforeCall(String id, String name, String protocol, String description, String created, String lastUpdated, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamServicesListCall(id, name, protocol, description, created, lastUpdated, q, tag, deviceId, device, virtualMachineId, virtualMachine, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, deviceIdN, deviceN, virtualMachineIdN, virtualMachineN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamServicesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamServicesList200Response ipamServicesList(String id, String name, String protocol, String description, String created, String lastUpdated, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamServicesList200Response> localVarResp = ipamServicesListWithHttpInfo(id, name, protocol, description, created, lastUpdated, q, tag, deviceId, device, virtualMachineId, virtualMachine, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, deviceIdN, deviceN, virtualMachineIdN, virtualMachineN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamServicesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamServicesList200Response> ipamServicesListWithHttpInfo(String id, String name, String protocol, String description, String created, String lastUpdated, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesListValidateBeforeCall(id, name, protocol, description, created, lastUpdated, q, tag, deviceId, device, virtualMachineId, virtualMachine, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, deviceIdN, deviceN, virtualMachineIdN, virtualMachineN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamServicesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param protocol (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param port (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param protocolN (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesListAsync(String id, String name, String protocol, String description, String created, String lastUpdated, String q, String tag, String deviceId, String device, String virtualMachineId, String virtualMachine, BigDecimal port, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String protocolN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String deviceIdN, String deviceN, String virtualMachineIdN, String virtualMachineN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamServicesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesListValidateBeforeCall(id, name, protocol, description, created, lastUpdated, q, tag, deviceId, device, virtualMachineId, virtualMachine, port, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, protocolN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, deviceIdN, deviceN, virtualMachineIdN, virtualMachineN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamServicesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesPartialUpdate
     *
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesPartialUpdateCall(Integer id, WritableService data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/services/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesPartialUpdateValidateBeforeCall(Integer id, WritableService data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServicesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServicesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     *
     * @return Service
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Service ipamServicesPartialUpdate(Integer id, WritableService data) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Service&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Service> ipamServicesPartialUpdateWithHttpInfo(Integer id, WritableService data) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesPartialUpdateAsync(Integer id, WritableService data, final ApiCallback<Service> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesRead
     *
     * @param id A unique integer value identifying this service. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/services/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServicesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     *
     * @return Service
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Service ipamServicesRead(Integer id) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     *
     * @return ApiResponse&lt;Service&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Service> ipamServicesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesReadAsync(Integer id, final ApiCallback<Service> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamServicesUpdate
     *
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesUpdateCall(Integer id, WritableService data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/services/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamServicesUpdateValidateBeforeCall(Integer id, WritableService data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamServicesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamServicesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamServicesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     *
     * @return Service
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Service ipamServicesUpdate(Integer id, WritableService data) throws ApiException {
        ApiResponse<Service> localVarResp = ipamServicesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Service&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Service> ipamServicesUpdateWithHttpInfo(Integer id, WritableService data) throws ApiException {
        okhttp3.Call localVarCall = ipamServicesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this service. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamServicesUpdateAsync(Integer id, WritableService data, final ApiCallback<Service> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamServicesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Service>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsAvailableVlansCreate
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsAvailableVlansCreateCall(Integer id, WritableCreateAvailableVLAN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/available-vlans/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsAvailableVlansCreateValidateBeforeCall(Integer id, WritableCreateAvailableVLAN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsAvailableVlansCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlanGroupsAvailableVlansCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsAvailableVlansCreateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     *
     * @return List&lt;VLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<VLAN> ipamVlanGroupsAvailableVlansCreate(Integer id, WritableCreateAvailableVLAN data) throws ApiException {
        ApiResponse<List<VLAN>> localVarResp = ipamVlanGroupsAvailableVlansCreateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;List&lt;VLAN&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<VLAN>> ipamVlanGroupsAvailableVlansCreateWithHttpInfo(Integer id, WritableCreateAvailableVLAN data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsAvailableVlansCreateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<List<VLAN>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsAvailableVlansCreateAsync(Integer id, WritableCreateAvailableVLAN data, final ApiCallback<List<VLAN>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsAvailableVlansCreateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<List<VLAN>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsAvailableVlansList
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsAvailableVlansListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/available-vlans/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsAvailableVlansListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsAvailableVlansList(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsAvailableVlansListCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     *
     * @return List&lt;AvailableVLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public List<AvailableVLAN> ipamVlanGroupsAvailableVlansList(Integer id) throws ApiException {
        ApiResponse<List<AvailableVLAN>> localVarResp = ipamVlanGroupsAvailableVlansListWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     *
     * @return ApiResponse&lt;List&lt;AvailableVLAN&gt;&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<AvailableVLAN>> ipamVlanGroupsAvailableVlansListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsAvailableVlansListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<AvailableVLAN>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsAvailableVlansListAsync(Integer id, final ApiCallback<List<AvailableVLAN>> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsAvailableVlansListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<AvailableVLAN>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamVlanGroupsBulkDelete() throws ApiException {
        ipamVlanGroupsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamVlanGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsBulkPartialUpdateCall(VLANGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsBulkPartialUpdateValidateBeforeCall(VLANGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlanGroupsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VLANGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLANGroup ipamVlanGroupsBulkPartialUpdate(VLANGroup data) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VLANGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsBulkPartialUpdateWithHttpInfo(VLANGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsBulkPartialUpdateAsync(VLANGroup data, final ApiCallback<VLANGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsBulkUpdateCall(VLANGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsBulkUpdateValidateBeforeCall(VLANGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlanGroupsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VLANGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLANGroup ipamVlanGroupsBulkUpdate(VLANGroup data) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VLANGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsBulkUpdateWithHttpInfo(VLANGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsBulkUpdateAsync(VLANGroup data, final ApiCallback<VLANGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsCreateCall(VLANGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsCreateValidateBeforeCall(VLANGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlanGroupsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VLANGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLANGroup ipamVlanGroupsCreate(VLANGroup data) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VLANGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsCreateWithHttpInfo(VLANGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsCreateAsync(VLANGroup data, final ApiCallback<VLANGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsDelete
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamVlanGroupsDelete(Integer id) throws ApiException {
        ipamVlanGroupsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamVlanGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param minVid (optional)
     * @param maxVid (optional)
     * @param description (optional)
     * @param scopeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param scopeType (optional)
     * @param region (optional)
     * @param sitegroup (optional)
     * @param site (optional)
     * @param location (optional)
     * @param rack (optional)
     * @param clustergroup (optional)
     * @param cluster (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param minVidN (optional)
     * @param minVidLte (optional)
     * @param minVidLt (optional)
     * @param minVidGte (optional)
     * @param minVidGt (optional)
     * @param maxVidN (optional)
     * @param maxVidLte (optional)
     * @param maxVidLt (optional)
     * @param maxVidGte (optional)
     * @param maxVidGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param scopeIdN (optional)
     * @param scopeIdLte (optional)
     * @param scopeIdLt (optional)
     * @param scopeIdGte (optional)
     * @param scopeIdGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param scopeTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsListCall(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String lastUpdated, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String scopeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (minVid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_vid", minVid));
        }
        
        if (maxVid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_vid", maxVid));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (scopeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_id", scopeId));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (scopeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_type", scopeType));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (sitegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sitegroup", sitegroup));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }
        
        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }
        
        if (clustergroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clustergroup", clustergroup));
        }
        
        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (minVidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_vid__n", minVidN));
        }
        
        if (minVidLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_vid__lte", minVidLte));
        }
        
        if (minVidLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_vid__lt", minVidLt));
        }
        
        if (minVidGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_vid__gte", minVidGte));
        }
        
        if (minVidGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_vid__gt", minVidGt));
        }
        
        if (maxVidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_vid__n", maxVidN));
        }
        
        if (maxVidLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_vid__lte", maxVidLte));
        }
        
        if (maxVidLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_vid__lt", maxVidLt));
        }
        
        if (maxVidGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_vid__gte", maxVidGte));
        }
        
        if (maxVidGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_vid__gt", maxVidGt));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (scopeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_id__n", scopeIdN));
        }
        
        if (scopeIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_id__lte", scopeIdLte));
        }
        
        if (scopeIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_id__lt", scopeIdLt));
        }
        
        if (scopeIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_id__gte", scopeIdGte));
        }
        
        if (scopeIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_id__gt", scopeIdGt));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (scopeTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_type__n", scopeTypeN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsListValidateBeforeCall(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String lastUpdated, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String scopeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsListCall(id, name, slug, minVid, maxVid, description, scopeId, created, lastUpdated, q, tag, scopeType, region, sitegroup, site, location, rack, clustergroup, cluster, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, minVidN, minVidLte, minVidLt, minVidGte, minVidGt, maxVidN, maxVidLte, maxVidLt, maxVidGte, maxVidGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, scopeIdN, scopeIdLte, scopeIdLt, scopeIdGte, scopeIdGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, scopeTypeN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param minVid (optional)
     * @param maxVid (optional)
     * @param description (optional)
     * @param scopeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param scopeType (optional)
     * @param region (optional)
     * @param sitegroup (optional)
     * @param site (optional)
     * @param location (optional)
     * @param rack (optional)
     * @param clustergroup (optional)
     * @param cluster (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param minVidN (optional)
     * @param minVidLte (optional)
     * @param minVidLt (optional)
     * @param minVidGte (optional)
     * @param minVidGt (optional)
     * @param maxVidN (optional)
     * @param maxVidLte (optional)
     * @param maxVidLt (optional)
     * @param maxVidGte (optional)
     * @param maxVidGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param scopeIdN (optional)
     * @param scopeIdLte (optional)
     * @param scopeIdLt (optional)
     * @param scopeIdGte (optional)
     * @param scopeIdGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param scopeTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamVlanGroupsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamVlanGroupsList200Response ipamVlanGroupsList(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String lastUpdated, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String scopeTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamVlanGroupsList200Response> localVarResp = ipamVlanGroupsListWithHttpInfo(id, name, slug, minVid, maxVid, description, scopeId, created, lastUpdated, q, tag, scopeType, region, sitegroup, site, location, rack, clustergroup, cluster, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, minVidN, minVidLte, minVidLt, minVidGte, minVidGt, maxVidN, maxVidLte, maxVidLt, maxVidGte, maxVidGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, scopeIdN, scopeIdLte, scopeIdLt, scopeIdGte, scopeIdGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, scopeTypeN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param minVid (optional)
     * @param maxVid (optional)
     * @param description (optional)
     * @param scopeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param scopeType (optional)
     * @param region (optional)
     * @param sitegroup (optional)
     * @param site (optional)
     * @param location (optional)
     * @param rack (optional)
     * @param clustergroup (optional)
     * @param cluster (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param minVidN (optional)
     * @param minVidLte (optional)
     * @param minVidLt (optional)
     * @param minVidGte (optional)
     * @param minVidGt (optional)
     * @param maxVidN (optional)
     * @param maxVidLte (optional)
     * @param maxVidLt (optional)
     * @param maxVidGte (optional)
     * @param maxVidGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param scopeIdN (optional)
     * @param scopeIdLte (optional)
     * @param scopeIdLt (optional)
     * @param scopeIdGte (optional)
     * @param scopeIdGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param scopeTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamVlanGroupsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamVlanGroupsList200Response> ipamVlanGroupsListWithHttpInfo(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String lastUpdated, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String scopeTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsListValidateBeforeCall(id, name, slug, minVid, maxVid, description, scopeId, created, lastUpdated, q, tag, scopeType, region, sitegroup, site, location, rack, clustergroup, cluster, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, minVidN, minVidLte, minVidLt, minVidGte, minVidGt, maxVidN, maxVidLte, maxVidLt, maxVidGte, maxVidGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, scopeIdN, scopeIdLte, scopeIdLt, scopeIdGte, scopeIdGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, scopeTypeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamVlanGroupsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param minVid (optional)
     * @param maxVid (optional)
     * @param description (optional)
     * @param scopeId (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param scopeType (optional)
     * @param region (optional)
     * @param sitegroup (optional)
     * @param site (optional)
     * @param location (optional)
     * @param rack (optional)
     * @param clustergroup (optional)
     * @param cluster (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param minVidN (optional)
     * @param minVidLte (optional)
     * @param minVidLt (optional)
     * @param minVidGte (optional)
     * @param minVidGt (optional)
     * @param maxVidN (optional)
     * @param maxVidLte (optional)
     * @param maxVidLt (optional)
     * @param maxVidGte (optional)
     * @param maxVidGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param scopeIdN (optional)
     * @param scopeIdLte (optional)
     * @param scopeIdLt (optional)
     * @param scopeIdGte (optional)
     * @param scopeIdGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param scopeTypeN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsListAsync(String id, String name, String slug, String minVid, String maxVid, String description, String scopeId, String created, String lastUpdated, String q, String tag, String scopeType, BigDecimal region, BigDecimal sitegroup, BigDecimal site, BigDecimal location, BigDecimal rack, BigDecimal clustergroup, BigDecimal cluster, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String minVidN, String minVidLte, String minVidLt, String minVidGte, String minVidGt, String maxVidN, String maxVidLte, String maxVidLt, String maxVidGte, String maxVidGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String scopeIdN, String scopeIdLte, String scopeIdLt, String scopeIdGte, String scopeIdGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String scopeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamVlanGroupsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsListValidateBeforeCall(id, name, slug, minVid, maxVid, description, scopeId, created, lastUpdated, q, tag, scopeType, region, sitegroup, site, location, rack, clustergroup, cluster, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, minVidN, minVidLte, minVidLt, minVidGte, minVidGt, maxVidN, maxVidLte, maxVidLt, maxVidGte, maxVidGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, scopeIdN, scopeIdLte, scopeIdLt, scopeIdGte, scopeIdGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, scopeTypeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamVlanGroupsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsPartialUpdate
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsPartialUpdateCall(Integer id, VLANGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsPartialUpdateValidateBeforeCall(Integer id, VLANGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlanGroupsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     *
     * @return VLANGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLANGroup ipamVlanGroupsPartialUpdate(Integer id, VLANGroup data) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VLANGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsPartialUpdateWithHttpInfo(Integer id, VLANGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsPartialUpdateAsync(Integer id, VLANGroup data, final ApiCallback<VLANGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsRead
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     *
     * @return VLANGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLANGroup ipamVlanGroupsRead(Integer id) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     *
     * @return ApiResponse&lt;VLANGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsReadAsync(Integer id, final ApiCallback<VLANGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlanGroupsUpdate
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsUpdateCall(Integer id, VLANGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlan-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlanGroupsUpdateValidateBeforeCall(Integer id, VLANGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlanGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlanGroupsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlanGroupsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     *
     * @return VLANGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLANGroup ipamVlanGroupsUpdate(Integer id, VLANGroup data) throws ApiException {
        ApiResponse<VLANGroup> localVarResp = ipamVlanGroupsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VLANGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLANGroup> ipamVlanGroupsUpdateWithHttpInfo(Integer id, VLANGroup data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlanGroupsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlanGroupsUpdateAsync(Integer id, VLANGroup data, final ApiCallback<VLANGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlanGroupsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VLANGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamVlansBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamVlansBulkDelete() throws ApiException {
        ipamVlansBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamVlansBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamVlansBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansBulkPartialUpdateCall(WritableVLAN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansBulkPartialUpdateValidateBeforeCall(WritableVLAN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlansBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlansBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VLAN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLAN ipamVlansBulkPartialUpdate(WritableVLAN data) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLAN> ipamVlansBulkPartialUpdateWithHttpInfo(WritableVLAN data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansBulkPartialUpdateAsync(WritableVLAN data, final ApiCallback<VLAN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansBulkUpdateCall(WritableVLAN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansBulkUpdateValidateBeforeCall(WritableVLAN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlansBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlansBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VLAN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLAN ipamVlansBulkUpdate(WritableVLAN data) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLAN> ipamVlansBulkUpdateWithHttpInfo(WritableVLAN data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansBulkUpdateAsync(WritableVLAN data, final ApiCallback<VLAN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansCreateCall(WritableVLAN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansCreateValidateBeforeCall(WritableVLAN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlansCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlansCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VLAN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLAN ipamVlansCreate(WritableVLAN data) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLAN> ipamVlansCreateWithHttpInfo(WritableVLAN data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansCreateAsync(WritableVLAN data, final ApiCallback<VLAN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansDelete
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlansDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamVlansDelete(Integer id) throws ApiException {
        ipamVlansDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamVlansDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansList
     *
     * @param id (optional)
     * @param vid (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param availableOnDevice (optional)
     * @param availableOnVirtualmachine (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param vidN (optional)
     * @param vidLte (optional)
     * @param vidLt (optional)
     * @param vidGte (optional)
     * @param vidGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansListCall(String id, String vid, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (vid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vid", vid));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }
        
        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }
        
        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }
        
        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }
        
        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }
        
        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }
        
        if (availableOnDevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("available_on_device", availableOnDevice));
        }
        
        if (availableOnVirtualmachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("available_on_virtualmachine", availableOnVirtualmachine));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (vidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vid__n", vidN));
        }
        
        if (vidLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vid__lte", vidLte));
        }
        
        if (vidLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vid__lt", vidLt));
        }
        
        if (vidGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vid__gte", vidGte));
        }
        
        if (vidGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vid__gt", vidGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }
        
        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }
        
        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }
        
        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }
        
        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }
        
        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }
        
        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }
        
        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansListValidateBeforeCall(String id, String vid, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamVlansListCall(id, vid, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, roleId, role, status, availableOnDevice, availableOnVirtualmachine, idN, idLte, idLt, idGte, idGt, vidN, vidLte, vidLt, vidGte, vidGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, roleIdN, roleN, statusN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param vid (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param availableOnDevice (optional)
     * @param availableOnVirtualmachine (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param vidN (optional)
     * @param vidLte (optional)
     * @param vidLt (optional)
     * @param vidGte (optional)
     * @param vidGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamVlansList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamVlansList200Response ipamVlansList(String id, String vid, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamVlansList200Response> localVarResp = ipamVlansListWithHttpInfo(id, vid, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, roleId, role, status, availableOnDevice, availableOnVirtualmachine, idN, idLte, idLt, idGte, idGt, vidN, vidLte, vidLt, vidGte, vidGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, roleIdN, roleN, statusN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param vid (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param availableOnDevice (optional)
     * @param availableOnVirtualmachine (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param vidN (optional)
     * @param vidLte (optional)
     * @param vidLt (optional)
     * @param vidGte (optional)
     * @param vidGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamVlansList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamVlansList200Response> ipamVlansListWithHttpInfo(String id, String vid, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansListValidateBeforeCall(id, vid, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, roleId, role, status, availableOnDevice, availableOnVirtualmachine, idN, idLte, idLt, idGte, idGt, vidN, vidLte, vidLt, vidGte, vidGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, roleIdN, roleN, statusN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamVlansList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param vid (optional)
     * @param name (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param status (optional)
     * @param availableOnDevice (optional)
     * @param availableOnVirtualmachine (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param vidN (optional)
     * @param vidLte (optional)
     * @param vidLt (optional)
     * @param vidGte (optional)
     * @param vidGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansListAsync(String id, String vid, String name, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String roleId, String role, String status, String availableOnDevice, String availableOnVirtualmachine, String idN, String idLte, String idLt, String idGte, String idGt, String vidN, String vidLte, String vidLt, String vidGte, String vidGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String roleIdN, String roleN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamVlansList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansListValidateBeforeCall(id, vid, name, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, roleId, role, status, availableOnDevice, availableOnVirtualmachine, idN, idLte, idLt, idGte, idGt, vidN, vidLte, vidLt, vidGte, vidGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, roleIdN, roleN, statusN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamVlansList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansPartialUpdate
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansPartialUpdateCall(Integer id, WritableVLAN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansPartialUpdateValidateBeforeCall(Integer id, WritableVLAN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlansPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlansPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     *
     * @return VLAN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLAN ipamVlansPartialUpdate(Integer id, WritableVLAN data) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLAN> ipamVlansPartialUpdateWithHttpInfo(Integer id, WritableVLAN data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansPartialUpdateAsync(Integer id, WritableVLAN data, final ApiCallback<VLAN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansRead
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlansReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     *
     * @return VLAN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLAN ipamVlansRead(Integer id) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     *
     * @return ApiResponse&lt;VLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLAN> ipamVlansReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansReadAsync(Integer id, final ApiCallback<VLAN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVlansUpdate
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansUpdateCall(Integer id, WritableVLAN data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vlans/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVlansUpdateValidateBeforeCall(Integer id, WritableVLAN data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVlansUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVlansUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVlansUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     *
     * @return VLAN
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VLAN ipamVlansUpdate(Integer id, WritableVLAN data) throws ApiException {
        ApiResponse<VLAN> localVarResp = ipamVlansUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VLAN&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VLAN> ipamVlansUpdateWithHttpInfo(Integer id, WritableVLAN data) throws ApiException {
        okhttp3.Call localVarCall = ipamVlansUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VLAN. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVlansUpdateAsync(Integer id, WritableVLAN data, final ApiCallback<VLAN> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVlansUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VLAN>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamVrfsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamVrfsBulkDelete() throws ApiException {
        ipamVrfsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamVrfsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsBulkPartialUpdateCall(WritableVRF data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsBulkPartialUpdateValidateBeforeCall(WritableVRF data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVrfsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVrfsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VRF
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VRF ipamVrfsBulkPartialUpdate(WritableVRF data) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VRF&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VRF> ipamVrfsBulkPartialUpdateWithHttpInfo(WritableVRF data) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsBulkPartialUpdateAsync(WritableVRF data, final ApiCallback<VRF> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsBulkUpdateCall(WritableVRF data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsBulkUpdateValidateBeforeCall(WritableVRF data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVrfsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVrfsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VRF
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VRF ipamVrfsBulkUpdate(WritableVRF data) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VRF&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VRF> ipamVrfsBulkUpdateWithHttpInfo(WritableVRF data) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsBulkUpdateAsync(WritableVRF data, final ApiCallback<VRF> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsCreateCall(WritableVRF data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsCreateValidateBeforeCall(WritableVRF data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVrfsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVrfsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VRF
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VRF ipamVrfsCreate(WritableVRF data) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VRF&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VRF> ipamVrfsCreateWithHttpInfo(WritableVRF data) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsCreateAsync(WritableVRF data, final ApiCallback<VRF> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsDelete
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
        
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVrfsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void ipamVrfsDelete(Integer id) throws ApiException {
        ipamVrfsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> ipamVrfsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param rd (optional)
     * @param enforceUnique (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param rdN (optional)
     * @param rdIc (optional)
     * @param rdNic (optional)
     * @param rdIew (optional)
     * @param rdNiew (optional)
     * @param rdIsw (optional)
     * @param rdNisw (optional)
     * @param rdIe (optional)
     * @param rdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsListCall(String id, String name, String rd, String enforceUnique, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (rd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd", rd));
        }
        
        if (enforceUnique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforce_unique", enforceUnique));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (importTargetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target_id", importTargetId));
        }
        
        if (importTarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target", importTarget));
        }
        
        if (exportTargetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target_id", exportTargetId));
        }
        
        if (exportTarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target", exportTarget));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (rdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__n", rdN));
        }
        
        if (rdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__ic", rdIc));
        }
        
        if (rdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__nic", rdNic));
        }
        
        if (rdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__iew", rdIew));
        }
        
        if (rdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__niew", rdNiew));
        }
        
        if (rdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__isw", rdIsw));
        }
        
        if (rdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__nisw", rdNisw));
        }
        
        if (rdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__ie", rdIe));
        }
        
        if (rdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rd__nie", rdNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (importTargetIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target_id__n", importTargetIdN));
        }
        
        if (importTargetN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("import_target__n", importTargetN));
        }
        
        if (exportTargetIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target_id__n", exportTargetIdN));
        }
        
        if (exportTargetN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_target__n", exportTargetN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsListValidateBeforeCall(String id, String name, String rd, String enforceUnique, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = ipamVrfsListCall(id, name, rd, enforceUnique, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, rdN, rdIc, rdNic, rdIew, rdNiew, rdIsw, rdNisw, rdIe, rdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param rd (optional)
     * @param enforceUnique (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param rdN (optional)
     * @param rdIc (optional)
     * @param rdNic (optional)
     * @param rdIew (optional)
     * @param rdNiew (optional)
     * @param rdIsw (optional)
     * @param rdNisw (optional)
     * @param rdIe (optional)
     * @param rdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return IpamVrfsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public IpamVrfsList200Response ipamVrfsList(String id, String name, String rd, String enforceUnique, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<IpamVrfsList200Response> localVarResp = ipamVrfsListWithHttpInfo(id, name, rd, enforceUnique, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, rdN, rdIc, rdNic, rdIew, rdNiew, rdIsw, rdNisw, rdIe, rdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param rd (optional)
     * @param enforceUnique (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param rdN (optional)
     * @param rdIc (optional)
     * @param rdNic (optional)
     * @param rdIew (optional)
     * @param rdNiew (optional)
     * @param rdIsw (optional)
     * @param rdNisw (optional)
     * @param rdIe (optional)
     * @param rdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;IpamVrfsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IpamVrfsList200Response> ipamVrfsListWithHttpInfo(String id, String name, String rd, String enforceUnique, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsListValidateBeforeCall(id, name, rd, enforceUnique, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, rdN, rdIc, rdNic, rdIew, rdNiew, rdIsw, rdNisw, rdIe, rdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<IpamVrfsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param rd (optional)
     * @param enforceUnique (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param importTargetId (optional)
     * @param importTarget (optional)
     * @param exportTargetId (optional)
     * @param exportTarget (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param rdN (optional)
     * @param rdIc (optional)
     * @param rdNic (optional)
     * @param rdIew (optional)
     * @param rdNiew (optional)
     * @param rdIsw (optional)
     * @param rdNisw (optional)
     * @param rdIe (optional)
     * @param rdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param importTargetIdN (optional)
     * @param importTargetN (optional)
     * @param exportTargetIdN (optional)
     * @param exportTargetN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsListAsync(String id, String name, String rd, String enforceUnique, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String importTargetId, String importTarget, String exportTargetId, String exportTarget, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String rdN, String rdIc, String rdNic, String rdIew, String rdNiew, String rdIsw, String rdNisw, String rdIe, String rdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String importTargetIdN, String importTargetN, String exportTargetIdN, String exportTargetN, String ordering, Integer limit, Integer offset, final ApiCallback<IpamVrfsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsListValidateBeforeCall(id, name, rd, enforceUnique, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, importTargetId, importTarget, exportTargetId, exportTarget, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, rdN, rdIc, rdNic, rdIew, rdNiew, rdIsw, rdNisw, rdIe, rdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, importTargetIdN, importTargetN, exportTargetIdN, exportTargetN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<IpamVrfsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsPartialUpdate
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsPartialUpdateCall(Integer id, WritableVRF data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsPartialUpdateValidateBeforeCall(Integer id, WritableVRF data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVrfsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVrfsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     *
     * @return VRF
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VRF ipamVrfsPartialUpdate(Integer id, WritableVRF data) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VRF&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VRF> ipamVrfsPartialUpdateWithHttpInfo(Integer id, WritableVRF data) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsPartialUpdateAsync(Integer id, WritableVRF data, final ApiCallback<VRF> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsRead
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
        
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVrfsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     *
     * @return VRF
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VRF ipamVrfsRead(Integer id) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     *
     * @return ApiResponse&lt;VRF&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VRF> ipamVrfsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsReadAsync(Integer id, final ApiCallback<VRF> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for ipamVrfsUpdate
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsUpdateCall(Integer id, WritableVRF data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/ipam/vrfs/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipamVrfsUpdateValidateBeforeCall(Integer id, WritableVRF data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipamVrfsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling ipamVrfsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = ipamVrfsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     *
     * @return VRF
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VRF ipamVrfsUpdate(Integer id, WritableVRF data) throws ApiException {
        ApiResponse<VRF> localVarResp = ipamVrfsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VRF&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VRF> ipamVrfsUpdateWithHttpInfo(Integer id, WritableVRF data) throws ApiException {
        okhttp3.Call localVarCall = ipamVrfsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this VRF. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call ipamVrfsUpdateAsync(Integer id, WritableVRF data, final ApiCallback<VRF> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = ipamVrfsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VRF>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
