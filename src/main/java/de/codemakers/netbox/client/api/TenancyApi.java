/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.api;

import com.google.gson.reflect.TypeToken;
import de.codemakers.netbox.client.*;
import de.codemakers.netbox.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TenancyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    
    public TenancyApi() {
        this(Configuration.getDefaultApiClient());
    }
    
    public TenancyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    
    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public int getHostIndex() {
        return localHostIndex;
    }
    
    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }
    
    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }
    
    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }
    
    /**
     * Build call for tenancyContactAssignmentsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactAssignmentsBulkDelete() throws ApiException {
        tenancyContactAssignmentsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactAssignmentsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsBulkPartialUpdateCall(WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsBulkPartialUpdateValidateBeforeCall(WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactAssignmentsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactAssignment tenancyContactAssignmentsBulkPartialUpdate(WritableContactAssignment data) throws ApiException {
        ApiResponse<ContactAssignment> localVarResp = tenancyContactAssignmentsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactAssignment> tenancyContactAssignmentsBulkPartialUpdateWithHttpInfo(WritableContactAssignment data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsBulkPartialUpdateAsync(WritableContactAssignment data, final ApiCallback<ContactAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsBulkUpdateCall(WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsBulkUpdateValidateBeforeCall(WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactAssignmentsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactAssignment tenancyContactAssignmentsBulkUpdate(WritableContactAssignment data) throws ApiException {
        ApiResponse<ContactAssignment> localVarResp = tenancyContactAssignmentsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactAssignment> tenancyContactAssignmentsBulkUpdateWithHttpInfo(WritableContactAssignment data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsBulkUpdateAsync(WritableContactAssignment data, final ApiCallback<ContactAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsCreateCall(WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsCreateValidateBeforeCall(WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactAssignmentsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactAssignment tenancyContactAssignmentsCreate(WritableContactAssignment data) throws ApiException {
        ApiResponse<ContactAssignment> localVarResp = tenancyContactAssignmentsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactAssignment> tenancyContactAssignmentsCreateWithHttpInfo(WritableContactAssignment data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsCreateAsync(WritableContactAssignment data, final ApiCallback<ContactAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsDelete
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactAssignmentsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactAssignmentsDelete(Integer id) throws ApiException {
        tenancyContactAssignmentsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactAssignmentsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsList
     *
     * @param id (optional)
     * @param contentTypeId (optional)
     * @param objectId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param contentType (optional)
     * @param contactId (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param contentTypeIdN (optional)
     * @param objectIdN (optional)
     * @param objectIdLte (optional)
     * @param objectIdLt (optional)
     * @param objectIdGte (optional)
     * @param objectIdGt (optional)
     * @param priorityN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param contentTypeN (optional)
     * @param contactIdN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsListCall(String id, String contentTypeId, String objectId, String priority, String created, String lastUpdated, String contentType, String contactId, String roleId, String role, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String priorityN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String contentTypeN, String contactIdN, String roleIdN, String roleN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (contentTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id", contentTypeId));
        }
        
        if (objectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id", objectId));
        }
        
        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }
        
        if (contactId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_id", contactId));
        }
        
        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }
        
        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (contentTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__n", contentTypeIdN));
        }
        
        if (objectIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__n", objectIdN));
        }
        
        if (objectIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__lte", objectIdLte));
        }
        
        if (objectIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__lt", objectIdLt));
        }
        
        if (objectIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__gte", objectIdGte));
        }
        
        if (objectIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__gt", objectIdGt));
        }
        
        if (priorityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority__n", priorityN));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (contentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type__n", contentTypeN));
        }
        
        if (contactIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_id__n", contactIdN));
        }
        
        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }
        
        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsListValidateBeforeCall(String id, String contentTypeId, String objectId, String priority, String created, String lastUpdated, String contentType, String contactId, String roleId, String role, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String priorityN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String contentTypeN, String contactIdN, String roleIdN, String roleN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsListCall(id, contentTypeId, objectId, priority, created, lastUpdated, contentType, contactId, roleId, role, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, priorityN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, contentTypeN, contactIdN, roleIdN, roleN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param contentTypeId (optional)
     * @param objectId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param contentType (optional)
     * @param contactId (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param contentTypeIdN (optional)
     * @param objectIdN (optional)
     * @param objectIdLte (optional)
     * @param objectIdLt (optional)
     * @param objectIdGte (optional)
     * @param objectIdGt (optional)
     * @param priorityN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param contentTypeN (optional)
     * @param contactIdN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return TenancyContactAssignmentsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenancyContactAssignmentsList200Response tenancyContactAssignmentsList(String id, String contentTypeId, String objectId, String priority, String created, String lastUpdated, String contentType, String contactId, String roleId, String role, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String priorityN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String contentTypeN, String contactIdN, String roleIdN, String roleN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TenancyContactAssignmentsList200Response> localVarResp = tenancyContactAssignmentsListWithHttpInfo(id, contentTypeId, objectId, priority, created, lastUpdated, contentType, contactId, roleId, role, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, priorityN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, contentTypeN, contactIdN, roleIdN, roleN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param contentTypeId (optional)
     * @param objectId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param contentType (optional)
     * @param contactId (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param contentTypeIdN (optional)
     * @param objectIdN (optional)
     * @param objectIdLte (optional)
     * @param objectIdLt (optional)
     * @param objectIdGte (optional)
     * @param objectIdGt (optional)
     * @param priorityN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param contentTypeN (optional)
     * @param contactIdN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;TenancyContactAssignmentsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenancyContactAssignmentsList200Response> tenancyContactAssignmentsListWithHttpInfo(String id, String contentTypeId, String objectId, String priority, String created, String lastUpdated, String contentType, String contactId, String roleId, String role, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String priorityN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String contentTypeN, String contactIdN, String roleIdN, String roleN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsListValidateBeforeCall(id, contentTypeId, objectId, priority, created, lastUpdated, contentType, contactId, roleId, role, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, priorityN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, contentTypeN, contactIdN, roleIdN, roleN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<TenancyContactAssignmentsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param contentTypeId (optional)
     * @param objectId (optional)
     * @param priority (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param contentType (optional)
     * @param contactId (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param contentTypeIdN (optional)
     * @param objectIdN (optional)
     * @param objectIdLte (optional)
     * @param objectIdLt (optional)
     * @param objectIdGte (optional)
     * @param objectIdGt (optional)
     * @param priorityN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param contentTypeN (optional)
     * @param contactIdN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsListAsync(String id, String contentTypeId, String objectId, String priority, String created, String lastUpdated, String contentType, String contactId, String roleId, String role, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String priorityN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String contentTypeN, String contactIdN, String roleIdN, String roleN, String ordering, Integer limit, Integer offset, final ApiCallback<TenancyContactAssignmentsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsListValidateBeforeCall(id, contentTypeId, objectId, priority, created, lastUpdated, contentType, contactId, roleId, role, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, priorityN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, contentTypeN, contactIdN, roleIdN, roleN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TenancyContactAssignmentsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsPartialUpdate
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsPartialUpdateCall(Integer id, WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsPartialUpdateValidateBeforeCall(Integer id, WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactAssignmentsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactAssignmentsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     *
     * @return ContactAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactAssignment tenancyContactAssignmentsPartialUpdate(Integer id, WritableContactAssignment data) throws ApiException {
        ApiResponse<ContactAssignment> localVarResp = tenancyContactAssignmentsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactAssignment> tenancyContactAssignmentsPartialUpdateWithHttpInfo(Integer id, WritableContactAssignment data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsPartialUpdateAsync(Integer id, WritableContactAssignment data, final ApiCallback<ContactAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsRead
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactAssignmentsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     *
     * @return ContactAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactAssignment tenancyContactAssignmentsRead(Integer id) throws ApiException {
        ApiResponse<ContactAssignment> localVarResp = tenancyContactAssignmentsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     *
     * @return ApiResponse&lt;ContactAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactAssignment> tenancyContactAssignmentsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsReadAsync(Integer id, final ApiCallback<ContactAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactAssignmentsUpdate
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsUpdateCall(Integer id, WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-assignments/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactAssignmentsUpdateValidateBeforeCall(Integer id, WritableContactAssignment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactAssignmentsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactAssignmentsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     *
     * @return ContactAssignment
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactAssignment tenancyContactAssignmentsUpdate(Integer id, WritableContactAssignment data) throws ApiException {
        ApiResponse<ContactAssignment> localVarResp = tenancyContactAssignmentsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactAssignment&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactAssignment> tenancyContactAssignmentsUpdateWithHttpInfo(Integer id, WritableContactAssignment data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactAssignmentsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact assignment. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactAssignmentsUpdateAsync(Integer id, WritableContactAssignment data, final ApiCallback<ContactAssignment> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactAssignmentsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ContactAssignment>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactGroupsBulkDelete() throws ApiException {
        tenancyContactGroupsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsBulkPartialUpdateCall(WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsBulkPartialUpdateValidateBeforeCall(WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactGroupsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactGroup tenancyContactGroupsBulkPartialUpdate(WritableContactGroup data) throws ApiException {
        ApiResponse<ContactGroup> localVarResp = tenancyContactGroupsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactGroup> tenancyContactGroupsBulkPartialUpdateWithHttpInfo(WritableContactGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsBulkPartialUpdateAsync(WritableContactGroup data, final ApiCallback<ContactGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsBulkUpdateCall(WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsBulkUpdateValidateBeforeCall(WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactGroupsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactGroup tenancyContactGroupsBulkUpdate(WritableContactGroup data) throws ApiException {
        ApiResponse<ContactGroup> localVarResp = tenancyContactGroupsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactGroup> tenancyContactGroupsBulkUpdateWithHttpInfo(WritableContactGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsBulkUpdateAsync(WritableContactGroup data, final ApiCallback<ContactGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsCreateCall(WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsCreateValidateBeforeCall(WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactGroupsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactGroup tenancyContactGroupsCreate(WritableContactGroup data) throws ApiException {
        ApiResponse<ContactGroup> localVarResp = tenancyContactGroupsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactGroup> tenancyContactGroupsCreateWithHttpInfo(WritableContactGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsCreateAsync(WritableContactGroup data, final ApiCallback<ContactGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsDelete
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactGroupsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactGroupsDelete(Integer id) throws ApiException {
        tenancyContactGroupsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }
        
        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }
        
        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsListCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return TenancyContactGroupsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenancyContactGroupsList200Response tenancyContactGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TenancyContactGroupsList200Response> localVarResp = tenancyContactGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;TenancyContactGroupsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenancyContactGroupsList200Response> tenancyContactGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<TenancyContactGroupsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<TenancyContactGroupsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TenancyContactGroupsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsPartialUpdate
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsPartialUpdateCall(Integer id, WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsPartialUpdateValidateBeforeCall(Integer id, WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactGroupsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactGroupsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     *
     * @return ContactGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactGroup tenancyContactGroupsPartialUpdate(Integer id, WritableContactGroup data) throws ApiException {
        ApiResponse<ContactGroup> localVarResp = tenancyContactGroupsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactGroup> tenancyContactGroupsPartialUpdateWithHttpInfo(Integer id, WritableContactGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsPartialUpdateAsync(Integer id, WritableContactGroup data, final ApiCallback<ContactGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsRead
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactGroupsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     *
     * @return ContactGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactGroup tenancyContactGroupsRead(Integer id) throws ApiException {
        ApiResponse<ContactGroup> localVarResp = tenancyContactGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     *
     * @return ApiResponse&lt;ContactGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactGroup> tenancyContactGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsReadAsync(Integer id, final ApiCallback<ContactGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactGroupsUpdate
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsUpdateCall(Integer id, WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactGroupsUpdateValidateBeforeCall(Integer id, WritableContactGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactGroupsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactGroupsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     *
     * @return ContactGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactGroup tenancyContactGroupsUpdate(Integer id, WritableContactGroup data) throws ApiException {
        ApiResponse<ContactGroup> localVarResp = tenancyContactGroupsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactGroup> tenancyContactGroupsUpdateWithHttpInfo(Integer id, WritableContactGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactGroupsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactGroupsUpdateAsync(Integer id, WritableContactGroup data, final ApiCallback<ContactGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactGroupsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ContactGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactRolesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactRolesBulkDelete() throws ApiException {
        tenancyContactRolesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesBulkPartialUpdateCall(ContactRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesBulkPartialUpdateValidateBeforeCall(ContactRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactRolesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactRolesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactRole
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactRole tenancyContactRolesBulkPartialUpdate(ContactRole data) throws ApiException {
        ApiResponse<ContactRole> localVarResp = tenancyContactRolesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactRole&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactRole> tenancyContactRolesBulkPartialUpdateWithHttpInfo(ContactRole data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesBulkPartialUpdateAsync(ContactRole data, final ApiCallback<ContactRole> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesBulkUpdateCall(ContactRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesBulkUpdateValidateBeforeCall(ContactRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactRolesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactRolesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactRole
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactRole tenancyContactRolesBulkUpdate(ContactRole data) throws ApiException {
        ApiResponse<ContactRole> localVarResp = tenancyContactRolesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactRole&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactRole> tenancyContactRolesBulkUpdateWithHttpInfo(ContactRole data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesBulkUpdateAsync(ContactRole data, final ApiCallback<ContactRole> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesCreateCall(ContactRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesCreateValidateBeforeCall(ContactRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactRolesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactRolesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ContactRole
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactRole tenancyContactRolesCreate(ContactRole data) throws ApiException {
        ApiResponse<ContactRole> localVarResp = tenancyContactRolesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactRole&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactRole> tenancyContactRolesCreateWithHttpInfo(ContactRole data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesCreateAsync(ContactRole data, final ApiCallback<ContactRole> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesDelete
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactRolesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactRolesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactRolesDelete(Integer id) throws ApiException {
        tenancyContactRolesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactRolesListCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return TenancyContactRolesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenancyContactRolesList200Response tenancyContactRolesList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TenancyContactRolesList200Response> localVarResp = tenancyContactRolesListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;TenancyContactRolesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenancyContactRolesList200Response> tenancyContactRolesListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<TenancyContactRolesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<TenancyContactRolesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TenancyContactRolesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesPartialUpdate
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesPartialUpdateCall(Integer id, ContactRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesPartialUpdateValidateBeforeCall(Integer id, ContactRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactRolesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactRolesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactRolesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     *
     * @return ContactRole
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactRole tenancyContactRolesPartialUpdate(Integer id, ContactRole data) throws ApiException {
        ApiResponse<ContactRole> localVarResp = tenancyContactRolesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactRole&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactRole> tenancyContactRolesPartialUpdateWithHttpInfo(Integer id, ContactRole data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesPartialUpdateAsync(Integer id, ContactRole data, final ApiCallback<ContactRole> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesRead
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactRolesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactRolesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     *
     * @return ContactRole
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactRole tenancyContactRolesRead(Integer id) throws ApiException {
        ApiResponse<ContactRole> localVarResp = tenancyContactRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     *
     * @return ApiResponse&lt;ContactRole&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactRole> tenancyContactRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesReadAsync(Integer id, final ApiCallback<ContactRole> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactRolesUpdate
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesUpdateCall(Integer id, ContactRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contact-roles/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactRolesUpdateValidateBeforeCall(Integer id, ContactRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactRolesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactRolesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactRolesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     *
     * @return ContactRole
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ContactRole tenancyContactRolesUpdate(Integer id, ContactRole data) throws ApiException {
        ApiResponse<ContactRole> localVarResp = tenancyContactRolesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ContactRole&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ContactRole> tenancyContactRolesUpdateWithHttpInfo(Integer id, ContactRole data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactRolesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact role. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactRolesUpdateAsync(Integer id, ContactRole data, final ApiCallback<ContactRole> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactRolesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ContactRole>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactsBulkDelete() throws ApiException {
        tenancyContactsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsBulkPartialUpdateCall(WritableContact data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsBulkPartialUpdateValidateBeforeCall(WritableContact data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Contact
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Contact tenancyContactsBulkPartialUpdate(WritableContact data) throws ApiException {
        ApiResponse<Contact> localVarResp = tenancyContactsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Contact&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Contact> tenancyContactsBulkPartialUpdateWithHttpInfo(WritableContact data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsBulkPartialUpdateAsync(WritableContact data, final ApiCallback<Contact> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsBulkUpdateCall(WritableContact data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsBulkUpdateValidateBeforeCall(WritableContact data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Contact
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Contact tenancyContactsBulkUpdate(WritableContact data) throws ApiException {
        ApiResponse<Contact> localVarResp = tenancyContactsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Contact&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Contact> tenancyContactsBulkUpdateWithHttpInfo(WritableContact data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsBulkUpdateAsync(WritableContact data, final ApiCallback<Contact> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsCreateCall(WritableContact data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsCreateValidateBeforeCall(WritableContact data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Contact
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Contact tenancyContactsCreate(WritableContact data) throws ApiException {
        ApiResponse<Contact> localVarResp = tenancyContactsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Contact&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Contact> tenancyContactsCreateWithHttpInfo(WritableContact data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsCreateAsync(WritableContact data, final ApiCallback<Contact> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsDelete
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyContactsDelete(Integer id) throws ApiException {
        tenancyContactsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyContactsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param title (optional)
     * @param phone (optional)
     * @param email (optional)
     * @param address (optional)
     * @param link (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param titleN (optional)
     * @param titleIc (optional)
     * @param titleNic (optional)
     * @param titleIew (optional)
     * @param titleNiew (optional)
     * @param titleIsw (optional)
     * @param titleNisw (optional)
     * @param titleIe (optional)
     * @param titleNie (optional)
     * @param phoneN (optional)
     * @param phoneIc (optional)
     * @param phoneNic (optional)
     * @param phoneIew (optional)
     * @param phoneNiew (optional)
     * @param phoneIsw (optional)
     * @param phoneNisw (optional)
     * @param phoneIe (optional)
     * @param phoneNie (optional)
     * @param emailN (optional)
     * @param emailIc (optional)
     * @param emailNic (optional)
     * @param emailIew (optional)
     * @param emailNiew (optional)
     * @param emailIsw (optional)
     * @param emailNisw (optional)
     * @param emailIe (optional)
     * @param emailNie (optional)
     * @param addressN (optional)
     * @param addressIc (optional)
     * @param addressNic (optional)
     * @param addressIew (optional)
     * @param addressNiew (optional)
     * @param addressIsw (optional)
     * @param addressNisw (optional)
     * @param addressIe (optional)
     * @param addressNie (optional)
     * @param linkN (optional)
     * @param linkIc (optional)
     * @param linkNic (optional)
     * @param linkIew (optional)
     * @param linkNiew (optional)
     * @param linkIsw (optional)
     * @param linkNisw (optional)
     * @param linkIe (optional)
     * @param linkNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsListCall(String id, String name, String title, String phone, String email, String address, String link, String created, String lastUpdated, String q, String tag, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String titleN, String titleIc, String titleNic, String titleIew, String titleNiew, String titleIsw, String titleNisw, String titleIe, String titleNie, String phoneN, String phoneIc, String phoneNic, String phoneIew, String phoneNiew, String phoneIsw, String phoneNisw, String phoneIe, String phoneNie, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String addressN, String addressIc, String addressNic, String addressIew, String addressNiew, String addressIsw, String addressNisw, String addressIe, String addressNie, String linkN, String linkIc, String linkNic, String linkIew, String linkNiew, String linkIsw, String linkNisw, String linkIe, String linkNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }
        
        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }
        
        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }
        
        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }
        
        if (link != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link", link));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }
        
        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (titleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__n", titleN));
        }
        
        if (titleIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__ic", titleIc));
        }
        
        if (titleNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__nic", titleNic));
        }
        
        if (titleIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__iew", titleIew));
        }
        
        if (titleNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__niew", titleNiew));
        }
        
        if (titleIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__isw", titleIsw));
        }
        
        if (titleNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__nisw", titleNisw));
        }
        
        if (titleIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__ie", titleIe));
        }
        
        if (titleNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title__nie", titleNie));
        }
        
        if (phoneN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__n", phoneN));
        }
        
        if (phoneIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__ic", phoneIc));
        }
        
        if (phoneNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__nic", phoneNic));
        }
        
        if (phoneIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__iew", phoneIew));
        }
        
        if (phoneNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__niew", phoneNiew));
        }
        
        if (phoneIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__isw", phoneIsw));
        }
        
        if (phoneNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__nisw", phoneNisw));
        }
        
        if (phoneIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__ie", phoneIe));
        }
        
        if (phoneNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone__nie", phoneNie));
        }
        
        if (emailN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__n", emailN));
        }
        
        if (emailIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__ic", emailIc));
        }
        
        if (emailNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__nic", emailNic));
        }
        
        if (emailIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__iew", emailIew));
        }
        
        if (emailNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__niew", emailNiew));
        }
        
        if (emailIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__isw", emailIsw));
        }
        
        if (emailNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__nisw", emailNisw));
        }
        
        if (emailIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__ie", emailIe));
        }
        
        if (emailNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email__nie", emailNie));
        }
        
        if (addressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__n", addressN));
        }
        
        if (addressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__ic", addressIc));
        }
        
        if (addressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__nic", addressNic));
        }
        
        if (addressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__iew", addressIew));
        }
        
        if (addressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__niew", addressNiew));
        }
        
        if (addressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__isw", addressIsw));
        }
        
        if (addressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__nisw", addressNisw));
        }
        
        if (addressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__ie", addressIe));
        }
        
        if (addressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address__nie", addressNie));
        }
        
        if (linkN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__n", linkN));
        }
        
        if (linkIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__ic", linkIc));
        }
        
        if (linkNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__nic", linkNic));
        }
        
        if (linkIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__iew", linkIew));
        }
        
        if (linkNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__niew", linkNiew));
        }
        
        if (linkIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__isw", linkIsw));
        }
        
        if (linkNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__nisw", linkNisw));
        }
        
        if (linkIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__ie", linkIe));
        }
        
        if (linkNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link__nie", linkNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }
        
        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsListValidateBeforeCall(String id, String name, String title, String phone, String email, String address, String link, String created, String lastUpdated, String q, String tag, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String titleN, String titleIc, String titleNic, String titleIew, String titleNiew, String titleIsw, String titleNisw, String titleIe, String titleNie, String phoneN, String phoneIc, String phoneNic, String phoneIew, String phoneNiew, String phoneIsw, String phoneNisw, String phoneIe, String phoneNie, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String addressN, String addressIc, String addressNic, String addressIew, String addressNiew, String addressIsw, String addressNisw, String addressIe, String addressNie, String linkN, String linkIc, String linkNic, String linkIew, String linkNiew, String linkIsw, String linkNisw, String linkIe, String linkNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyContactsListCall(id, name, title, phone, email, address, link, created, lastUpdated, q, tag, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, titleN, titleIc, titleNic, titleIew, titleNiew, titleIsw, titleNisw, titleIe, titleNie, phoneN, phoneIc, phoneNic, phoneIew, phoneNiew, phoneIsw, phoneNisw, phoneIe, phoneNie, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, addressN, addressIc, addressNic, addressIew, addressNiew, addressIsw, addressNisw, addressIe, addressNie, linkN, linkIc, linkNic, linkIew, linkNiew, linkIsw, linkNisw, linkIe, linkNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, groupIdN, groupN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param title (optional)
     * @param phone (optional)
     * @param email (optional)
     * @param address (optional)
     * @param link (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param titleN (optional)
     * @param titleIc (optional)
     * @param titleNic (optional)
     * @param titleIew (optional)
     * @param titleNiew (optional)
     * @param titleIsw (optional)
     * @param titleNisw (optional)
     * @param titleIe (optional)
     * @param titleNie (optional)
     * @param phoneN (optional)
     * @param phoneIc (optional)
     * @param phoneNic (optional)
     * @param phoneIew (optional)
     * @param phoneNiew (optional)
     * @param phoneIsw (optional)
     * @param phoneNisw (optional)
     * @param phoneIe (optional)
     * @param phoneNie (optional)
     * @param emailN (optional)
     * @param emailIc (optional)
     * @param emailNic (optional)
     * @param emailIew (optional)
     * @param emailNiew (optional)
     * @param emailIsw (optional)
     * @param emailNisw (optional)
     * @param emailIe (optional)
     * @param emailNie (optional)
     * @param addressN (optional)
     * @param addressIc (optional)
     * @param addressNic (optional)
     * @param addressIew (optional)
     * @param addressNiew (optional)
     * @param addressIsw (optional)
     * @param addressNisw (optional)
     * @param addressIe (optional)
     * @param addressNie (optional)
     * @param linkN (optional)
     * @param linkIc (optional)
     * @param linkNic (optional)
     * @param linkIew (optional)
     * @param linkNiew (optional)
     * @param linkIsw (optional)
     * @param linkNisw (optional)
     * @param linkIe (optional)
     * @param linkNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return TenancyContactsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenancyContactsList200Response tenancyContactsList(String id, String name, String title, String phone, String email, String address, String link, String created, String lastUpdated, String q, String tag, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String titleN, String titleIc, String titleNic, String titleIew, String titleNiew, String titleIsw, String titleNisw, String titleIe, String titleNie, String phoneN, String phoneIc, String phoneNic, String phoneIew, String phoneNiew, String phoneIsw, String phoneNisw, String phoneIe, String phoneNie, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String addressN, String addressIc, String addressNic, String addressIew, String addressNiew, String addressIsw, String addressNisw, String addressIe, String addressNie, String linkN, String linkIc, String linkNic, String linkIew, String linkNiew, String linkIsw, String linkNisw, String linkIe, String linkNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TenancyContactsList200Response> localVarResp = tenancyContactsListWithHttpInfo(id, name, title, phone, email, address, link, created, lastUpdated, q, tag, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, titleN, titleIc, titleNic, titleIew, titleNiew, titleIsw, titleNisw, titleIe, titleNie, phoneN, phoneIc, phoneNic, phoneIew, phoneNiew, phoneIsw, phoneNisw, phoneIe, phoneNie, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, addressN, addressIc, addressNic, addressIew, addressNiew, addressIsw, addressNisw, addressIe, addressNie, linkN, linkIc, linkNic, linkIew, linkNiew, linkIsw, linkNisw, linkIe, linkNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, groupIdN, groupN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param title (optional)
     * @param phone (optional)
     * @param email (optional)
     * @param address (optional)
     * @param link (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param titleN (optional)
     * @param titleIc (optional)
     * @param titleNic (optional)
     * @param titleIew (optional)
     * @param titleNiew (optional)
     * @param titleIsw (optional)
     * @param titleNisw (optional)
     * @param titleIe (optional)
     * @param titleNie (optional)
     * @param phoneN (optional)
     * @param phoneIc (optional)
     * @param phoneNic (optional)
     * @param phoneIew (optional)
     * @param phoneNiew (optional)
     * @param phoneIsw (optional)
     * @param phoneNisw (optional)
     * @param phoneIe (optional)
     * @param phoneNie (optional)
     * @param emailN (optional)
     * @param emailIc (optional)
     * @param emailNic (optional)
     * @param emailIew (optional)
     * @param emailNiew (optional)
     * @param emailIsw (optional)
     * @param emailNisw (optional)
     * @param emailIe (optional)
     * @param emailNie (optional)
     * @param addressN (optional)
     * @param addressIc (optional)
     * @param addressNic (optional)
     * @param addressIew (optional)
     * @param addressNiew (optional)
     * @param addressIsw (optional)
     * @param addressNisw (optional)
     * @param addressIe (optional)
     * @param addressNie (optional)
     * @param linkN (optional)
     * @param linkIc (optional)
     * @param linkNic (optional)
     * @param linkIew (optional)
     * @param linkNiew (optional)
     * @param linkIsw (optional)
     * @param linkNisw (optional)
     * @param linkIe (optional)
     * @param linkNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;TenancyContactsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenancyContactsList200Response> tenancyContactsListWithHttpInfo(String id, String name, String title, String phone, String email, String address, String link, String created, String lastUpdated, String q, String tag, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String titleN, String titleIc, String titleNic, String titleIew, String titleNiew, String titleIsw, String titleNisw, String titleIe, String titleNie, String phoneN, String phoneIc, String phoneNic, String phoneIew, String phoneNiew, String phoneIsw, String phoneNisw, String phoneIe, String phoneNie, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String addressN, String addressIc, String addressNic, String addressIew, String addressNiew, String addressIsw, String addressNisw, String addressIe, String addressNie, String linkN, String linkIc, String linkNic, String linkIew, String linkNiew, String linkIsw, String linkNisw, String linkIe, String linkNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsListValidateBeforeCall(id, name, title, phone, email, address, link, created, lastUpdated, q, tag, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, titleN, titleIc, titleNic, titleIew, titleNiew, titleIsw, titleNisw, titleIe, titleNie, phoneN, phoneIc, phoneNic, phoneIew, phoneNiew, phoneIsw, phoneNisw, phoneIe, phoneNie, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, addressN, addressIc, addressNic, addressIew, addressNiew, addressIsw, addressNisw, addressIe, addressNie, linkN, linkIc, linkNic, linkIew, linkNiew, linkIsw, linkNisw, linkIe, linkNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, groupIdN, groupN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<TenancyContactsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param title (optional)
     * @param phone (optional)
     * @param email (optional)
     * @param address (optional)
     * @param link (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param titleN (optional)
     * @param titleIc (optional)
     * @param titleNic (optional)
     * @param titleIew (optional)
     * @param titleNiew (optional)
     * @param titleIsw (optional)
     * @param titleNisw (optional)
     * @param titleIe (optional)
     * @param titleNie (optional)
     * @param phoneN (optional)
     * @param phoneIc (optional)
     * @param phoneNic (optional)
     * @param phoneIew (optional)
     * @param phoneNiew (optional)
     * @param phoneIsw (optional)
     * @param phoneNisw (optional)
     * @param phoneIe (optional)
     * @param phoneNie (optional)
     * @param emailN (optional)
     * @param emailIc (optional)
     * @param emailNic (optional)
     * @param emailIew (optional)
     * @param emailNiew (optional)
     * @param emailIsw (optional)
     * @param emailNisw (optional)
     * @param emailIe (optional)
     * @param emailNie (optional)
     * @param addressN (optional)
     * @param addressIc (optional)
     * @param addressNic (optional)
     * @param addressIew (optional)
     * @param addressNiew (optional)
     * @param addressIsw (optional)
     * @param addressNisw (optional)
     * @param addressIe (optional)
     * @param addressNie (optional)
     * @param linkN (optional)
     * @param linkIc (optional)
     * @param linkNic (optional)
     * @param linkIew (optional)
     * @param linkNiew (optional)
     * @param linkIsw (optional)
     * @param linkNisw (optional)
     * @param linkIe (optional)
     * @param linkNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsListAsync(String id, String name, String title, String phone, String email, String address, String link, String created, String lastUpdated, String q, String tag, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String titleN, String titleIc, String titleNic, String titleIew, String titleNiew, String titleIsw, String titleNisw, String titleIe, String titleNie, String phoneN, String phoneIc, String phoneNic, String phoneIew, String phoneNiew, String phoneIsw, String phoneNisw, String phoneIe, String phoneNie, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String addressN, String addressIc, String addressNic, String addressIew, String addressNiew, String addressIsw, String addressNisw, String addressIe, String addressNie, String linkN, String linkIc, String linkNic, String linkIew, String linkNiew, String linkIsw, String linkNisw, String linkIe, String linkNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset, final ApiCallback<TenancyContactsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsListValidateBeforeCall(id, name, title, phone, email, address, link, created, lastUpdated, q, tag, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, titleN, titleIc, titleNic, titleIew, titleNiew, titleIsw, titleNisw, titleIe, titleNie, phoneN, phoneIc, phoneNic, phoneIew, phoneNiew, phoneIsw, phoneNisw, phoneIe, phoneNie, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, addressN, addressIc, addressNic, addressIew, addressNiew, addressIsw, addressNisw, addressIe, addressNie, linkN, linkIc, linkNic, linkIew, linkNiew, linkIsw, linkNisw, linkIe, linkNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, groupIdN, groupN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TenancyContactsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsPartialUpdate
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsPartialUpdateCall(Integer id, WritableContact data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsPartialUpdateValidateBeforeCall(Integer id, WritableContact data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     *
     * @return Contact
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Contact tenancyContactsPartialUpdate(Integer id, WritableContact data) throws ApiException {
        ApiResponse<Contact> localVarResp = tenancyContactsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Contact&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Contact> tenancyContactsPartialUpdateWithHttpInfo(Integer id, WritableContact data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsPartialUpdateAsync(Integer id, WritableContact data, final ApiCallback<Contact> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsRead
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     *
     * @return Contact
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Contact tenancyContactsRead(Integer id) throws ApiException {
        ApiResponse<Contact> localVarResp = tenancyContactsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     *
     * @return ApiResponse&lt;Contact&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Contact> tenancyContactsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsReadAsync(Integer id, final ApiCallback<Contact> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyContactsUpdate
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsUpdateCall(Integer id, WritableContact data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/contacts/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyContactsUpdateValidateBeforeCall(Integer id, WritableContact data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyContactsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyContactsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyContactsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     *
     * @return Contact
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Contact tenancyContactsUpdate(Integer id, WritableContact data) throws ApiException {
        ApiResponse<Contact> localVarResp = tenancyContactsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Contact&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Contact> tenancyContactsUpdateWithHttpInfo(Integer id, WritableContact data) throws ApiException {
        okhttp3.Call localVarCall = tenancyContactsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this contact. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyContactsUpdateAsync(Integer id, WritableContact data, final ApiCallback<Contact> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyContactsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Contact>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyTenantGroupsBulkDelete() throws ApiException {
        tenancyTenantGroupsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyTenantGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsBulkPartialUpdateCall(WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsBulkPartialUpdateValidateBeforeCall(WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantGroupsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return TenantGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenantGroup tenancyTenantGroupsBulkPartialUpdate(WritableTenantGroup data) throws ApiException {
        ApiResponse<TenantGroup> localVarResp = tenancyTenantGroupsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;TenantGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenantGroup> tenancyTenantGroupsBulkPartialUpdateWithHttpInfo(WritableTenantGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsBulkPartialUpdateAsync(WritableTenantGroup data, final ApiCallback<TenantGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsBulkUpdateCall(WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsBulkUpdateValidateBeforeCall(WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantGroupsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return TenantGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenantGroup tenancyTenantGroupsBulkUpdate(WritableTenantGroup data) throws ApiException {
        ApiResponse<TenantGroup> localVarResp = tenancyTenantGroupsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;TenantGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenantGroup> tenancyTenantGroupsBulkUpdateWithHttpInfo(WritableTenantGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsBulkUpdateAsync(WritableTenantGroup data, final ApiCallback<TenantGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsCreateCall(WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsCreateValidateBeforeCall(WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantGroupsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return TenantGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenantGroup tenancyTenantGroupsCreate(WritableTenantGroup data) throws ApiException {
        ApiResponse<TenantGroup> localVarResp = tenancyTenantGroupsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;TenantGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenantGroup> tenancyTenantGroupsCreateWithHttpInfo(WritableTenantGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsCreateAsync(WritableTenantGroup data, final ApiCallback<TenantGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsDelete
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantGroupsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyTenantGroupsDelete(Integer id) throws ApiException {
        tenancyTenantGroupsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyTenantGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }
        
        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }
        
        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsListCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return TenancyTenantGroupsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenancyTenantGroupsList200Response tenancyTenantGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TenancyTenantGroupsList200Response> localVarResp = tenancyTenantGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;TenancyTenantGroupsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenancyTenantGroupsList200Response> tenancyTenantGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<TenancyTenantGroupsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param parentId (optional)
     * @param parent (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param parentIdN (optional)
     * @param parentN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<TenancyTenantGroupsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TenancyTenantGroupsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsPartialUpdate
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsPartialUpdateCall(Integer id, WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsPartialUpdateValidateBeforeCall(Integer id, WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantGroupsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantGroupsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     *
     * @return TenantGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenantGroup tenancyTenantGroupsPartialUpdate(Integer id, WritableTenantGroup data) throws ApiException {
        ApiResponse<TenantGroup> localVarResp = tenancyTenantGroupsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;TenantGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenantGroup> tenancyTenantGroupsPartialUpdateWithHttpInfo(Integer id, WritableTenantGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsPartialUpdateAsync(Integer id, WritableTenantGroup data, final ApiCallback<TenantGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsRead
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantGroupsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     *
     * @return TenantGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenantGroup tenancyTenantGroupsRead(Integer id) throws ApiException {
        ApiResponse<TenantGroup> localVarResp = tenancyTenantGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     *
     * @return ApiResponse&lt;TenantGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenantGroup> tenancyTenantGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsReadAsync(Integer id, final ApiCallback<TenantGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantGroupsUpdate
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsUpdateCall(Integer id, WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenant-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantGroupsUpdateValidateBeforeCall(Integer id, WritableTenantGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantGroupsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantGroupsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     *
     * @return TenantGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenantGroup tenancyTenantGroupsUpdate(Integer id, WritableTenantGroup data) throws ApiException {
        ApiResponse<TenantGroup> localVarResp = tenancyTenantGroupsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;TenantGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenantGroup> tenancyTenantGroupsUpdateWithHttpInfo(Integer id, WritableTenantGroup data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantGroupsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantGroupsUpdateAsync(Integer id, WritableTenantGroup data, final ApiCallback<TenantGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantGroupsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<TenantGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyTenantsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyTenantsBulkDelete() throws ApiException {
        tenancyTenantsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyTenantsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsBulkPartialUpdateCall(WritableTenant data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsBulkPartialUpdateValidateBeforeCall(WritableTenant data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Tenant
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Tenant tenancyTenantsBulkPartialUpdate(WritableTenant data) throws ApiException {
        ApiResponse<Tenant> localVarResp = tenancyTenantsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Tenant&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Tenant> tenancyTenantsBulkPartialUpdateWithHttpInfo(WritableTenant data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsBulkPartialUpdateAsync(WritableTenant data, final ApiCallback<Tenant> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsBulkUpdateCall(WritableTenant data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsBulkUpdateValidateBeforeCall(WritableTenant data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Tenant
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Tenant tenancyTenantsBulkUpdate(WritableTenant data) throws ApiException {
        ApiResponse<Tenant> localVarResp = tenancyTenantsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Tenant&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Tenant> tenancyTenantsBulkUpdateWithHttpInfo(WritableTenant data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsBulkUpdateAsync(WritableTenant data, final ApiCallback<Tenant> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsCreateCall(WritableTenant data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsCreateValidateBeforeCall(WritableTenant data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Tenant
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Tenant tenancyTenantsCreate(WritableTenant data) throws ApiException {
        ApiResponse<Tenant> localVarResp = tenancyTenantsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Tenant&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Tenant> tenancyTenantsCreateWithHttpInfo(WritableTenant data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsCreateAsync(WritableTenant data, final ApiCallback<Tenant> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsDelete
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void tenancyTenantsDelete(Integer id) throws ApiException {
        tenancyTenantsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> tenancyTenantsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }
        
        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }
        
        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }
        
        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }
        
        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }
        
        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }
        
        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }
        
        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }
        
        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = tenancyTenantsListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, groupIdN, groupN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return TenancyTenantsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public TenancyTenantsList200Response tenancyTenantsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TenancyTenantsList200Response> localVarResp = tenancyTenantsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, groupIdN, groupN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;TenancyTenantsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TenancyTenantsList200Response> tenancyTenantsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, groupIdN, groupN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<TenancyTenantsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String groupIdN, String groupN, String ordering, Integer limit, Integer offset, final ApiCallback<TenancyTenantsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, groupIdN, groupN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TenancyTenantsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsPartialUpdate
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsPartialUpdateCall(Integer id, WritableTenant data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsPartialUpdateValidateBeforeCall(Integer id, WritableTenant data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     *
     * @return Tenant
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Tenant tenancyTenantsPartialUpdate(Integer id, WritableTenant data) throws ApiException {
        ApiResponse<Tenant> localVarResp = tenancyTenantsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Tenant&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Tenant> tenancyTenantsPartialUpdateWithHttpInfo(Integer id, WritableTenant data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsPartialUpdateAsync(Integer id, WritableTenant data, final ApiCallback<Tenant> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsRead
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     *
     * @return Tenant
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Tenant tenancyTenantsRead(Integer id) throws ApiException {
        ApiResponse<Tenant> localVarResp = tenancyTenantsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     *
     * @return ApiResponse&lt;Tenant&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Tenant> tenancyTenantsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsReadAsync(Integer id, final ApiCallback<Tenant> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for tenancyTenantsUpdate
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsUpdateCall(Integer id, WritableTenant data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/tenancy/tenants/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenancyTenantsUpdateValidateBeforeCall(Integer id, WritableTenant data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenancyTenantsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling tenancyTenantsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = tenancyTenantsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     *
     * @return Tenant
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Tenant tenancyTenantsUpdate(Integer id, WritableTenant data) throws ApiException {
        ApiResponse<Tenant> localVarResp = tenancyTenantsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Tenant&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Tenant> tenancyTenantsUpdateWithHttpInfo(Integer id, WritableTenant data) throws ApiException {
        okhttp3.Call localVarCall = tenancyTenantsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this tenant. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call tenancyTenantsUpdateAsync(Integer id, WritableTenant data, final ApiCallback<Tenant> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = tenancyTenantsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Tenant>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
