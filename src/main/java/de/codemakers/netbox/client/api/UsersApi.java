/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Pair;

import de.codemakers.netbox.client.model.Group;
import de.codemakers.netbox.client.model.ObjectPermission;
import de.codemakers.netbox.client.model.Token;
import de.codemakers.netbox.client.model.User;
import de.codemakers.netbox.client.model.UsersGroupsList200Response;
import de.codemakers.netbox.client.model.UsersPermissionsList200Response;
import de.codemakers.netbox.client.model.UsersTokensList200Response;
import de.codemakers.netbox.client.model.UsersUsersList200Response;
import de.codemakers.netbox.client.model.WritableObjectPermission;
import de.codemakers.netbox.client.model.WritableToken;
import de.codemakers.netbox.client.model.WritableUser;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T18:36:37.665487300+02:00[Europe/Berlin]")
public class UsersApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UsersApi() {
    this(new ApiClient());
  }

  public UsersApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Return the UserConfig for the currently authenticated User.
   * @throws ApiException if fails to make API call
   */
  public void usersConfigList() throws ApiException {
    usersConfigListWithHttpInfo();
  }

  /**
   * 
   * Return the UserConfig for the currently authenticated User.
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersConfigListWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersConfigListRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersConfigList", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersConfigListRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/config/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void usersGroupsBulkDelete() throws ApiException {
    usersGroupsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersGroupsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group usersGroupsBulkPartialUpdate(Group data) throws ApiException {
    ApiResponse<Group> localVarResponse = usersGroupsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> usersGroupsBulkPartialUpdateWithHttpInfo(Group data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsBulkPartialUpdateRequestBuilder(Group data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersGroupsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group usersGroupsBulkUpdate(Group data) throws ApiException {
    ApiResponse<Group> localVarResponse = usersGroupsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> usersGroupsBulkUpdateWithHttpInfo(Group data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsBulkUpdateRequestBuilder(Group data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersGroupsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group usersGroupsCreate(Group data) throws ApiException {
    ApiResponse<Group> localVarResponse = usersGroupsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> usersGroupsCreateWithHttpInfo(Group data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsCreate", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsCreateRequestBuilder(Group data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersGroupsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @throws ApiException if fails to make API call
   */
  public void usersGroupsDelete(Integer id) throws ApiException {
    usersGroupsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersGroupsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param nameEmpty  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return UsersGroupsList200Response
   * @throws ApiException if fails to make API call
   */
  public UsersGroupsList200Response usersGroupsList(String id, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, Integer limit, Integer offset) throws ApiException {
    ApiResponse<UsersGroupsList200Response> localVarResponse = usersGroupsListWithHttpInfo(id, name, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param nameEmpty  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;UsersGroupsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UsersGroupsList200Response> usersGroupsListWithHttpInfo(String id, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsListRequestBuilder(id, name, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsList", localVarResponse);
        }
        return new ApiResponse<UsersGroupsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UsersGroupsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsListRequestBuilder(String id, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__empty", nameEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @param data  (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group usersGroupsPartialUpdate(Integer id, Group data) throws ApiException {
    ApiResponse<Group> localVarResponse = usersGroupsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> usersGroupsPartialUpdateWithHttpInfo(Integer id, Group data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsPartialUpdateRequestBuilder(Integer id, Group data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersGroupsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersGroupsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group usersGroupsRead(Integer id) throws ApiException {
    ApiResponse<Group> localVarResponse = usersGroupsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> usersGroupsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsRead", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersGroupsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @param data  (required)
   * @return Group
   * @throws ApiException if fails to make API call
   */
  public Group usersGroupsUpdate(Integer id, Group data) throws ApiException {
    ApiResponse<Group> localVarResponse = usersGroupsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Group> usersGroupsUpdateWithHttpInfo(Integer id, Group data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersGroupsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersGroupsUpdate", localVarResponse);
        }
        return new ApiResponse<Group>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Group>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersGroupsUpdateRequestBuilder(Integer id, Group data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersGroupsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersGroupsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void usersPermissionsBulkDelete() throws ApiException {
    usersPermissionsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersPermissionsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ObjectPermission
   * @throws ApiException if fails to make API call
   */
  public ObjectPermission usersPermissionsBulkPartialUpdate(WritableObjectPermission data) throws ApiException {
    ApiResponse<ObjectPermission> localVarResponse = usersPermissionsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ObjectPermission&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectPermission> usersPermissionsBulkPartialUpdateWithHttpInfo(WritableObjectPermission data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ObjectPermission>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectPermission>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsBulkPartialUpdateRequestBuilder(WritableObjectPermission data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersPermissionsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ObjectPermission
   * @throws ApiException if fails to make API call
   */
  public ObjectPermission usersPermissionsBulkUpdate(WritableObjectPermission data) throws ApiException {
    ApiResponse<ObjectPermission> localVarResponse = usersPermissionsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ObjectPermission&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectPermission> usersPermissionsBulkUpdateWithHttpInfo(WritableObjectPermission data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ObjectPermission>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectPermission>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsBulkUpdateRequestBuilder(WritableObjectPermission data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersPermissionsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ObjectPermission
   * @throws ApiException if fails to make API call
   */
  public ObjectPermission usersPermissionsCreate(WritableObjectPermission data) throws ApiException {
    ApiResponse<ObjectPermission> localVarResponse = usersPermissionsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ObjectPermission&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectPermission> usersPermissionsCreateWithHttpInfo(WritableObjectPermission data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsCreate", localVarResponse);
        }
        return new ApiResponse<ObjectPermission>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectPermission>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsCreateRequestBuilder(WritableObjectPermission data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersPermissionsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @throws ApiException if fails to make API call
   */
  public void usersPermissionsDelete(Integer id) throws ApiException {
    usersPermissionsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersPermissionsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersPermissionsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param enabled  (optional)
   * @param objectTypes  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param userId  (optional)
   * @param user  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param nameEmpty  (optional)
   * @param objectTypesN  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param descriptionEmpty  (optional)
   * @param userIdN  (optional)
   * @param userN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return UsersPermissionsList200Response
   * @throws ApiException if fails to make API call
   */
  public UsersPermissionsList200Response usersPermissionsList(String id, String name, String enabled, String objectTypes, String description, String q, String userId, String user, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String objectTypesN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String userIdN, String userN, String groupIdN, String groupN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<UsersPermissionsList200Response> localVarResponse = usersPermissionsListWithHttpInfo(id, name, enabled, objectTypes, description, q, userId, user, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, objectTypesN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, userIdN, userN, groupIdN, groupN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param enabled  (optional)
   * @param objectTypes  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param userId  (optional)
   * @param user  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param nameEmpty  (optional)
   * @param objectTypesN  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param descriptionEmpty  (optional)
   * @param userIdN  (optional)
   * @param userN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;UsersPermissionsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UsersPermissionsList200Response> usersPermissionsListWithHttpInfo(String id, String name, String enabled, String objectTypes, String description, String q, String userId, String user, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String objectTypesN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String userIdN, String userN, String groupIdN, String groupN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsListRequestBuilder(id, name, enabled, objectTypes, description, q, userId, user, groupId, group, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, objectTypesN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, userIdN, userN, groupIdN, groupN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsList", localVarResponse);
        }
        return new ApiResponse<UsersPermissionsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UsersPermissionsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsListRequestBuilder(String id, String name, String enabled, String objectTypes, String description, String q, String userId, String user, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String objectTypesN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String userIdN, String userN, String groupIdN, String groupN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabled", enabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_types", objectTypes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user", user));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group", group));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__empty", nameEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_types__n", objectTypesN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__empty", descriptionEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id__n", userIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user__n", userN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group__n", groupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @param data  (required)
   * @return ObjectPermission
   * @throws ApiException if fails to make API call
   */
  public ObjectPermission usersPermissionsPartialUpdate(Integer id, WritableObjectPermission data) throws ApiException {
    ApiResponse<ObjectPermission> localVarResponse = usersPermissionsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ObjectPermission&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectPermission> usersPermissionsPartialUpdateWithHttpInfo(Integer id, WritableObjectPermission data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ObjectPermission>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectPermission>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsPartialUpdateRequestBuilder(Integer id, WritableObjectPermission data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersPermissionsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersPermissionsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @return ObjectPermission
   * @throws ApiException if fails to make API call
   */
  public ObjectPermission usersPermissionsRead(Integer id) throws ApiException {
    ApiResponse<ObjectPermission> localVarResponse = usersPermissionsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @return ApiResponse&lt;ObjectPermission&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectPermission> usersPermissionsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsRead", localVarResponse);
        }
        return new ApiResponse<ObjectPermission>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectPermission>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersPermissionsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @param data  (required)
   * @return ObjectPermission
   * @throws ApiException if fails to make API call
   */
  public ObjectPermission usersPermissionsUpdate(Integer id, WritableObjectPermission data) throws ApiException {
    ApiResponse<ObjectPermission> localVarResponse = usersPermissionsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this permission. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ObjectPermission&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectPermission> usersPermissionsUpdateWithHttpInfo(Integer id, WritableObjectPermission data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersPermissionsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersPermissionsUpdate", localVarResponse);
        }
        return new ApiResponse<ObjectPermission>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectPermission>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersPermissionsUpdateRequestBuilder(Integer id, WritableObjectPermission data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersPermissionsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersPermissionsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/permissions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void usersTokensBulkDelete() throws ApiException {
    usersTokensBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersTokensBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Token
   * @throws ApiException if fails to make API call
   */
  public Token usersTokensBulkPartialUpdate(WritableToken data) throws ApiException {
    ApiResponse<Token> localVarResponse = usersTokensBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Token&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Token> usersTokensBulkPartialUpdateWithHttpInfo(WritableToken data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Token>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Token>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensBulkPartialUpdateRequestBuilder(WritableToken data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersTokensBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Token
   * @throws ApiException if fails to make API call
   */
  public Token usersTokensBulkUpdate(WritableToken data) throws ApiException {
    ApiResponse<Token> localVarResponse = usersTokensBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Token&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Token> usersTokensBulkUpdateWithHttpInfo(WritableToken data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Token>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Token>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensBulkUpdateRequestBuilder(WritableToken data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersTokensBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Token
   * @throws ApiException if fails to make API call
   */
  public Token usersTokensCreate(WritableToken data) throws ApiException {
    ApiResponse<Token> localVarResponse = usersTokensCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Token&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Token> usersTokensCreateWithHttpInfo(WritableToken data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensCreate", localVarResponse);
        }
        return new ApiResponse<Token>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Token>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensCreateRequestBuilder(WritableToken data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersTokensCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @throws ApiException if fails to make API call
   */
  public void usersTokensDelete(Integer id) throws ApiException {
    usersTokensDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersTokensDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersTokensDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param key  (optional)
   * @param writeEnabled  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param userId  (optional)
   * @param user  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param expires  (optional)
   * @param expiresGte  (optional)
   * @param expiresLte  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param keyN  (optional)
   * @param keyIc  (optional)
   * @param keyNic  (optional)
   * @param keyIew  (optional)
   * @param keyNiew  (optional)
   * @param keyIsw  (optional)
   * @param keyNisw  (optional)
   * @param keyIe  (optional)
   * @param keyNie  (optional)
   * @param keyEmpty  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param descriptionEmpty  (optional)
   * @param userIdN  (optional)
   * @param userN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return UsersTokensList200Response
   * @throws ApiException if fails to make API call
   */
  public UsersTokensList200Response usersTokensList(String id, String key, String writeEnabled, String description, String q, String userId, String user, String created, String createdGte, String createdLte, String expires, String expiresGte, String expiresLte, String idN, String idLte, String idLt, String idGte, String idGt, String keyN, String keyIc, String keyNic, String keyIew, String keyNiew, String keyIsw, String keyNisw, String keyIe, String keyNie, String keyEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<UsersTokensList200Response> localVarResponse = usersTokensListWithHttpInfo(id, key, writeEnabled, description, q, userId, user, created, createdGte, createdLte, expires, expiresGte, expiresLte, idN, idLte, idLt, idGte, idGt, keyN, keyIc, keyNic, keyIew, keyNiew, keyIsw, keyNisw, keyIe, keyNie, keyEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, userIdN, userN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param key  (optional)
   * @param writeEnabled  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param userId  (optional)
   * @param user  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param expires  (optional)
   * @param expiresGte  (optional)
   * @param expiresLte  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param keyN  (optional)
   * @param keyIc  (optional)
   * @param keyNic  (optional)
   * @param keyIew  (optional)
   * @param keyNiew  (optional)
   * @param keyIsw  (optional)
   * @param keyNisw  (optional)
   * @param keyIe  (optional)
   * @param keyNie  (optional)
   * @param keyEmpty  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param descriptionEmpty  (optional)
   * @param userIdN  (optional)
   * @param userN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;UsersTokensList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UsersTokensList200Response> usersTokensListWithHttpInfo(String id, String key, String writeEnabled, String description, String q, String userId, String user, String created, String createdGte, String createdLte, String expires, String expiresGte, String expiresLte, String idN, String idLte, String idLt, String idGte, String idGt, String keyN, String keyIc, String keyNic, String keyIew, String keyNiew, String keyIsw, String keyNisw, String keyIe, String keyNie, String keyEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensListRequestBuilder(id, key, writeEnabled, description, q, userId, user, created, createdGte, createdLte, expires, expiresGte, expiresLte, idN, idLte, idLt, idGte, idGt, keyN, keyIc, keyNic, keyIew, keyNiew, keyIsw, keyNisw, keyIe, keyNie, keyEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, userIdN, userN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensList", localVarResponse);
        }
        return new ApiResponse<UsersTokensList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UsersTokensList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensListRequestBuilder(String id, String key, String writeEnabled, String description, String q, String userId, String user, String created, String createdGte, String createdLte, String expires, String expiresGte, String expiresLte, String idN, String idLte, String idLt, String idGte, String idGt, String keyN, String keyIc, String keyNic, String keyIew, String keyNiew, String keyIsw, String keyNisw, String keyIe, String keyNie, String keyEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key", key));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("write_enabled", writeEnabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user", user));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expires", expires));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expires__gte", expiresGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expires__lte", expiresLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__n", keyN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__ic", keyIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__nic", keyNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__iew", keyIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__niew", keyNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__isw", keyIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__nisw", keyNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__ie", keyIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__nie", keyNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key__empty", keyEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__empty", descriptionEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id__n", userIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user__n", userN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @param data  (required)
   * @return Token
   * @throws ApiException if fails to make API call
   */
  public Token usersTokensPartialUpdate(Integer id, WritableToken data) throws ApiException {
    ApiResponse<Token> localVarResponse = usersTokensPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Token&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Token> usersTokensPartialUpdateWithHttpInfo(Integer id, WritableToken data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Token>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Token>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensPartialUpdateRequestBuilder(Integer id, WritableToken data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersTokensPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersTokensPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Non-authenticated REST API endpoint via which a user may create a Token.
   * @throws ApiException if fails to make API call
   */
  public void usersTokensProvisionCreate() throws ApiException {
    usersTokensProvisionCreateWithHttpInfo();
  }

  /**
   * 
   * Non-authenticated REST API endpoint via which a user may create a Token.
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersTokensProvisionCreateWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensProvisionCreateRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensProvisionCreate", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensProvisionCreateRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/provision/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @return Token
   * @throws ApiException if fails to make API call
   */
  public Token usersTokensRead(Integer id) throws ApiException {
    ApiResponse<Token> localVarResponse = usersTokensReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @return ApiResponse&lt;Token&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Token> usersTokensReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensRead", localVarResponse);
        }
        return new ApiResponse<Token>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Token>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersTokensRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @param data  (required)
   * @return Token
   * @throws ApiException if fails to make API call
   */
  public Token usersTokensUpdate(Integer id, WritableToken data) throws ApiException {
    ApiResponse<Token> localVarResponse = usersTokensUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this token. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Token&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Token> usersTokensUpdateWithHttpInfo(Integer id, WritableToken data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersTokensUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersTokensUpdate", localVarResponse);
        }
        return new ApiResponse<Token>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Token>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersTokensUpdateRequestBuilder(Integer id, WritableToken data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersTokensUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersTokensUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/tokens/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void usersUsersBulkDelete() throws ApiException {
    usersUsersBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersUsersBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User usersUsersBulkPartialUpdate(WritableUser data) throws ApiException {
    ApiResponse<User> localVarResponse = usersUsersBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> usersUsersBulkPartialUpdateWithHttpInfo(WritableUser data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersBulkPartialUpdateRequestBuilder(WritableUser data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersUsersBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User usersUsersBulkUpdate(WritableUser data) throws ApiException {
    ApiResponse<User> localVarResponse = usersUsersBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> usersUsersBulkUpdateWithHttpInfo(WritableUser data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersBulkUpdate", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersBulkUpdateRequestBuilder(WritableUser data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersUsersBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User usersUsersCreate(WritableUser data) throws ApiException {
    ApiResponse<User> localVarResponse = usersUsersCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> usersUsersCreateWithHttpInfo(WritableUser data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersCreate", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersCreateRequestBuilder(WritableUser data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersUsersCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @throws ApiException if fails to make API call
   */
  public void usersUsersDelete(Integer id) throws ApiException {
    usersUsersDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> usersUsersDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersUsersDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param username  (optional)
   * @param firstName  (optional)
   * @param lastName  (optional)
   * @param email  (optional)
   * @param isStaff  (optional)
   * @param isActive  (optional)
   * @param q  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param usernameN  (optional)
   * @param usernameIc  (optional)
   * @param usernameNic  (optional)
   * @param usernameIew  (optional)
   * @param usernameNiew  (optional)
   * @param usernameIsw  (optional)
   * @param usernameNisw  (optional)
   * @param usernameIe  (optional)
   * @param usernameNie  (optional)
   * @param usernameEmpty  (optional)
   * @param firstNameN  (optional)
   * @param firstNameIc  (optional)
   * @param firstNameNic  (optional)
   * @param firstNameIew  (optional)
   * @param firstNameNiew  (optional)
   * @param firstNameIsw  (optional)
   * @param firstNameNisw  (optional)
   * @param firstNameIe  (optional)
   * @param firstNameNie  (optional)
   * @param firstNameEmpty  (optional)
   * @param lastNameN  (optional)
   * @param lastNameIc  (optional)
   * @param lastNameNic  (optional)
   * @param lastNameIew  (optional)
   * @param lastNameNiew  (optional)
   * @param lastNameIsw  (optional)
   * @param lastNameNisw  (optional)
   * @param lastNameIe  (optional)
   * @param lastNameNie  (optional)
   * @param lastNameEmpty  (optional)
   * @param emailN  (optional)
   * @param emailIc  (optional)
   * @param emailNic  (optional)
   * @param emailIew  (optional)
   * @param emailNiew  (optional)
   * @param emailIsw  (optional)
   * @param emailNisw  (optional)
   * @param emailIe  (optional)
   * @param emailNie  (optional)
   * @param emailEmpty  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return UsersUsersList200Response
   * @throws ApiException if fails to make API call
   */
  public UsersUsersList200Response usersUsersList(String id, String username, String firstName, String lastName, String email, String isStaff, String isActive, String q, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String usernameN, String usernameIc, String usernameNic, String usernameIew, String usernameNiew, String usernameIsw, String usernameNisw, String usernameIe, String usernameNie, String usernameEmpty, String firstNameN, String firstNameIc, String firstNameNic, String firstNameIew, String firstNameNiew, String firstNameIsw, String firstNameNisw, String firstNameIe, String firstNameNie, String firstNameEmpty, String lastNameN, String lastNameIc, String lastNameNic, String lastNameIew, String lastNameNiew, String lastNameIsw, String lastNameNisw, String lastNameIe, String lastNameNie, String lastNameEmpty, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String emailEmpty, String groupIdN, String groupN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<UsersUsersList200Response> localVarResponse = usersUsersListWithHttpInfo(id, username, firstName, lastName, email, isStaff, isActive, q, groupId, group, idN, idLte, idLt, idGte, idGt, usernameN, usernameIc, usernameNic, usernameIew, usernameNiew, usernameIsw, usernameNisw, usernameIe, usernameNie, usernameEmpty, firstNameN, firstNameIc, firstNameNic, firstNameIew, firstNameNiew, firstNameIsw, firstNameNisw, firstNameIe, firstNameNie, firstNameEmpty, lastNameN, lastNameIc, lastNameNic, lastNameIew, lastNameNiew, lastNameIsw, lastNameNisw, lastNameIe, lastNameNie, lastNameEmpty, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, emailEmpty, groupIdN, groupN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param username  (optional)
   * @param firstName  (optional)
   * @param lastName  (optional)
   * @param email  (optional)
   * @param isStaff  (optional)
   * @param isActive  (optional)
   * @param q  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param usernameN  (optional)
   * @param usernameIc  (optional)
   * @param usernameNic  (optional)
   * @param usernameIew  (optional)
   * @param usernameNiew  (optional)
   * @param usernameIsw  (optional)
   * @param usernameNisw  (optional)
   * @param usernameIe  (optional)
   * @param usernameNie  (optional)
   * @param usernameEmpty  (optional)
   * @param firstNameN  (optional)
   * @param firstNameIc  (optional)
   * @param firstNameNic  (optional)
   * @param firstNameIew  (optional)
   * @param firstNameNiew  (optional)
   * @param firstNameIsw  (optional)
   * @param firstNameNisw  (optional)
   * @param firstNameIe  (optional)
   * @param firstNameNie  (optional)
   * @param firstNameEmpty  (optional)
   * @param lastNameN  (optional)
   * @param lastNameIc  (optional)
   * @param lastNameNic  (optional)
   * @param lastNameIew  (optional)
   * @param lastNameNiew  (optional)
   * @param lastNameIsw  (optional)
   * @param lastNameNisw  (optional)
   * @param lastNameIe  (optional)
   * @param lastNameNie  (optional)
   * @param lastNameEmpty  (optional)
   * @param emailN  (optional)
   * @param emailIc  (optional)
   * @param emailNic  (optional)
   * @param emailIew  (optional)
   * @param emailNiew  (optional)
   * @param emailIsw  (optional)
   * @param emailNisw  (optional)
   * @param emailIe  (optional)
   * @param emailNie  (optional)
   * @param emailEmpty  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;UsersUsersList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UsersUsersList200Response> usersUsersListWithHttpInfo(String id, String username, String firstName, String lastName, String email, String isStaff, String isActive, String q, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String usernameN, String usernameIc, String usernameNic, String usernameIew, String usernameNiew, String usernameIsw, String usernameNisw, String usernameIe, String usernameNie, String usernameEmpty, String firstNameN, String firstNameIc, String firstNameNic, String firstNameIew, String firstNameNiew, String firstNameIsw, String firstNameNisw, String firstNameIe, String firstNameNie, String firstNameEmpty, String lastNameN, String lastNameIc, String lastNameNic, String lastNameIew, String lastNameNiew, String lastNameIsw, String lastNameNisw, String lastNameIe, String lastNameNie, String lastNameEmpty, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String emailEmpty, String groupIdN, String groupN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersListRequestBuilder(id, username, firstName, lastName, email, isStaff, isActive, q, groupId, group, idN, idLte, idLt, idGte, idGt, usernameN, usernameIc, usernameNic, usernameIew, usernameNiew, usernameIsw, usernameNisw, usernameIe, usernameNie, usernameEmpty, firstNameN, firstNameIc, firstNameNic, firstNameIew, firstNameNiew, firstNameIsw, firstNameNisw, firstNameIe, firstNameNie, firstNameEmpty, lastNameN, lastNameIc, lastNameNic, lastNameIew, lastNameNiew, lastNameIsw, lastNameNisw, lastNameIe, lastNameNie, lastNameEmpty, emailN, emailIc, emailNic, emailIew, emailNiew, emailIsw, emailNisw, emailIe, emailNie, emailEmpty, groupIdN, groupN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersList", localVarResponse);
        }
        return new ApiResponse<UsersUsersList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UsersUsersList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersListRequestBuilder(String id, String username, String firstName, String lastName, String email, String isStaff, String isActive, String q, String groupId, String group, String idN, String idLte, String idLt, String idGte, String idGt, String usernameN, String usernameIc, String usernameNic, String usernameIew, String usernameNiew, String usernameIsw, String usernameNisw, String usernameIe, String usernameNie, String usernameEmpty, String firstNameN, String firstNameIc, String firstNameNic, String firstNameIew, String firstNameNiew, String firstNameIsw, String firstNameNisw, String firstNameIe, String firstNameNie, String firstNameEmpty, String lastNameN, String lastNameIc, String lastNameNic, String lastNameIew, String lastNameNiew, String lastNameIsw, String lastNameNisw, String lastNameIe, String lastNameNie, String lastNameEmpty, String emailN, String emailIc, String emailNic, String emailIew, String emailNiew, String emailIsw, String emailNisw, String emailIe, String emailNie, String emailEmpty, String groupIdN, String groupN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name", firstName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name", lastName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("is_staff", isStaff));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("is_active", isActive));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group", group));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__n", usernameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__ic", usernameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__nic", usernameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__iew", usernameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__niew", usernameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__isw", usernameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__nisw", usernameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__ie", usernameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__nie", usernameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username__empty", usernameEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__n", firstNameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__ic", firstNameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__nic", firstNameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__iew", firstNameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__niew", firstNameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__isw", firstNameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__nisw", firstNameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__ie", firstNameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__nie", firstNameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first_name__empty", firstNameEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__n", lastNameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__ic", lastNameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__nic", lastNameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__iew", lastNameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__niew", lastNameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__isw", lastNameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__nisw", lastNameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__ie", lastNameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__nie", lastNameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_name__empty", lastNameEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__n", emailN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__ic", emailIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__nic", emailNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__iew", emailIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__niew", emailNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__isw", emailIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__nisw", emailNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__ie", emailIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__nie", emailNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email__empty", emailEmpty));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group__n", groupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @param data  (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User usersUsersPartialUpdate(Integer id, WritableUser data) throws ApiException {
    ApiResponse<User> localVarResponse = usersUsersPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @param data  (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> usersUsersPartialUpdateWithHttpInfo(Integer id, WritableUser data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersPartialUpdate", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersPartialUpdateRequestBuilder(Integer id, WritableUser data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersUsersPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersUsersPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User usersUsersRead(Integer id) throws ApiException {
    ApiResponse<User> localVarResponse = usersUsersReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> usersUsersReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersRead", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersUsersRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @param data  (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User usersUsersUpdate(Integer id, WritableUser data) throws ApiException {
    ApiResponse<User> localVarResponse = usersUsersUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this user. (required)
   * @param data  (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> usersUsersUpdateWithHttpInfo(Integer id, WritableUser data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = usersUsersUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("usersUsersUpdate", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder usersUsersUpdateRequestBuilder(Integer id, WritableUser data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling usersUsersUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling usersUsersUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/users/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
