/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Pair;

import de.codemakers.netbox.client.model.Cluster;
import de.codemakers.netbox.client.model.ClusterGroup;
import de.codemakers.netbox.client.model.ClusterType;
import de.codemakers.netbox.client.model.VMInterface;
import de.codemakers.netbox.client.model.VirtualMachineWithConfigContext;
import de.codemakers.netbox.client.model.VirtualizationClusterGroupsList200Response;
import de.codemakers.netbox.client.model.VirtualizationClusterTypesList200Response;
import de.codemakers.netbox.client.model.VirtualizationClustersList200Response;
import de.codemakers.netbox.client.model.VirtualizationInterfacesList200Response;
import de.codemakers.netbox.client.model.VirtualizationVirtualMachinesList200Response;
import de.codemakers.netbox.client.model.WritableCluster;
import de.codemakers.netbox.client.model.WritableVMInterface;
import de.codemakers.netbox.client.model.WritableVirtualMachineWithConfigContext;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T15:10:46.540964900+02:00[Europe/Berlin]")
public class VirtualizationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public VirtualizationApi() {
    this(new ApiClient());
  }

  public VirtualizationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void virtualizationClusterGroupsBulkDelete() throws ApiException {
    virtualizationClusterGroupsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationClusterGroupsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ClusterGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterGroup virtualizationClusterGroupsBulkPartialUpdate(ClusterGroup data) throws ApiException {
    ApiResponse<ClusterGroup> localVarResponse = virtualizationClusterGroupsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ClusterGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterGroup> virtualizationClusterGroupsBulkPartialUpdateWithHttpInfo(ClusterGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsBulkPartialUpdateRequestBuilder(ClusterGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterGroupsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ClusterGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterGroup virtualizationClusterGroupsBulkUpdate(ClusterGroup data) throws ApiException {
    ApiResponse<ClusterGroup> localVarResponse = virtualizationClusterGroupsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ClusterGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterGroup> virtualizationClusterGroupsBulkUpdateWithHttpInfo(ClusterGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsBulkUpdateRequestBuilder(ClusterGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterGroupsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ClusterGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterGroup virtualizationClusterGroupsCreate(ClusterGroup data) throws ApiException {
    ApiResponse<ClusterGroup> localVarResponse = virtualizationClusterGroupsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ClusterGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterGroup> virtualizationClusterGroupsCreateWithHttpInfo(ClusterGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsCreate", localVarResponse);
        }
        return new ApiResponse<ClusterGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsCreateRequestBuilder(ClusterGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterGroupsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @throws ApiException if fails to make API call
   */
  public void virtualizationClusterGroupsDelete(Integer id) throws ApiException {
    virtualizationClusterGroupsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationClusterGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterGroupsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return VirtualizationClusterGroupsList200Response
   * @throws ApiException if fails to make API call
   */
  public VirtualizationClusterGroupsList200Response virtualizationClusterGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<VirtualizationClusterGroupsList200Response> localVarResponse = virtualizationClusterGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;VirtualizationClusterGroupsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualizationClusterGroupsList200Response> virtualizationClusterGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsListRequestBuilder(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsList", localVarResponse);
        }
        return new ApiResponse<VirtualizationClusterGroupsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualizationClusterGroupsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsListRequestBuilder(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @param data  (required)
   * @return ClusterGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterGroup virtualizationClusterGroupsPartialUpdate(Integer id, ClusterGroup data) throws ApiException {
    ApiResponse<ClusterGroup> localVarResponse = virtualizationClusterGroupsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ClusterGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterGroup> virtualizationClusterGroupsPartialUpdateWithHttpInfo(Integer id, ClusterGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsPartialUpdateRequestBuilder(Integer id, ClusterGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterGroupsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterGroupsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @return ClusterGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterGroup virtualizationClusterGroupsRead(Integer id) throws ApiException {
    ApiResponse<ClusterGroup> localVarResponse = virtualizationClusterGroupsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @return ApiResponse&lt;ClusterGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterGroup> virtualizationClusterGroupsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsRead", localVarResponse);
        }
        return new ApiResponse<ClusterGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterGroupsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @param data  (required)
   * @return ClusterGroup
   * @throws ApiException if fails to make API call
   */
  public ClusterGroup virtualizationClusterGroupsUpdate(Integer id, ClusterGroup data) throws ApiException {
    ApiResponse<ClusterGroup> localVarResponse = virtualizationClusterGroupsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ClusterGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterGroup> virtualizationClusterGroupsUpdateWithHttpInfo(Integer id, ClusterGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterGroupsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterGroupsUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterGroupsUpdateRequestBuilder(Integer id, ClusterGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterGroupsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterGroupsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void virtualizationClusterTypesBulkDelete() throws ApiException {
    virtualizationClusterTypesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationClusterTypesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ClusterType
   * @throws ApiException if fails to make API call
   */
  public ClusterType virtualizationClusterTypesBulkPartialUpdate(ClusterType data) throws ApiException {
    ApiResponse<ClusterType> localVarResponse = virtualizationClusterTypesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ClusterType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterType> virtualizationClusterTypesBulkPartialUpdateWithHttpInfo(ClusterType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesBulkPartialUpdateRequestBuilder(ClusterType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterTypesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ClusterType
   * @throws ApiException if fails to make API call
   */
  public ClusterType virtualizationClusterTypesBulkUpdate(ClusterType data) throws ApiException {
    ApiResponse<ClusterType> localVarResponse = virtualizationClusterTypesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ClusterType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterType> virtualizationClusterTypesBulkUpdateWithHttpInfo(ClusterType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesBulkUpdateRequestBuilder(ClusterType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterTypesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ClusterType
   * @throws ApiException if fails to make API call
   */
  public ClusterType virtualizationClusterTypesCreate(ClusterType data) throws ApiException {
    ApiResponse<ClusterType> localVarResponse = virtualizationClusterTypesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ClusterType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterType> virtualizationClusterTypesCreateWithHttpInfo(ClusterType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesCreate", localVarResponse);
        }
        return new ApiResponse<ClusterType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesCreateRequestBuilder(ClusterType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterTypesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @throws ApiException if fails to make API call
   */
  public void virtualizationClusterTypesDelete(Integer id) throws ApiException {
    virtualizationClusterTypesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationClusterTypesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterTypesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return VirtualizationClusterTypesList200Response
   * @throws ApiException if fails to make API call
   */
  public VirtualizationClusterTypesList200Response virtualizationClusterTypesList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<VirtualizationClusterTypesList200Response> localVarResponse = virtualizationClusterTypesListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;VirtualizationClusterTypesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualizationClusterTypesList200Response> virtualizationClusterTypesListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesListRequestBuilder(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesList", localVarResponse);
        }
        return new ApiResponse<VirtualizationClusterTypesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualizationClusterTypesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesListRequestBuilder(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @param data  (required)
   * @return ClusterType
   * @throws ApiException if fails to make API call
   */
  public ClusterType virtualizationClusterTypesPartialUpdate(Integer id, ClusterType data) throws ApiException {
    ApiResponse<ClusterType> localVarResponse = virtualizationClusterTypesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ClusterType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterType> virtualizationClusterTypesPartialUpdateWithHttpInfo(Integer id, ClusterType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesPartialUpdateRequestBuilder(Integer id, ClusterType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterTypesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterTypesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @return ClusterType
   * @throws ApiException if fails to make API call
   */
  public ClusterType virtualizationClusterTypesRead(Integer id) throws ApiException {
    ApiResponse<ClusterType> localVarResponse = virtualizationClusterTypesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @return ApiResponse&lt;ClusterType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterType> virtualizationClusterTypesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesRead", localVarResponse);
        }
        return new ApiResponse<ClusterType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterTypesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @param data  (required)
   * @return ClusterType
   * @throws ApiException if fails to make API call
   */
  public ClusterType virtualizationClusterTypesUpdate(Integer id, ClusterType data) throws ApiException {
    ApiResponse<ClusterType> localVarResponse = virtualizationClusterTypesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ClusterType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ClusterType> virtualizationClusterTypesUpdateWithHttpInfo(Integer id, ClusterType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClusterTypesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClusterTypesUpdate", localVarResponse);
        }
        return new ApiResponse<ClusterType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClusterTypesUpdateRequestBuilder(Integer id, ClusterType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClusterTypesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClusterTypesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/cluster-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void virtualizationClustersBulkDelete() throws ApiException {
    virtualizationClustersBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationClustersBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Cluster
   * @throws ApiException if fails to make API call
   */
  public Cluster virtualizationClustersBulkPartialUpdate(WritableCluster data) throws ApiException {
    ApiResponse<Cluster> localVarResponse = virtualizationClustersBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Cluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cluster> virtualizationClustersBulkPartialUpdateWithHttpInfo(WritableCluster data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Cluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersBulkPartialUpdateRequestBuilder(WritableCluster data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClustersBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Cluster
   * @throws ApiException if fails to make API call
   */
  public Cluster virtualizationClustersBulkUpdate(WritableCluster data) throws ApiException {
    ApiResponse<Cluster> localVarResponse = virtualizationClustersBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Cluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cluster> virtualizationClustersBulkUpdateWithHttpInfo(WritableCluster data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Cluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersBulkUpdateRequestBuilder(WritableCluster data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClustersBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Cluster
   * @throws ApiException if fails to make API call
   */
  public Cluster virtualizationClustersCreate(WritableCluster data) throws ApiException {
    ApiResponse<Cluster> localVarResponse = virtualizationClustersCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Cluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cluster> virtualizationClustersCreateWithHttpInfo(WritableCluster data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersCreate", localVarResponse);
        }
        return new ApiResponse<Cluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersCreateRequestBuilder(WritableCluster data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClustersCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @throws ApiException if fails to make API call
   */
  public void virtualizationClustersDelete(Integer id) throws ApiException {
    virtualizationClustersDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationClustersDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClustersDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param typeId  (optional)
   * @param type  (optional)
   * @param status  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param typeIdN  (optional)
   * @param typeN  (optional)
   * @param statusN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return VirtualizationClustersList200Response
   * @throws ApiException if fails to make API call
   */
  public VirtualizationClustersList200Response virtualizationClustersList(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<VirtualizationClustersList200Response> localVarResponse = virtualizationClustersListWithHttpInfo(id, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, typeId, type, status, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, typeIdN, typeN, statusN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param typeId  (optional)
   * @param type  (optional)
   * @param status  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param typeIdN  (optional)
   * @param typeN  (optional)
   * @param statusN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;VirtualizationClustersList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualizationClustersList200Response> virtualizationClustersListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersListRequestBuilder(id, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, typeId, type, status, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, typeIdN, typeN, statusN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersList", localVarResponse);
        }
        return new ApiResponse<VirtualizationClustersList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualizationClustersList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersListRequestBuilder(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group", group));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type_id", typeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group__n", groupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type_id__n", typeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @param data  (required)
   * @return Cluster
   * @throws ApiException if fails to make API call
   */
  public Cluster virtualizationClustersPartialUpdate(Integer id, WritableCluster data) throws ApiException {
    ApiResponse<Cluster> localVarResponse = virtualizationClustersPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Cluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cluster> virtualizationClustersPartialUpdateWithHttpInfo(Integer id, WritableCluster data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Cluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersPartialUpdateRequestBuilder(Integer id, WritableCluster data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClustersPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClustersPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @return Cluster
   * @throws ApiException if fails to make API call
   */
  public Cluster virtualizationClustersRead(Integer id) throws ApiException {
    ApiResponse<Cluster> localVarResponse = virtualizationClustersReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @return ApiResponse&lt;Cluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cluster> virtualizationClustersReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersRead", localVarResponse);
        }
        return new ApiResponse<Cluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClustersRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @param data  (required)
   * @return Cluster
   * @throws ApiException if fails to make API call
   */
  public Cluster virtualizationClustersUpdate(Integer id, WritableCluster data) throws ApiException {
    ApiResponse<Cluster> localVarResponse = virtualizationClustersUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cluster. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Cluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cluster> virtualizationClustersUpdateWithHttpInfo(Integer id, WritableCluster data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationClustersUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationClustersUpdate", localVarResponse);
        }
        return new ApiResponse<Cluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationClustersUpdateRequestBuilder(Integer id, WritableCluster data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationClustersUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationClustersUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/clusters/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void virtualizationInterfacesBulkDelete() throws ApiException {
    virtualizationInterfacesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationInterfacesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VMInterface
   * @throws ApiException if fails to make API call
   */
  public VMInterface virtualizationInterfacesBulkPartialUpdate(WritableVMInterface data) throws ApiException {
    ApiResponse<VMInterface> localVarResponse = virtualizationInterfacesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VMInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VMInterface> virtualizationInterfacesBulkPartialUpdateWithHttpInfo(WritableVMInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VMInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VMInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesBulkPartialUpdateRequestBuilder(WritableVMInterface data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationInterfacesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VMInterface
   * @throws ApiException if fails to make API call
   */
  public VMInterface virtualizationInterfacesBulkUpdate(WritableVMInterface data) throws ApiException {
    ApiResponse<VMInterface> localVarResponse = virtualizationInterfacesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VMInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VMInterface> virtualizationInterfacesBulkUpdateWithHttpInfo(WritableVMInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<VMInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VMInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesBulkUpdateRequestBuilder(WritableVMInterface data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationInterfacesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VMInterface
   * @throws ApiException if fails to make API call
   */
  public VMInterface virtualizationInterfacesCreate(WritableVMInterface data) throws ApiException {
    ApiResponse<VMInterface> localVarResponse = virtualizationInterfacesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VMInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VMInterface> virtualizationInterfacesCreateWithHttpInfo(WritableVMInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesCreate", localVarResponse);
        }
        return new ApiResponse<VMInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VMInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesCreateRequestBuilder(WritableVMInterface data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationInterfacesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @throws ApiException if fails to make API call
   */
  public void virtualizationInterfacesDelete(Integer id) throws ApiException {
    virtualizationInterfacesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationInterfacesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationInterfacesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param enabled  (optional)
   * @param mtu  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param clusterId  (optional)
   * @param cluster  (optional)
   * @param virtualMachineId  (optional)
   * @param virtualMachine  (optional)
   * @param parentId  (optional)
   * @param bridgeId  (optional)
   * @param macAddress  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param mtuN  (optional)
   * @param mtuLte  (optional)
   * @param mtuLt  (optional)
   * @param mtuGte  (optional)
   * @param mtuGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param clusterIdN  (optional)
   * @param clusterN  (optional)
   * @param virtualMachineIdN  (optional)
   * @param virtualMachineN  (optional)
   * @param parentIdN  (optional)
   * @param bridgeIdN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return VirtualizationInterfacesList200Response
   * @throws ApiException if fails to make API call
   */
  public VirtualizationInterfacesList200Response virtualizationInterfacesList(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<VirtualizationInterfacesList200Response> localVarResponse = virtualizationInterfacesListWithHttpInfo(id, name, enabled, mtu, description, created, lastUpdated, q, tag, clusterId, cluster, virtualMachineId, virtualMachine, parentId, bridgeId, macAddress, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, clusterIdN, clusterN, virtualMachineIdN, virtualMachineN, parentIdN, bridgeIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, vrfIdN, vrfN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param enabled  (optional)
   * @param mtu  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param clusterId  (optional)
   * @param cluster  (optional)
   * @param virtualMachineId  (optional)
   * @param virtualMachine  (optional)
   * @param parentId  (optional)
   * @param bridgeId  (optional)
   * @param macAddress  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param mtuN  (optional)
   * @param mtuLte  (optional)
   * @param mtuLt  (optional)
   * @param mtuGte  (optional)
   * @param mtuGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param clusterIdN  (optional)
   * @param clusterN  (optional)
   * @param virtualMachineIdN  (optional)
   * @param virtualMachineN  (optional)
   * @param parentIdN  (optional)
   * @param bridgeIdN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;VirtualizationInterfacesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualizationInterfacesList200Response> virtualizationInterfacesListWithHttpInfo(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesListRequestBuilder(id, name, enabled, mtu, description, created, lastUpdated, q, tag, clusterId, cluster, virtualMachineId, virtualMachine, parentId, bridgeId, macAddress, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, clusterIdN, clusterN, virtualMachineIdN, virtualMachineN, parentIdN, bridgeIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, vrfIdN, vrfN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesList", localVarResponse);
        }
        return new ApiResponse<VirtualizationInterfacesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualizationInterfacesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesListRequestBuilder(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabled", enabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu", mtu));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id", clusterId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster", cluster));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine_id", virtualMachineId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine", virtualMachine));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bridge_id", bridgeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address", macAddress));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id", vrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf", vrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__n", mtuN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__lte", mtuLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__lt", mtuLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__gte", mtuGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__gt", mtuGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id__n", clusterIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster__n", clusterN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine_id__n", virtualMachineIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_machine__n", virtualMachineN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bridge_id__n", bridgeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__n", macAddressN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ic", macAddressIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nic", macAddressNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__iew", macAddressIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__niew", macAddressNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__isw", macAddressIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nisw", macAddressNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ie", macAddressIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nie", macAddressNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id__n", vrfIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf__n", vrfN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return VMInterface
   * @throws ApiException if fails to make API call
   */
  public VMInterface virtualizationInterfacesPartialUpdate(Integer id, WritableVMInterface data) throws ApiException {
    ApiResponse<VMInterface> localVarResponse = virtualizationInterfacesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VMInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VMInterface> virtualizationInterfacesPartialUpdateWithHttpInfo(Integer id, WritableVMInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VMInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VMInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesPartialUpdateRequestBuilder(Integer id, WritableVMInterface data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationInterfacesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationInterfacesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @return VMInterface
   * @throws ApiException if fails to make API call
   */
  public VMInterface virtualizationInterfacesRead(Integer id) throws ApiException {
    ApiResponse<VMInterface> localVarResponse = virtualizationInterfacesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @return ApiResponse&lt;VMInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VMInterface> virtualizationInterfacesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesRead", localVarResponse);
        }
        return new ApiResponse<VMInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VMInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationInterfacesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return VMInterface
   * @throws ApiException if fails to make API call
   */
  public VMInterface virtualizationInterfacesUpdate(Integer id, WritableVMInterface data) throws ApiException {
    ApiResponse<VMInterface> localVarResponse = virtualizationInterfacesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VMInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VMInterface> virtualizationInterfacesUpdateWithHttpInfo(Integer id, WritableVMInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationInterfacesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationInterfacesUpdate", localVarResponse);
        }
        return new ApiResponse<VMInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VMInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationInterfacesUpdateRequestBuilder(Integer id, WritableVMInterface data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationInterfacesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationInterfacesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void virtualizationVirtualMachinesBulkDelete() throws ApiException {
    virtualizationVirtualMachinesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationVirtualMachinesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VirtualMachineWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public VirtualMachineWithConfigContext virtualizationVirtualMachinesBulkPartialUpdate(WritableVirtualMachineWithConfigContext data) throws ApiException {
    ApiResponse<VirtualMachineWithConfigContext> localVarResponse = virtualizationVirtualMachinesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesBulkPartialUpdateWithHttpInfo(WritableVirtualMachineWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualMachineWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualMachineWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesBulkPartialUpdateRequestBuilder(WritableVirtualMachineWithConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationVirtualMachinesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VirtualMachineWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public VirtualMachineWithConfigContext virtualizationVirtualMachinesBulkUpdate(WritableVirtualMachineWithConfigContext data) throws ApiException {
    ApiResponse<VirtualMachineWithConfigContext> localVarResponse = virtualizationVirtualMachinesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesBulkUpdateWithHttpInfo(WritableVirtualMachineWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualMachineWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualMachineWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesBulkUpdateRequestBuilder(WritableVirtualMachineWithConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationVirtualMachinesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VirtualMachineWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public VirtualMachineWithConfigContext virtualizationVirtualMachinesCreate(WritableVirtualMachineWithConfigContext data) throws ApiException {
    ApiResponse<VirtualMachineWithConfigContext> localVarResponse = virtualizationVirtualMachinesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesCreateWithHttpInfo(WritableVirtualMachineWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesCreate", localVarResponse);
        }
        return new ApiResponse<VirtualMachineWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualMachineWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesCreateRequestBuilder(WritableVirtualMachineWithConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationVirtualMachinesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @throws ApiException if fails to make API call
   */
  public void virtualizationVirtualMachinesDelete(Integer id) throws ApiException {
    virtualizationVirtualMachinesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> virtualizationVirtualMachinesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationVirtualMachinesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param cluster  (optional)
   * @param vcpus  (optional)
   * @param memory  (optional)
   * @param disk  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param localContextData  (optional)
   * @param status  (optional)
   * @param clusterGroupId  (optional)
   * @param clusterGroup  (optional)
   * @param clusterTypeId  (optional)
   * @param clusterType  (optional)
   * @param clusterId  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param platformId  (optional)
   * @param platform  (optional)
   * @param macAddress  (optional)
   * @param hasPrimaryIp  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param clusterN  (optional)
   * @param vcpusN  (optional)
   * @param vcpusLte  (optional)
   * @param vcpusLt  (optional)
   * @param vcpusGte  (optional)
   * @param vcpusGt  (optional)
   * @param memoryN  (optional)
   * @param memoryLte  (optional)
   * @param memoryLt  (optional)
   * @param memoryGte  (optional)
   * @param memoryGt  (optional)
   * @param diskN  (optional)
   * @param diskLte  (optional)
   * @param diskLt  (optional)
   * @param diskGte  (optional)
   * @param diskGt  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param statusN  (optional)
   * @param clusterGroupIdN  (optional)
   * @param clusterGroupN  (optional)
   * @param clusterTypeIdN  (optional)
   * @param clusterTypeN  (optional)
   * @param clusterIdN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param platformIdN  (optional)
   * @param platformN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return VirtualizationVirtualMachinesList200Response
   * @throws ApiException if fails to make API call
   */
  public VirtualizationVirtualMachinesList200Response virtualizationVirtualMachinesList(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<VirtualizationVirtualMachinesList200Response> localVarResponse = virtualizationVirtualMachinesListWithHttpInfo(id, name, cluster, vcpus, memory, disk, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, deviceId, device, regionId, region, siteGroupId, siteGroup, siteId, site, roleId, role, platformId, platform, macAddress, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, clusterN, vcpusN, vcpusLte, vcpusLt, vcpusGte, vcpusGt, memoryN, memoryLte, memoryLt, memoryGte, memoryGt, diskN, diskLte, diskLt, diskGte, diskGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, clusterGroupIdN, clusterGroupN, clusterTypeIdN, clusterTypeN, clusterIdN, deviceIdN, deviceN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param cluster  (optional)
   * @param vcpus  (optional)
   * @param memory  (optional)
   * @param disk  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param localContextData  (optional)
   * @param status  (optional)
   * @param clusterGroupId  (optional)
   * @param clusterGroup  (optional)
   * @param clusterTypeId  (optional)
   * @param clusterType  (optional)
   * @param clusterId  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param platformId  (optional)
   * @param platform  (optional)
   * @param macAddress  (optional)
   * @param hasPrimaryIp  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param clusterN  (optional)
   * @param vcpusN  (optional)
   * @param vcpusLte  (optional)
   * @param vcpusLt  (optional)
   * @param vcpusGte  (optional)
   * @param vcpusGt  (optional)
   * @param memoryN  (optional)
   * @param memoryLte  (optional)
   * @param memoryLt  (optional)
   * @param memoryGte  (optional)
   * @param memoryGt  (optional)
   * @param diskN  (optional)
   * @param diskLte  (optional)
   * @param diskLt  (optional)
   * @param diskGte  (optional)
   * @param diskGt  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param statusN  (optional)
   * @param clusterGroupIdN  (optional)
   * @param clusterGroupN  (optional)
   * @param clusterTypeIdN  (optional)
   * @param clusterTypeN  (optional)
   * @param clusterIdN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param platformIdN  (optional)
   * @param platformN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;VirtualizationVirtualMachinesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualizationVirtualMachinesList200Response> virtualizationVirtualMachinesListWithHttpInfo(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesListRequestBuilder(id, name, cluster, vcpus, memory, disk, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, deviceId, device, regionId, region, siteGroupId, siteGroup, siteId, site, roleId, role, platformId, platform, macAddress, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, clusterN, vcpusN, vcpusLte, vcpusLt, vcpusGte, vcpusGt, memoryN, memoryLte, memoryLt, memoryGte, memoryGt, diskN, diskLte, diskLt, diskGte, diskGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, clusterGroupIdN, clusterGroupN, clusterTypeIdN, clusterTypeN, clusterIdN, deviceIdN, deviceN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesList", localVarResponse);
        }
        return new ApiResponse<VirtualizationVirtualMachinesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualizationVirtualMachinesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesListRequestBuilder(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster", cluster));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vcpus", vcpus));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("memory", memory));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("disk", disk));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("local_context_data", localContextData));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group_id", clusterGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group", clusterGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type_id", clusterTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type", clusterType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id", clusterId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform_id", platformId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform", platform));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address", macAddress));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("has_primary_ip", hasPrimaryIp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster__n", clusterN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vcpus__n", vcpusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vcpus__lte", vcpusLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vcpus__lt", vcpusLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vcpus__gte", vcpusGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vcpus__gt", vcpusGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("memory__n", memoryN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("memory__lte", memoryLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("memory__lt", memoryLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("memory__gte", memoryGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("memory__gt", memoryGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("disk__n", diskN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("disk__lte", diskLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("disk__lt", diskLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("disk__gte", diskGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("disk__gt", diskGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group_id__n", clusterGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group__n", clusterGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type_id__n", clusterTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type__n", clusterTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id__n", clusterIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform_id__n", platformIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform__n", platformN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__n", macAddressN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ic", macAddressIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nic", macAddressNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__iew", macAddressIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__niew", macAddressNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__isw", macAddressIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nisw", macAddressNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ie", macAddressIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nie", macAddressNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @param data  (required)
   * @return VirtualMachineWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public VirtualMachineWithConfigContext virtualizationVirtualMachinesPartialUpdate(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
    ApiResponse<VirtualMachineWithConfigContext> localVarResponse = virtualizationVirtualMachinesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesPartialUpdateWithHttpInfo(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualMachineWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualMachineWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesPartialUpdateRequestBuilder(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationVirtualMachinesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationVirtualMachinesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @return VirtualMachineWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public VirtualMachineWithConfigContext virtualizationVirtualMachinesRead(Integer id) throws ApiException {
    ApiResponse<VirtualMachineWithConfigContext> localVarResponse = virtualizationVirtualMachinesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesRead", localVarResponse);
        }
        return new ApiResponse<VirtualMachineWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualMachineWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationVirtualMachinesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @param data  (required)
   * @return VirtualMachineWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public VirtualMachineWithConfigContext virtualizationVirtualMachinesUpdate(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
    ApiResponse<VirtualMachineWithConfigContext> localVarResponse = virtualizationVirtualMachinesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual machine. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesUpdateWithHttpInfo(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = virtualizationVirtualMachinesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("virtualizationVirtualMachinesUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualMachineWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualMachineWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder virtualizationVirtualMachinesUpdateRequestBuilder(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling virtualizationVirtualMachinesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling virtualizationVirtualMachinesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/virtualization/virtual-machines/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
