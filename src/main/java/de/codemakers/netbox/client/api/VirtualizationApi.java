/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.api;

import com.google.gson.reflect.TypeToken;
import de.codemakers.netbox.client.*;
import de.codemakers.netbox.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    
    public VirtualizationApi() {
        this(Configuration.getDefaultApiClient());
    }
    
    public VirtualizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    
    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public int getHostIndex() {
        return localHostIndex;
    }
    
    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }
    
    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }
    
    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }
    
    /**
     * Build call for virtualizationClusterGroupsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationClusterGroupsBulkDelete() throws ApiException {
        virtualizationClusterGroupsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationClusterGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsBulkPartialUpdateCall(ClusterGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsBulkPartialUpdateValidateBeforeCall(ClusterGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterGroupsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ClusterGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterGroup virtualizationClusterGroupsBulkPartialUpdate(ClusterGroup data) throws ApiException {
        ApiResponse<ClusterGroup> localVarResp = virtualizationClusterGroupsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterGroup> virtualizationClusterGroupsBulkPartialUpdateWithHttpInfo(ClusterGroup data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsBulkPartialUpdateAsync(ClusterGroup data, final ApiCallback<ClusterGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsBulkUpdateCall(ClusterGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsBulkUpdateValidateBeforeCall(ClusterGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterGroupsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ClusterGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterGroup virtualizationClusterGroupsBulkUpdate(ClusterGroup data) throws ApiException {
        ApiResponse<ClusterGroup> localVarResp = virtualizationClusterGroupsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterGroup> virtualizationClusterGroupsBulkUpdateWithHttpInfo(ClusterGroup data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsBulkUpdateAsync(ClusterGroup data, final ApiCallback<ClusterGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsCreateCall(ClusterGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsCreateValidateBeforeCall(ClusterGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterGroupsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ClusterGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterGroup virtualizationClusterGroupsCreate(ClusterGroup data) throws ApiException {
        ApiResponse<ClusterGroup> localVarResp = virtualizationClusterGroupsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterGroup> virtualizationClusterGroupsCreateWithHttpInfo(ClusterGroup data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsCreateAsync(ClusterGroup data, final ApiCallback<ClusterGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsDelete
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterGroupsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationClusterGroupsDelete(Integer id) throws ApiException {
        virtualizationClusterGroupsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationClusterGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }
        
        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }
        
        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }
        
        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }
        
        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return VirtualizationClusterGroupsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualizationClusterGroupsList200Response virtualizationClusterGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<VirtualizationClusterGroupsList200Response> localVarResp = virtualizationClusterGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;VirtualizationClusterGroupsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualizationClusterGroupsList200Response> virtualizationClusterGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<VirtualizationClusterGroupsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback<VirtualizationClusterGroupsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<VirtualizationClusterGroupsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsPartialUpdate
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsPartialUpdateCall(Integer id, ClusterGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsPartialUpdateValidateBeforeCall(Integer id, ClusterGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterGroupsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterGroupsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     *
     * @return ClusterGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterGroup virtualizationClusterGroupsPartialUpdate(Integer id, ClusterGroup data) throws ApiException {
        ApiResponse<ClusterGroup> localVarResp = virtualizationClusterGroupsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterGroup> virtualizationClusterGroupsPartialUpdateWithHttpInfo(Integer id, ClusterGroup data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsPartialUpdateAsync(Integer id, ClusterGroup data, final ApiCallback<ClusterGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsRead
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterGroupsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     *
     * @return ClusterGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterGroup virtualizationClusterGroupsRead(Integer id) throws ApiException {
        ApiResponse<ClusterGroup> localVarResp = virtualizationClusterGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     *
     * @return ApiResponse&lt;ClusterGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterGroup> virtualizationClusterGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsReadAsync(Integer id, final ApiCallback<ClusterGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterGroupsUpdate
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsUpdateCall(Integer id, ClusterGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-groups/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterGroupsUpdateValidateBeforeCall(Integer id, ClusterGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterGroupsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     *
     * @return ClusterGroup
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterGroup virtualizationClusterGroupsUpdate(Integer id, ClusterGroup data) throws ApiException {
        ApiResponse<ClusterGroup> localVarResp = virtualizationClusterGroupsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterGroup&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterGroup> virtualizationClusterGroupsUpdateWithHttpInfo(Integer id, ClusterGroup data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterGroupsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster group. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterGroupsUpdateAsync(Integer id, ClusterGroup data, final ApiCallback<ClusterGroup> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterGroupsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ClusterGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationClusterTypesBulkDelete() throws ApiException {
        virtualizationClusterTypesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationClusterTypesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesBulkPartialUpdateCall(ClusterType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesBulkPartialUpdateValidateBeforeCall(ClusterType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterTypesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ClusterType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterType virtualizationClusterTypesBulkPartialUpdate(ClusterType data) throws ApiException {
        ApiResponse<ClusterType> localVarResp = virtualizationClusterTypesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterType> virtualizationClusterTypesBulkPartialUpdateWithHttpInfo(ClusterType data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesBulkPartialUpdateAsync(ClusterType data, final ApiCallback<ClusterType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesBulkUpdateCall(ClusterType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesBulkUpdateValidateBeforeCall(ClusterType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterTypesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ClusterType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterType virtualizationClusterTypesBulkUpdate(ClusterType data) throws ApiException {
        ApiResponse<ClusterType> localVarResp = virtualizationClusterTypesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterType> virtualizationClusterTypesBulkUpdateWithHttpInfo(ClusterType data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesBulkUpdateAsync(ClusterType data, final ApiCallback<ClusterType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesCreateCall(ClusterType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesCreateValidateBeforeCall(ClusterType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterTypesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ClusterType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterType virtualizationClusterTypesCreate(ClusterType data) throws ApiException {
        ApiResponse<ClusterType> localVarResp = virtualizationClusterTypesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterType> virtualizationClusterTypesCreateWithHttpInfo(ClusterType data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesCreateAsync(ClusterType data, final ApiCallback<ClusterType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesDelete
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterTypesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationClusterTypesDelete(Integer id) throws ApiException {
        virtualizationClusterTypesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationClusterTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesListCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return VirtualizationClusterTypesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualizationClusterTypesList200Response virtualizationClusterTypesList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<VirtualizationClusterTypesList200Response> localVarResp = virtualizationClusterTypesListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;VirtualizationClusterTypesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualizationClusterTypesList200Response> virtualizationClusterTypesListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<VirtualizationClusterTypesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<VirtualizationClusterTypesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<VirtualizationClusterTypesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesPartialUpdate
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesPartialUpdateCall(Integer id, ClusterType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesPartialUpdateValidateBeforeCall(Integer id, ClusterType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterTypesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterTypesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     *
     * @return ClusterType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterType virtualizationClusterTypesPartialUpdate(Integer id, ClusterType data) throws ApiException {
        ApiResponse<ClusterType> localVarResp = virtualizationClusterTypesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterType> virtualizationClusterTypesPartialUpdateWithHttpInfo(Integer id, ClusterType data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesPartialUpdateAsync(Integer id, ClusterType data, final ApiCallback<ClusterType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesRead
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterTypesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     *
     * @return ClusterType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterType virtualizationClusterTypesRead(Integer id) throws ApiException {
        ApiResponse<ClusterType> localVarResp = virtualizationClusterTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     *
     * @return ApiResponse&lt;ClusterType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterType> virtualizationClusterTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesReadAsync(Integer id, final ApiCallback<ClusterType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClusterTypesUpdate
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesUpdateCall(Integer id, ClusterType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/cluster-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClusterTypesUpdateValidateBeforeCall(Integer id, ClusterType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClusterTypesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClusterTypesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClusterTypesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     *
     * @return ClusterType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ClusterType virtualizationClusterTypesUpdate(Integer id, ClusterType data) throws ApiException {
        ApiResponse<ClusterType> localVarResp = virtualizationClusterTypesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ClusterType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClusterType> virtualizationClusterTypesUpdateWithHttpInfo(Integer id, ClusterType data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClusterTypesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster type. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClusterTypesUpdateAsync(Integer id, ClusterType data, final ApiCallback<ClusterType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClusterTypesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ClusterType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationClustersBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationClustersBulkDelete() throws ApiException {
        virtualizationClustersBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationClustersBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersBulkPartialUpdateCall(WritableCluster data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersBulkPartialUpdateValidateBeforeCall(WritableCluster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClustersBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClustersBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Cluster
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Cluster virtualizationClustersBulkPartialUpdate(WritableCluster data) throws ApiException {
        ApiResponse<Cluster> localVarResp = virtualizationClustersBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Cluster&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Cluster> virtualizationClustersBulkPartialUpdateWithHttpInfo(WritableCluster data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersBulkPartialUpdateAsync(WritableCluster data, final ApiCallback<Cluster> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersBulkUpdateCall(WritableCluster data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersBulkUpdateValidateBeforeCall(WritableCluster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClustersBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClustersBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Cluster
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Cluster virtualizationClustersBulkUpdate(WritableCluster data) throws ApiException {
        ApiResponse<Cluster> localVarResp = virtualizationClustersBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Cluster&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Cluster> virtualizationClustersBulkUpdateWithHttpInfo(WritableCluster data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersBulkUpdateAsync(WritableCluster data, final ApiCallback<Cluster> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersCreateCall(WritableCluster data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersCreateValidateBeforeCall(WritableCluster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClustersCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClustersCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Cluster
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Cluster virtualizationClustersCreate(WritableCluster data) throws ApiException {
        ApiResponse<Cluster> localVarResp = virtualizationClustersCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Cluster&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Cluster> virtualizationClustersCreateWithHttpInfo(WritableCluster data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersCreateAsync(WritableCluster data, final ApiCallback<Cluster> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersDelete
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClustersDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClustersDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationClustersDelete(Integer id) throws ApiException {
        virtualizationClustersDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationClustersDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersList
     *
     * @param id (optional)
     * @param name (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersListCall(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }
        
        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }
        
        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }
        
        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }
        
        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }
        
        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }
        
        if (typeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_id", typeId));
        }
        
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }
        
        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }
        
        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }
        
        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }
        
        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }
        
        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }
        
        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }
        
        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }
        
        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }
        
        if (typeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_id__n", typeIdN));
        }
        
        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }
        
        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersListValidateBeforeCall(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationClustersListCall(id, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, typeId, type, status, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, typeIdN, typeN, statusN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return VirtualizationClustersList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualizationClustersList200Response virtualizationClustersList(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<VirtualizationClustersList200Response> localVarResp = virtualizationClustersListWithHttpInfo(id, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, typeId, type, status, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, typeIdN, typeN, statusN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;VirtualizationClustersList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualizationClustersList200Response> virtualizationClustersListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersListValidateBeforeCall(id, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, typeId, type, status, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, typeIdN, typeN, statusN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<VirtualizationClustersList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param groupId (optional)
     * @param group (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param groupIdN (optional)
     * @param groupN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersListAsync(String id, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String groupId, String group, String typeId, String type, String status, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String groupIdN, String groupN, String typeIdN, String typeN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback<VirtualizationClustersList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersListValidateBeforeCall(id, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, groupId, group, typeId, type, status, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, groupIdN, groupN, typeIdN, typeN, statusN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<VirtualizationClustersList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersPartialUpdate
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersPartialUpdateCall(Integer id, WritableCluster data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersPartialUpdateValidateBeforeCall(Integer id, WritableCluster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClustersPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClustersPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClustersPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     *
     * @return Cluster
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Cluster virtualizationClustersPartialUpdate(Integer id, WritableCluster data) throws ApiException {
        ApiResponse<Cluster> localVarResp = virtualizationClustersPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Cluster&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Cluster> virtualizationClustersPartialUpdateWithHttpInfo(Integer id, WritableCluster data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersPartialUpdateAsync(Integer id, WritableCluster data, final ApiCallback<Cluster> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersRead
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClustersRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClustersReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     *
     * @return Cluster
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Cluster virtualizationClustersRead(Integer id) throws ApiException {
        ApiResponse<Cluster> localVarResp = virtualizationClustersReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     *
     * @return ApiResponse&lt;Cluster&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Cluster> virtualizationClustersReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersReadAsync(Integer id, final ApiCallback<Cluster> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationClustersUpdate
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersUpdateCall(Integer id, WritableCluster data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/clusters/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationClustersUpdateValidateBeforeCall(Integer id, WritableCluster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationClustersUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationClustersUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationClustersUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     *
     * @return Cluster
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Cluster virtualizationClustersUpdate(Integer id, WritableCluster data) throws ApiException {
        ApiResponse<Cluster> localVarResp = virtualizationClustersUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Cluster&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Cluster> virtualizationClustersUpdateWithHttpInfo(Integer id, WritableCluster data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationClustersUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this cluster. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationClustersUpdateAsync(Integer id, WritableCluster data, final ApiCallback<Cluster> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationClustersUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Cluster>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationInterfacesBulkDelete() throws ApiException {
        virtualizationInterfacesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationInterfacesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesBulkPartialUpdateCall(WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesBulkPartialUpdateValidateBeforeCall(WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationInterfacesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VMInterface
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VMInterface virtualizationInterfacesBulkPartialUpdate(WritableVMInterface data) throws ApiException {
        ApiResponse<VMInterface> localVarResp = virtualizationInterfacesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VMInterface&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VMInterface> virtualizationInterfacesBulkPartialUpdateWithHttpInfo(WritableVMInterface data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesBulkPartialUpdateAsync(WritableVMInterface data, final ApiCallback<VMInterface> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesBulkUpdateCall(WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesBulkUpdateValidateBeforeCall(WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationInterfacesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VMInterface
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VMInterface virtualizationInterfacesBulkUpdate(WritableVMInterface data) throws ApiException {
        ApiResponse<VMInterface> localVarResp = virtualizationInterfacesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VMInterface&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VMInterface> virtualizationInterfacesBulkUpdateWithHttpInfo(WritableVMInterface data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesBulkUpdateAsync(WritableVMInterface data, final ApiCallback<VMInterface> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesCreateCall(WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesCreateValidateBeforeCall(WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationInterfacesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VMInterface
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VMInterface virtualizationInterfacesCreate(WritableVMInterface data) throws ApiException {
        ApiResponse<VMInterface> localVarResp = virtualizationInterfacesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VMInterface&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VMInterface> virtualizationInterfacesCreateWithHttpInfo(WritableVMInterface data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesCreateAsync(WritableVMInterface data, final ApiCallback<VMInterface> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesDelete
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationInterfacesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationInterfacesDelete(Integer id) throws ApiException {
        virtualizationInterfacesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationInterfacesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param enabled (optional)
     * @param mtu (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param clusterId (optional)
     * @param cluster (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param parentId (optional)
     * @param bridgeId (optional)
     * @param macAddress (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param mtuN (optional)
     * @param mtuLte (optional)
     * @param mtuLt (optional)
     * @param mtuGte (optional)
     * @param mtuGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param clusterIdN (optional)
     * @param clusterN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param parentIdN (optional)
     * @param bridgeIdN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesListCall(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }
        
        if (mtu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu", mtu));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }
        
        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }
        
        if (virtualMachineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id", virtualMachineId));
        }
        
        if (virtualMachine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine", virtualMachine));
        }
        
        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }
        
        if (bridgeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_id", bridgeId));
        }
        
        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }
        
        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }
        
        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (mtuN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__n", mtuN));
        }
        
        if (mtuLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lte", mtuLte));
        }
        
        if (mtuLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lt", mtuLt));
        }
        
        if (mtuGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gte", mtuGte));
        }
        
        if (mtuGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gt", mtuGt));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (clusterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id__n", clusterIdN));
        }
        
        if (clusterN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster__n", clusterN));
        }
        
        if (virtualMachineIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine_id__n", virtualMachineIdN));
        }
        
        if (virtualMachineN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_machine__n", virtualMachineN));
        }
        
        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }
        
        if (bridgeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_id__n", bridgeIdN));
        }
        
        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }
        
        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }
        
        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }
        
        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }
        
        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }
        
        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }
        
        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }
        
        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }
        
        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }
        
        if (vrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id__n", vrfIdN));
        }
        
        if (vrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf__n", vrfN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesListValidateBeforeCall(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesListCall(id, name, enabled, mtu, description, created, lastUpdated, q, tag, clusterId, cluster, virtualMachineId, virtualMachine, parentId, bridgeId, macAddress, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, clusterIdN, clusterN, virtualMachineIdN, virtualMachineN, parentIdN, bridgeIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, vrfIdN, vrfN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param enabled (optional)
     * @param mtu (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param clusterId (optional)
     * @param cluster (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param parentId (optional)
     * @param bridgeId (optional)
     * @param macAddress (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param mtuN (optional)
     * @param mtuLte (optional)
     * @param mtuLt (optional)
     * @param mtuGte (optional)
     * @param mtuGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param clusterIdN (optional)
     * @param clusterN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param parentIdN (optional)
     * @param bridgeIdN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return VirtualizationInterfacesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualizationInterfacesList200Response virtualizationInterfacesList(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<VirtualizationInterfacesList200Response> localVarResp = virtualizationInterfacesListWithHttpInfo(id, name, enabled, mtu, description, created, lastUpdated, q, tag, clusterId, cluster, virtualMachineId, virtualMachine, parentId, bridgeId, macAddress, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, clusterIdN, clusterN, virtualMachineIdN, virtualMachineN, parentIdN, bridgeIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, vrfIdN, vrfN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param enabled (optional)
     * @param mtu (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param clusterId (optional)
     * @param cluster (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param parentId (optional)
     * @param bridgeId (optional)
     * @param macAddress (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param mtuN (optional)
     * @param mtuLte (optional)
     * @param mtuLt (optional)
     * @param mtuGte (optional)
     * @param mtuGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param clusterIdN (optional)
     * @param clusterN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param parentIdN (optional)
     * @param bridgeIdN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;VirtualizationInterfacesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualizationInterfacesList200Response> virtualizationInterfacesListWithHttpInfo(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesListValidateBeforeCall(id, name, enabled, mtu, description, created, lastUpdated, q, tag, clusterId, cluster, virtualMachineId, virtualMachine, parentId, bridgeId, macAddress, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, clusterIdN, clusterN, virtualMachineIdN, virtualMachineN, parentIdN, bridgeIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, vrfIdN, vrfN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<VirtualizationInterfacesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param enabled (optional)
     * @param mtu (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param clusterId (optional)
     * @param cluster (optional)
     * @param virtualMachineId (optional)
     * @param virtualMachine (optional)
     * @param parentId (optional)
     * @param bridgeId (optional)
     * @param macAddress (optional)
     * @param vrfId (optional)
     * @param vrf (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param mtuN (optional)
     * @param mtuLte (optional)
     * @param mtuLt (optional)
     * @param mtuGte (optional)
     * @param mtuGt (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param clusterIdN (optional)
     * @param clusterN (optional)
     * @param virtualMachineIdN (optional)
     * @param virtualMachineN (optional)
     * @param parentIdN (optional)
     * @param bridgeIdN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param vrfIdN (optional)
     * @param vrfN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesListAsync(String id, String name, String enabled, String mtu, String description, String created, String lastUpdated, String q, String tag, String clusterId, String cluster, String virtualMachineId, String virtualMachine, String parentId, String bridgeId, String macAddress, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String clusterIdN, String clusterN, String virtualMachineIdN, String virtualMachineN, String parentIdN, String bridgeIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset, final ApiCallback<VirtualizationInterfacesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesListValidateBeforeCall(id, name, enabled, mtu, description, created, lastUpdated, q, tag, clusterId, cluster, virtualMachineId, virtualMachine, parentId, bridgeId, macAddress, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, clusterIdN, clusterN, virtualMachineIdN, virtualMachineN, parentIdN, bridgeIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, vrfIdN, vrfN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<VirtualizationInterfacesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesPartialUpdate
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesPartialUpdateCall(Integer id, WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesPartialUpdateValidateBeforeCall(Integer id, WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationInterfacesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationInterfacesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     *
     * @return VMInterface
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VMInterface virtualizationInterfacesPartialUpdate(Integer id, WritableVMInterface data) throws ApiException {
        ApiResponse<VMInterface> localVarResp = virtualizationInterfacesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VMInterface&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VMInterface> virtualizationInterfacesPartialUpdateWithHttpInfo(Integer id, WritableVMInterface data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesPartialUpdateAsync(Integer id, WritableVMInterface data, final ApiCallback<VMInterface> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesRead
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationInterfacesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     *
     * @return VMInterface
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VMInterface virtualizationInterfacesRead(Integer id) throws ApiException {
        ApiResponse<VMInterface> localVarResp = virtualizationInterfacesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     *
     * @return ApiResponse&lt;VMInterface&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VMInterface> virtualizationInterfacesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesReadAsync(Integer id, final ApiCallback<VMInterface> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationInterfacesUpdate
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesUpdateCall(Integer id, WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/interfaces/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationInterfacesUpdateValidateBeforeCall(Integer id, WritableVMInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationInterfacesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationInterfacesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationInterfacesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     *
     * @return VMInterface
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VMInterface virtualizationInterfacesUpdate(Integer id, WritableVMInterface data) throws ApiException {
        ApiResponse<VMInterface> localVarResp = virtualizationInterfacesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VMInterface&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VMInterface> virtualizationInterfacesUpdateWithHttpInfo(Integer id, WritableVMInterface data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationInterfacesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this interface. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationInterfacesUpdateAsync(Integer id, WritableVMInterface data, final ApiCallback<VMInterface> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationInterfacesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VMInterface>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationVirtualMachinesBulkDelete() throws ApiException {
        virtualizationVirtualMachinesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationVirtualMachinesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesBulkPartialUpdateCall(WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesBulkPartialUpdateValidateBeforeCall(WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationVirtualMachinesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VirtualMachineWithConfigContext
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualMachineWithConfigContext virtualizationVirtualMachinesBulkPartialUpdate(WritableVirtualMachineWithConfigContext data) throws ApiException {
        ApiResponse<VirtualMachineWithConfigContext> localVarResp = virtualizationVirtualMachinesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesBulkPartialUpdateWithHttpInfo(WritableVirtualMachineWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesBulkPartialUpdateAsync(WritableVirtualMachineWithConfigContext data, final ApiCallback<VirtualMachineWithConfigContext> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesBulkUpdateCall(WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesBulkUpdateValidateBeforeCall(WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationVirtualMachinesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VirtualMachineWithConfigContext
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualMachineWithConfigContext virtualizationVirtualMachinesBulkUpdate(WritableVirtualMachineWithConfigContext data) throws ApiException {
        ApiResponse<VirtualMachineWithConfigContext> localVarResp = virtualizationVirtualMachinesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesBulkUpdateWithHttpInfo(WritableVirtualMachineWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesBulkUpdateAsync(WritableVirtualMachineWithConfigContext data, final ApiCallback<VirtualMachineWithConfigContext> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesCreateCall(WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesCreateValidateBeforeCall(WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationVirtualMachinesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return VirtualMachineWithConfigContext
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualMachineWithConfigContext virtualizationVirtualMachinesCreate(WritableVirtualMachineWithConfigContext data) throws ApiException {
        ApiResponse<VirtualMachineWithConfigContext> localVarResp = virtualizationVirtualMachinesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesCreateWithHttpInfo(WritableVirtualMachineWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesCreateAsync(WritableVirtualMachineWithConfigContext data, final ApiCallback<VirtualMachineWithConfigContext> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesDelete
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationVirtualMachinesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void virtualizationVirtualMachinesDelete(Integer id) throws ApiException {
        virtualizationVirtualMachinesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> virtualizationVirtualMachinesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param cluster (optional)
     * @param vcpus (optional)
     * @param memory (optional)
     * @param disk (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param localContextData (optional)
     * @param status (optional)
     * @param clusterGroupId (optional)
     * @param clusterGroup (optional)
     * @param clusterTypeId (optional)
     * @param clusterType (optional)
     * @param clusterId (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param platformId (optional)
     * @param platform (optional)
     * @param macAddress (optional)
     * @param hasPrimaryIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param clusterN (optional)
     * @param vcpusN (optional)
     * @param vcpusLte (optional)
     * @param vcpusLt (optional)
     * @param vcpusGte (optional)
     * @param vcpusGt (optional)
     * @param memoryN (optional)
     * @param memoryLte (optional)
     * @param memoryLt (optional)
     * @param memoryGte (optional)
     * @param memoryGt (optional)
     * @param diskN (optional)
     * @param diskLte (optional)
     * @param diskLt (optional)
     * @param diskGte (optional)
     * @param diskGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param statusN (optional)
     * @param clusterGroupIdN (optional)
     * @param clusterGroupN (optional)
     * @param clusterTypeIdN (optional)
     * @param clusterTypeN (optional)
     * @param clusterIdN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param platformIdN (optional)
     * @param platformN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesListCall(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }
        
        if (vcpus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vcpus", vcpus));
        }
        
        if (memory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memory", memory));
        }
        
        if (disk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disk", disk));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }
        
        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }
        
        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }
        
        if (localContextData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local_context_data", localContextData));
        }
        
        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }
        
        if (clusterGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group_id", clusterGroupId));
        }
        
        if (clusterGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group", clusterGroup));
        }
        
        if (clusterTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type_id", clusterTypeId));
        }
        
        if (clusterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type", clusterType));
        }
        
        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }
        
        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }
        
        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }
        
        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }
        
        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }
        
        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }
        
        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id", platformId));
        }
        
        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }
        
        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }
        
        if (hasPrimaryIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_primary_ip", hasPrimaryIp));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (clusterN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster__n", clusterN));
        }
        
        if (vcpusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vcpus__n", vcpusN));
        }
        
        if (vcpusLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vcpus__lte", vcpusLte));
        }
        
        if (vcpusLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vcpus__lt", vcpusLt));
        }
        
        if (vcpusGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vcpus__gte", vcpusGte));
        }
        
        if (vcpusGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vcpus__gt", vcpusGt));
        }
        
        if (memoryN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memory__n", memoryN));
        }
        
        if (memoryLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memory__lte", memoryLte));
        }
        
        if (memoryLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memory__lt", memoryLt));
        }
        
        if (memoryGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memory__gte", memoryGte));
        }
        
        if (memoryGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memory__gt", memoryGt));
        }
        
        if (diskN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disk__n", diskN));
        }
        
        if (diskLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disk__lte", diskLte));
        }
        
        if (diskLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disk__lt", diskLt));
        }
        
        if (diskGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disk__gte", diskGte));
        }
        
        if (diskGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disk__gt", diskGt));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }
        
        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }
        
        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }
        
        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }
        
        if (clusterGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group_id__n", clusterGroupIdN));
        }
        
        if (clusterGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group__n", clusterGroupN));
        }
        
        if (clusterTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type_id__n", clusterTypeIdN));
        }
        
        if (clusterTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type__n", clusterTypeN));
        }
        
        if (clusterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id__n", clusterIdN));
        }
        
        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }
        
        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }
        
        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }
        
        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }
        
        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }
        
        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }
        
        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }
        
        if (platformIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id__n", platformIdN));
        }
        
        if (platformN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform__n", platformN));
        }
        
        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }
        
        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }
        
        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }
        
        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }
        
        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }
        
        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }
        
        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }
        
        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }
        
        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesListValidateBeforeCall(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesListCall(id, name, cluster, vcpus, memory, disk, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, deviceId, device, regionId, region, siteGroupId, siteGroup, siteId, site, roleId, role, platformId, platform, macAddress, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, clusterN, vcpusN, vcpusLte, vcpusLt, vcpusGte, vcpusGt, memoryN, memoryLte, memoryLt, memoryGte, memoryGt, diskN, diskLte, diskLt, diskGte, diskGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, clusterGroupIdN, clusterGroupN, clusterTypeIdN, clusterTypeN, clusterIdN, deviceIdN, deviceN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param cluster (optional)
     * @param vcpus (optional)
     * @param memory (optional)
     * @param disk (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param localContextData (optional)
     * @param status (optional)
     * @param clusterGroupId (optional)
     * @param clusterGroup (optional)
     * @param clusterTypeId (optional)
     * @param clusterType (optional)
     * @param clusterId (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param platformId (optional)
     * @param platform (optional)
     * @param macAddress (optional)
     * @param hasPrimaryIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param clusterN (optional)
     * @param vcpusN (optional)
     * @param vcpusLte (optional)
     * @param vcpusLt (optional)
     * @param vcpusGte (optional)
     * @param vcpusGt (optional)
     * @param memoryN (optional)
     * @param memoryLte (optional)
     * @param memoryLt (optional)
     * @param memoryGte (optional)
     * @param memoryGt (optional)
     * @param diskN (optional)
     * @param diskLte (optional)
     * @param diskLt (optional)
     * @param diskGte (optional)
     * @param diskGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param statusN (optional)
     * @param clusterGroupIdN (optional)
     * @param clusterGroupN (optional)
     * @param clusterTypeIdN (optional)
     * @param clusterTypeN (optional)
     * @param clusterIdN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param platformIdN (optional)
     * @param platformN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return VirtualizationVirtualMachinesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualizationVirtualMachinesList200Response virtualizationVirtualMachinesList(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<VirtualizationVirtualMachinesList200Response> localVarResp = virtualizationVirtualMachinesListWithHttpInfo(id, name, cluster, vcpus, memory, disk, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, deviceId, device, regionId, region, siteGroupId, siteGroup, siteId, site, roleId, role, platformId, platform, macAddress, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, clusterN, vcpusN, vcpusLte, vcpusLt, vcpusGte, vcpusGt, memoryN, memoryLte, memoryLt, memoryGte, memoryGt, diskN, diskLte, diskLt, diskGte, diskGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, clusterGroupIdN, clusterGroupN, clusterTypeIdN, clusterTypeN, clusterIdN, deviceIdN, deviceN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param cluster (optional)
     * @param vcpus (optional)
     * @param memory (optional)
     * @param disk (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param localContextData (optional)
     * @param status (optional)
     * @param clusterGroupId (optional)
     * @param clusterGroup (optional)
     * @param clusterTypeId (optional)
     * @param clusterType (optional)
     * @param clusterId (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param platformId (optional)
     * @param platform (optional)
     * @param macAddress (optional)
     * @param hasPrimaryIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param clusterN (optional)
     * @param vcpusN (optional)
     * @param vcpusLte (optional)
     * @param vcpusLt (optional)
     * @param vcpusGte (optional)
     * @param vcpusGt (optional)
     * @param memoryN (optional)
     * @param memoryLte (optional)
     * @param memoryLt (optional)
     * @param memoryGte (optional)
     * @param memoryGt (optional)
     * @param diskN (optional)
     * @param diskLte (optional)
     * @param diskLt (optional)
     * @param diskGte (optional)
     * @param diskGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param statusN (optional)
     * @param clusterGroupIdN (optional)
     * @param clusterGroupN (optional)
     * @param clusterTypeIdN (optional)
     * @param clusterTypeN (optional)
     * @param clusterIdN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param platformIdN (optional)
     * @param platformN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;VirtualizationVirtualMachinesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualizationVirtualMachinesList200Response> virtualizationVirtualMachinesListWithHttpInfo(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesListValidateBeforeCall(id, name, cluster, vcpus, memory, disk, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, deviceId, device, regionId, region, siteGroupId, siteGroup, siteId, site, roleId, role, platformId, platform, macAddress, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, clusterN, vcpusN, vcpusLte, vcpusLt, vcpusGte, vcpusGt, memoryN, memoryLte, memoryLt, memoryGte, memoryGt, diskN, diskLte, diskLt, diskGte, diskGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, clusterGroupIdN, clusterGroupN, clusterTypeIdN, clusterTypeN, clusterIdN, deviceIdN, deviceN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<VirtualizationVirtualMachinesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param cluster (optional)
     * @param vcpus (optional)
     * @param memory (optional)
     * @param disk (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param localContextData (optional)
     * @param status (optional)
     * @param clusterGroupId (optional)
     * @param clusterGroup (optional)
     * @param clusterTypeId (optional)
     * @param clusterType (optional)
     * @param clusterId (optional)
     * @param deviceId (optional)
     * @param device (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param roleId (optional)
     * @param role (optional)
     * @param platformId (optional)
     * @param platform (optional)
     * @param macAddress (optional)
     * @param hasPrimaryIp (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param clusterN (optional)
     * @param vcpusN (optional)
     * @param vcpusLte (optional)
     * @param vcpusLt (optional)
     * @param vcpusGte (optional)
     * @param vcpusGt (optional)
     * @param memoryN (optional)
     * @param memoryLte (optional)
     * @param memoryLt (optional)
     * @param memoryGte (optional)
     * @param memoryGt (optional)
     * @param diskN (optional)
     * @param diskLte (optional)
     * @param diskLt (optional)
     * @param diskGte (optional)
     * @param diskGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param statusN (optional)
     * @param clusterGroupIdN (optional)
     * @param clusterGroupN (optional)
     * @param clusterTypeIdN (optional)
     * @param clusterTypeN (optional)
     * @param clusterIdN (optional)
     * @param deviceIdN (optional)
     * @param deviceN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param roleIdN (optional)
     * @param roleN (optional)
     * @param platformIdN (optional)
     * @param platformN (optional)
     * @param macAddressN (optional)
     * @param macAddressIc (optional)
     * @param macAddressNic (optional)
     * @param macAddressIew (optional)
     * @param macAddressNiew (optional)
     * @param macAddressIsw (optional)
     * @param macAddressNisw (optional)
     * @param macAddressIe (optional)
     * @param macAddressNie (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesListAsync(String id, String name, String cluster, String vcpus, String memory, String disk, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String status, String clusterGroupId, String clusterGroup, String clusterTypeId, String clusterType, String clusterId, String deviceId, String device, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String roleId, String role, String platformId, String platform, String macAddress, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String clusterN, String vcpusN, String vcpusLte, String vcpusLt, String vcpusGte, String vcpusGt, String memoryN, String memoryLte, String memoryLt, String memoryGte, String memoryGt, String diskN, String diskLte, String diskLt, String diskGte, String diskGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String clusterGroupIdN, String clusterGroupN, String clusterTypeIdN, String clusterTypeN, String clusterIdN, String deviceIdN, String deviceN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String roleIdN, String roleN, String platformIdN, String platformN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String ordering, Integer limit, Integer offset, final ApiCallback<VirtualizationVirtualMachinesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesListValidateBeforeCall(id, name, cluster, vcpus, memory, disk, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, deviceId, device, regionId, region, siteGroupId, siteGroup, siteId, site, roleId, role, platformId, platform, macAddress, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, clusterN, vcpusN, vcpusLte, vcpusLt, vcpusGte, vcpusGt, memoryN, memoryLte, memoryLt, memoryGte, memoryGt, diskN, diskLte, diskLt, diskGte, diskGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, clusterGroupIdN, clusterGroupN, clusterTypeIdN, clusterTypeN, clusterIdN, deviceIdN, deviceN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<VirtualizationVirtualMachinesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesPartialUpdate
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesPartialUpdateCall(Integer id, WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesPartialUpdateValidateBeforeCall(Integer id, WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationVirtualMachinesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationVirtualMachinesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     *
     * @return VirtualMachineWithConfigContext
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualMachineWithConfigContext virtualizationVirtualMachinesPartialUpdate(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
        ApiResponse<VirtualMachineWithConfigContext> localVarResp = virtualizationVirtualMachinesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesPartialUpdateWithHttpInfo(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesPartialUpdateAsync(Integer id, WritableVirtualMachineWithConfigContext data, final ApiCallback<VirtualMachineWithConfigContext> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesRead
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationVirtualMachinesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     *
     * @return VirtualMachineWithConfigContext
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualMachineWithConfigContext virtualizationVirtualMachinesRead(Integer id) throws ApiException {
        ApiResponse<VirtualMachineWithConfigContext> localVarResp = virtualizationVirtualMachinesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     *
     * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesReadAsync(Integer id, final ApiCallback<VirtualMachineWithConfigContext> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for virtualizationVirtualMachinesUpdate
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesUpdateCall(Integer id, WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/virtualization/virtual-machines/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualizationVirtualMachinesUpdateValidateBeforeCall(Integer id, WritableVirtualMachineWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling virtualizationVirtualMachinesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling virtualizationVirtualMachinesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     *
     * @return VirtualMachineWithConfigContext
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public VirtualMachineWithConfigContext virtualizationVirtualMachinesUpdate(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
        ApiResponse<VirtualMachineWithConfigContext> localVarResp = virtualizationVirtualMachinesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;VirtualMachineWithConfigContext&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VirtualMachineWithConfigContext> virtualizationVirtualMachinesUpdateWithHttpInfo(Integer id, WritableVirtualMachineWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = virtualizationVirtualMachinesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this virtual machine. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call virtualizationVirtualMachinesUpdateAsync(Integer id, WritableVirtualMachineWithConfigContext data, final ApiCallback<VirtualMachineWithConfigContext> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = virtualizationVirtualMachinesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineWithConfigContext>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
