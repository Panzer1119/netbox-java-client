/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Pair;

import de.codemakers.netbox.client.model.WirelessLAN;
import de.codemakers.netbox.client.model.WirelessLANGroup;
import de.codemakers.netbox.client.model.WirelessLink;
import de.codemakers.netbox.client.model.WirelessWirelessLanGroupsList200Response;
import de.codemakers.netbox.client.model.WirelessWirelessLansList200Response;
import de.codemakers.netbox.client.model.WirelessWirelessLinksList200Response;
import de.codemakers.netbox.client.model.WritableWirelessLAN;
import de.codemakers.netbox.client.model.WritableWirelessLANGroup;
import de.codemakers.netbox.client.model.WritableWirelessLink;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T15:10:46.540964900+02:00[Europe/Berlin]")
public class WirelessApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public WirelessApi() {
    this(new ApiClient());
  }

  public WirelessApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void wirelessWirelessLanGroupsBulkDelete() throws ApiException {
    wirelessWirelessLanGroupsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> wirelessWirelessLanGroupsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLANGroup
   * @throws ApiException if fails to make API call
   */
  public WirelessLANGroup wirelessWirelessLanGroupsBulkPartialUpdate(WritableWirelessLANGroup data) throws ApiException {
    ApiResponse<WirelessLANGroup> localVarResponse = wirelessWirelessLanGroupsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsBulkPartialUpdateWithHttpInfo(WritableWirelessLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsBulkPartialUpdateRequestBuilder(WritableWirelessLANGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLanGroupsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLANGroup
   * @throws ApiException if fails to make API call
   */
  public WirelessLANGroup wirelessWirelessLanGroupsBulkUpdate(WritableWirelessLANGroup data) throws ApiException {
    ApiResponse<WirelessLANGroup> localVarResponse = wirelessWirelessLanGroupsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsBulkUpdateWithHttpInfo(WritableWirelessLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsBulkUpdateRequestBuilder(WritableWirelessLANGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLanGroupsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLANGroup
   * @throws ApiException if fails to make API call
   */
  public WirelessLANGroup wirelessWirelessLanGroupsCreate(WritableWirelessLANGroup data) throws ApiException {
    ApiResponse<WirelessLANGroup> localVarResponse = wirelessWirelessLanGroupsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsCreateWithHttpInfo(WritableWirelessLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsCreate", localVarResponse);
        }
        return new ApiResponse<WirelessLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsCreateRequestBuilder(WritableWirelessLANGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLanGroupsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @throws ApiException if fails to make API call
   */
  public void wirelessWirelessLanGroupsDelete(Integer id) throws ApiException {
    wirelessWirelessLanGroupsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> wirelessWirelessLanGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLanGroupsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return WirelessWirelessLanGroupsList200Response
   * @throws ApiException if fails to make API call
   */
  public WirelessWirelessLanGroupsList200Response wirelessWirelessLanGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<WirelessWirelessLanGroupsList200Response> localVarResponse = wirelessWirelessLanGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;WirelessWirelessLanGroupsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessWirelessLanGroupsList200Response> wirelessWirelessLanGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsListRequestBuilder(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsList", localVarResponse);
        }
        return new ApiResponse<WirelessWirelessLanGroupsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessWirelessLanGroupsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsListRequestBuilder(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent", parent));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent__n", parentN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @param data  (required)
   * @return WirelessLANGroup
   * @throws ApiException if fails to make API call
   */
  public WirelessLANGroup wirelessWirelessLanGroupsPartialUpdate(Integer id, WritableWirelessLANGroup data) throws ApiException {
    ApiResponse<WirelessLANGroup> localVarResponse = wirelessWirelessLanGroupsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsPartialUpdateWithHttpInfo(Integer id, WritableWirelessLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsPartialUpdateRequestBuilder(Integer id, WritableWirelessLANGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLanGroupsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLanGroupsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @return WirelessLANGroup
   * @throws ApiException if fails to make API call
   */
  public WirelessLANGroup wirelessWirelessLanGroupsRead(Integer id) throws ApiException {
    ApiResponse<WirelessLANGroup> localVarResponse = wirelessWirelessLanGroupsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @return ApiResponse&lt;WirelessLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsRead", localVarResponse);
        }
        return new ApiResponse<WirelessLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLanGroupsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @param data  (required)
   * @return WirelessLANGroup
   * @throws ApiException if fails to make API call
   */
  public WirelessLANGroup wirelessWirelessLanGroupsUpdate(Integer id, WritableWirelessLANGroup data) throws ApiException {
    ApiResponse<WirelessLANGroup> localVarResponse = wirelessWirelessLanGroupsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN Group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLANGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsUpdateWithHttpInfo(Integer id, WritableWirelessLANGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLanGroupsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLanGroupsUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLANGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLANGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLanGroupsUpdateRequestBuilder(Integer id, WritableWirelessLANGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLanGroupsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLanGroupsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lan-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void wirelessWirelessLansBulkDelete() throws ApiException {
    wirelessWirelessLansBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> wirelessWirelessLansBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLAN
   * @throws ApiException if fails to make API call
   */
  public WirelessLAN wirelessWirelessLansBulkPartialUpdate(WritableWirelessLAN data) throws ApiException {
    ApiResponse<WirelessLAN> localVarResponse = wirelessWirelessLansBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLAN> wirelessWirelessLansBulkPartialUpdateWithHttpInfo(WritableWirelessLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansBulkPartialUpdateRequestBuilder(WritableWirelessLAN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLansBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLAN
   * @throws ApiException if fails to make API call
   */
  public WirelessLAN wirelessWirelessLansBulkUpdate(WritableWirelessLAN data) throws ApiException {
    ApiResponse<WirelessLAN> localVarResponse = wirelessWirelessLansBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLAN> wirelessWirelessLansBulkUpdateWithHttpInfo(WritableWirelessLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansBulkUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansBulkUpdateRequestBuilder(WritableWirelessLAN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLansBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLAN
   * @throws ApiException if fails to make API call
   */
  public WirelessLAN wirelessWirelessLansCreate(WritableWirelessLAN data) throws ApiException {
    ApiResponse<WirelessLAN> localVarResponse = wirelessWirelessLansCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLAN> wirelessWirelessLansCreateWithHttpInfo(WritableWirelessLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansCreate", localVarResponse);
        }
        return new ApiResponse<WirelessLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansCreateRequestBuilder(WritableWirelessLAN data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLansCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @throws ApiException if fails to make API call
   */
  public void wirelessWirelessLansDelete(Integer id) throws ApiException {
    wirelessWirelessLansDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> wirelessWirelessLansDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLansDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param ssid  (optional)
   * @param authPsk  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param vlanId  (optional)
   * @param authType  (optional)
   * @param authCipher  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param ssidN  (optional)
   * @param ssidIc  (optional)
   * @param ssidNic  (optional)
   * @param ssidIew  (optional)
   * @param ssidNiew  (optional)
   * @param ssidIsw  (optional)
   * @param ssidNisw  (optional)
   * @param ssidIe  (optional)
   * @param ssidNie  (optional)
   * @param authPskN  (optional)
   * @param authPskIc  (optional)
   * @param authPskNic  (optional)
   * @param authPskIew  (optional)
   * @param authPskNiew  (optional)
   * @param authPskIsw  (optional)
   * @param authPskNisw  (optional)
   * @param authPskIe  (optional)
   * @param authPskNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param vlanIdN  (optional)
   * @param authTypeN  (optional)
   * @param authCipherN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return WirelessWirelessLansList200Response
   * @throws ApiException if fails to make API call
   */
  public WirelessWirelessLansList200Response wirelessWirelessLansList(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<WirelessWirelessLansList200Response> localVarResponse = wirelessWirelessLansListWithHttpInfo(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, groupId, group, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, groupIdN, groupN, vlanIdN, authTypeN, authCipherN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param ssid  (optional)
   * @param authPsk  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param vlanId  (optional)
   * @param authType  (optional)
   * @param authCipher  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param ssidN  (optional)
   * @param ssidIc  (optional)
   * @param ssidNic  (optional)
   * @param ssidIew  (optional)
   * @param ssidNiew  (optional)
   * @param ssidIsw  (optional)
   * @param ssidNisw  (optional)
   * @param ssidIe  (optional)
   * @param ssidNie  (optional)
   * @param authPskN  (optional)
   * @param authPskIc  (optional)
   * @param authPskNic  (optional)
   * @param authPskIew  (optional)
   * @param authPskNiew  (optional)
   * @param authPskIsw  (optional)
   * @param authPskNisw  (optional)
   * @param authPskIe  (optional)
   * @param authPskNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param vlanIdN  (optional)
   * @param authTypeN  (optional)
   * @param authCipherN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;WirelessWirelessLansList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessWirelessLansList200Response> wirelessWirelessLansListWithHttpInfo(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansListRequestBuilder(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, groupId, group, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, groupIdN, groupN, vlanIdN, authTypeN, authCipherN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansList", localVarResponse);
        }
        return new ApiResponse<WirelessWirelessLansList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessWirelessLansList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansListRequestBuilder(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid", ssid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk", authPsk));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group", group));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_id", vlanId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_type", authType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_cipher", authCipher));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__n", ssidN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__ic", ssidIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__nic", ssidNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__iew", ssidIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__niew", ssidNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__isw", ssidIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__nisw", ssidNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__ie", ssidIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__nie", ssidNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__n", authPskN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__ic", authPskIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__nic", authPskNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__iew", authPskIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__niew", authPskNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__isw", authPskIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__nisw", authPskNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__ie", authPskIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__nie", authPskNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group__n", groupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_id__n", vlanIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_type__n", authTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_cipher__n", authCipherN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @param data  (required)
   * @return WirelessLAN
   * @throws ApiException if fails to make API call
   */
  public WirelessLAN wirelessWirelessLansPartialUpdate(Integer id, WritableWirelessLAN data) throws ApiException {
    ApiResponse<WirelessLAN> localVarResponse = wirelessWirelessLansPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLAN> wirelessWirelessLansPartialUpdateWithHttpInfo(Integer id, WritableWirelessLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansPartialUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansPartialUpdateRequestBuilder(Integer id, WritableWirelessLAN data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLansPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLansPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @return WirelessLAN
   * @throws ApiException if fails to make API call
   */
  public WirelessLAN wirelessWirelessLansRead(Integer id) throws ApiException {
    ApiResponse<WirelessLAN> localVarResponse = wirelessWirelessLansReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @return ApiResponse&lt;WirelessLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLAN> wirelessWirelessLansReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansRead", localVarResponse);
        }
        return new ApiResponse<WirelessLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLansRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @param data  (required)
   * @return WirelessLAN
   * @throws ApiException if fails to make API call
   */
  public WirelessLAN wirelessWirelessLansUpdate(Integer id, WritableWirelessLAN data) throws ApiException {
    ApiResponse<WirelessLAN> localVarResponse = wirelessWirelessLansUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this Wireless LAN. (required)
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLAN&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLAN> wirelessWirelessLansUpdateWithHttpInfo(Integer id, WritableWirelessLAN data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLansUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLansUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLAN>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLAN>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLansUpdateRequestBuilder(Integer id, WritableWirelessLAN data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLansUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLansUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-lans/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void wirelessWirelessLinksBulkDelete() throws ApiException {
    wirelessWirelessLinksBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> wirelessWirelessLinksBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLink
   * @throws ApiException if fails to make API call
   */
  public WirelessLink wirelessWirelessLinksBulkPartialUpdate(WritableWirelessLink data) throws ApiException {
    ApiResponse<WirelessLink> localVarResponse = wirelessWirelessLinksBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLink> wirelessWirelessLinksBulkPartialUpdateWithHttpInfo(WritableWirelessLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksBulkPartialUpdateRequestBuilder(WritableWirelessLink data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLinksBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLink
   * @throws ApiException if fails to make API call
   */
  public WirelessLink wirelessWirelessLinksBulkUpdate(WritableWirelessLink data) throws ApiException {
    ApiResponse<WirelessLink> localVarResponse = wirelessWirelessLinksBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLink> wirelessWirelessLinksBulkUpdateWithHttpInfo(WritableWirelessLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksBulkUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksBulkUpdateRequestBuilder(WritableWirelessLink data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLinksBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return WirelessLink
   * @throws ApiException if fails to make API call
   */
  public WirelessLink wirelessWirelessLinksCreate(WritableWirelessLink data) throws ApiException {
    ApiResponse<WirelessLink> localVarResponse = wirelessWirelessLinksCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLink> wirelessWirelessLinksCreateWithHttpInfo(WritableWirelessLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksCreate", localVarResponse);
        }
        return new ApiResponse<WirelessLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksCreateRequestBuilder(WritableWirelessLink data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLinksCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @throws ApiException if fails to make API call
   */
  public void wirelessWirelessLinksDelete(Integer id) throws ApiException {
    wirelessWirelessLinksDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> wirelessWirelessLinksDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLinksDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param ssid  (optional)
   * @param authPsk  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param interfaceAId  (optional)
   * @param interfaceBId  (optional)
   * @param status  (optional)
   * @param authType  (optional)
   * @param authCipher  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param ssidN  (optional)
   * @param ssidIc  (optional)
   * @param ssidNic  (optional)
   * @param ssidIew  (optional)
   * @param ssidNiew  (optional)
   * @param ssidIsw  (optional)
   * @param ssidNisw  (optional)
   * @param ssidIe  (optional)
   * @param ssidNie  (optional)
   * @param authPskN  (optional)
   * @param authPskIc  (optional)
   * @param authPskNic  (optional)
   * @param authPskIew  (optional)
   * @param authPskNiew  (optional)
   * @param authPskIsw  (optional)
   * @param authPskNisw  (optional)
   * @param authPskIe  (optional)
   * @param authPskNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param interfaceAIdN  (optional)
   * @param interfaceAIdLte  (optional)
   * @param interfaceAIdLt  (optional)
   * @param interfaceAIdGte  (optional)
   * @param interfaceAIdGt  (optional)
   * @param interfaceBIdN  (optional)
   * @param interfaceBIdLte  (optional)
   * @param interfaceBIdLt  (optional)
   * @param interfaceBIdGte  (optional)
   * @param interfaceBIdGt  (optional)
   * @param statusN  (optional)
   * @param authTypeN  (optional)
   * @param authCipherN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return WirelessWirelessLinksList200Response
   * @throws ApiException if fails to make API call
   */
  public WirelessWirelessLinksList200Response wirelessWirelessLinksList(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<WirelessWirelessLinksList200Response> localVarResponse = wirelessWirelessLinksListWithHttpInfo(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param ssid  (optional)
   * @param authPsk  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param interfaceAId  (optional)
   * @param interfaceBId  (optional)
   * @param status  (optional)
   * @param authType  (optional)
   * @param authCipher  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param ssidN  (optional)
   * @param ssidIc  (optional)
   * @param ssidNic  (optional)
   * @param ssidIew  (optional)
   * @param ssidNiew  (optional)
   * @param ssidIsw  (optional)
   * @param ssidNisw  (optional)
   * @param ssidIe  (optional)
   * @param ssidNie  (optional)
   * @param authPskN  (optional)
   * @param authPskIc  (optional)
   * @param authPskNic  (optional)
   * @param authPskIew  (optional)
   * @param authPskNiew  (optional)
   * @param authPskIsw  (optional)
   * @param authPskNisw  (optional)
   * @param authPskIe  (optional)
   * @param authPskNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param interfaceAIdN  (optional)
   * @param interfaceAIdLte  (optional)
   * @param interfaceAIdLt  (optional)
   * @param interfaceAIdGte  (optional)
   * @param interfaceAIdGt  (optional)
   * @param interfaceBIdN  (optional)
   * @param interfaceBIdLte  (optional)
   * @param interfaceBIdLt  (optional)
   * @param interfaceBIdGte  (optional)
   * @param interfaceBIdGt  (optional)
   * @param statusN  (optional)
   * @param authTypeN  (optional)
   * @param authCipherN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;WirelessWirelessLinksList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessWirelessLinksList200Response> wirelessWirelessLinksListWithHttpInfo(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksListRequestBuilder(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksList", localVarResponse);
        }
        return new ApiResponse<WirelessWirelessLinksList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessWirelessLinksList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksListRequestBuilder(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid", ssid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk", authPsk));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_a_id", interfaceAId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_b_id", interfaceBId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_type", authType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_cipher", authCipher));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__n", ssidN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__ic", ssidIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__nic", ssidNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__iew", ssidIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__niew", ssidNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__isw", ssidIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__nisw", ssidNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__ie", ssidIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssid__nie", ssidNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__n", authPskN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__ic", authPskIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__nic", authPskNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__iew", authPskIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__niew", authPskNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__isw", authPskIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__nisw", authPskNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__ie", authPskIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_psk__nie", authPskNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_a_id__n", interfaceAIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_a_id__lte", interfaceAIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_a_id__lt", interfaceAIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_a_id__gte", interfaceAIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_a_id__gt", interfaceAIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_b_id__n", interfaceBIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_b_id__lte", interfaceBIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_b_id__lt", interfaceBIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_b_id__gte", interfaceBIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interface_b_id__gt", interfaceBIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_type__n", authTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("auth_cipher__n", authCipherN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @param data  (required)
   * @return WirelessLink
   * @throws ApiException if fails to make API call
   */
  public WirelessLink wirelessWirelessLinksPartialUpdate(Integer id, WritableWirelessLink data) throws ApiException {
    ApiResponse<WirelessLink> localVarResponse = wirelessWirelessLinksPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLink> wirelessWirelessLinksPartialUpdateWithHttpInfo(Integer id, WritableWirelessLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksPartialUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksPartialUpdateRequestBuilder(Integer id, WritableWirelessLink data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLinksPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLinksPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @return WirelessLink
   * @throws ApiException if fails to make API call
   */
  public WirelessLink wirelessWirelessLinksRead(Integer id) throws ApiException {
    ApiResponse<WirelessLink> localVarResponse = wirelessWirelessLinksReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @return ApiResponse&lt;WirelessLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLink> wirelessWirelessLinksReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksRead", localVarResponse);
        }
        return new ApiResponse<WirelessLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLinksRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @param data  (required)
   * @return WirelessLink
   * @throws ApiException if fails to make API call
   */
  public WirelessLink wirelessWirelessLinksUpdate(Integer id, WritableWirelessLink data) throws ApiException {
    ApiResponse<WirelessLink> localVarResponse = wirelessWirelessLinksUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this wireless link. (required)
   * @param data  (required)
   * @return ApiResponse&lt;WirelessLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WirelessLink> wirelessWirelessLinksUpdateWithHttpInfo(Integer id, WritableWirelessLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wirelessWirelessLinksUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wirelessWirelessLinksUpdate", localVarResponse);
        }
        return new ApiResponse<WirelessLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WirelessLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wirelessWirelessLinksUpdateRequestBuilder(Integer id, WritableWirelessLink data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling wirelessWirelessLinksUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling wirelessWirelessLinksUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/wireless/wireless-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
