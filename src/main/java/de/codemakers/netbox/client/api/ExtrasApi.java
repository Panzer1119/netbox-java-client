/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiCallback;
import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Configuration;
import de.codemakers.netbox.client.Pair;
import de.codemakers.netbox.client.ProgressRequestBody;
import de.codemakers.netbox.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import de.codemakers.netbox.client.model.ConfigContext;
import de.codemakers.netbox.client.model.ContentType;
import de.codemakers.netbox.client.model.CustomField;
import de.codemakers.netbox.client.model.CustomLink;
import de.codemakers.netbox.client.model.ExportTemplate;
import de.codemakers.netbox.client.model.ExtrasConfigContextsList200Response;
import de.codemakers.netbox.client.model.ExtrasContentTypesList200Response;
import de.codemakers.netbox.client.model.ExtrasCustomFieldsList200Response;
import de.codemakers.netbox.client.model.ExtrasCustomLinksList200Response;
import de.codemakers.netbox.client.model.ExtrasExportTemplatesList200Response;
import de.codemakers.netbox.client.model.ExtrasImageAttachmentsList200Response;
import de.codemakers.netbox.client.model.ExtrasJobResultsList200Response;
import de.codemakers.netbox.client.model.ExtrasJournalEntriesList200Response;
import de.codemakers.netbox.client.model.ExtrasObjectChangesList200Response;
import de.codemakers.netbox.client.model.ExtrasTagsList200Response;
import de.codemakers.netbox.client.model.ExtrasWebhooksList200Response;
import de.codemakers.netbox.client.model.ImageAttachment;
import de.codemakers.netbox.client.model.JobResult;
import de.codemakers.netbox.client.model.JournalEntry;
import de.codemakers.netbox.client.model.ObjectChange;
import de.codemakers.netbox.client.model.Tag;
import de.codemakers.netbox.client.model.Webhook;
import de.codemakers.netbox.client.model.WritableConfigContext;
import de.codemakers.netbox.client.model.WritableCustomField;
import de.codemakers.netbox.client.model.WritableJournalEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExtrasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExtrasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExtrasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extrasConfigContextsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasConfigContextsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasConfigContextsBulkDelete() throws ApiException {
        extrasConfigContextsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasConfigContextsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsBulkPartialUpdateCall(WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsBulkPartialUpdateValidateBeforeCall(WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasConfigContextsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasConfigContextsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsBulkPartialUpdate(WritableConfigContext data) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsBulkPartialUpdateWithHttpInfo(WritableConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsBulkPartialUpdateAsync(WritableConfigContext data, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsBulkUpdateCall(WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsBulkUpdateValidateBeforeCall(WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasConfigContextsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasConfigContextsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsBulkUpdate(WritableConfigContext data) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsBulkUpdateWithHttpInfo(WritableConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsBulkUpdateAsync(WritableConfigContext data, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsCreateCall(WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsCreateValidateBeforeCall(WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasConfigContextsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasConfigContextsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsCreate(WritableConfigContext data) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsCreateWithHttpInfo(WritableConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsCreateAsync(WritableConfigContext data, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsDelete
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasConfigContextsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasConfigContextsDelete(Integer id) throws ApiException {
        extrasConfigContextsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasConfigContextsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsList
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroup  (optional)
     * @param siteGroupId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterTypeId  (optional)
     * @param clusterType  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tagId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterTypeIdN  (optional)
     * @param clusterTypeN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagIdN  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsListCall(String id, String name, String isActive, String created, String lastUpdated, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String locationId, String location, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active", isActive));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id", deviceTypeId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id", platformId));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (clusterTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type_id", clusterTypeId));
        }

        if (clusterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type", clusterType));
        }

        if (clusterGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group_id", clusterGroupId));
        }

        if (clusterGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group", clusterGroup));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (tagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_id", tagId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id__n", deviceTypeIdN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (platformIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id__n", platformIdN));
        }

        if (platformN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform__n", platformN));
        }

        if (clusterTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type_id__n", clusterTypeIdN));
        }

        if (clusterTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_type__n", clusterTypeN));
        }

        if (clusterGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group_id__n", clusterGroupIdN));
        }

        if (clusterGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_group__n", clusterGroupN));
        }

        if (clusterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id__n", clusterIdN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (tagIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_id__n", tagIdN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsListValidateBeforeCall(String id, String name, String isActive, String created, String lastUpdated, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String locationId, String location, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasConfigContextsListCall(id, name, isActive, created, lastUpdated, q, regionId, region, siteGroup, siteGroupId, siteId, site, locationId, location, deviceTypeId, roleId, role, platformId, platform, clusterTypeId, clusterType, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tagId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, regionIdN, regionN, siteGroupN, siteGroupIdN, siteIdN, siteN, locationIdN, locationN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, clusterTypeIdN, clusterTypeN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagIdN, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroup  (optional)
     * @param siteGroupId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterTypeId  (optional)
     * @param clusterType  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tagId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterTypeIdN  (optional)
     * @param clusterTypeN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagIdN  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasConfigContextsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasConfigContextsList200Response extrasConfigContextsList(String id, String name, String isActive, String created, String lastUpdated, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String locationId, String location, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasConfigContextsList200Response> localVarResp = extrasConfigContextsListWithHttpInfo(id, name, isActive, created, lastUpdated, q, regionId, region, siteGroup, siteGroupId, siteId, site, locationId, location, deviceTypeId, roleId, role, platformId, platform, clusterTypeId, clusterType, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tagId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, regionIdN, regionN, siteGroupN, siteGroupIdN, siteIdN, siteN, locationIdN, locationN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, clusterTypeIdN, clusterTypeN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagIdN, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroup  (optional)
     * @param siteGroupId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterTypeId  (optional)
     * @param clusterType  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tagId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterTypeIdN  (optional)
     * @param clusterTypeN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagIdN  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasConfigContextsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasConfigContextsList200Response> extrasConfigContextsListWithHttpInfo(String id, String name, String isActive, String created, String lastUpdated, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String locationId, String location, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsListValidateBeforeCall(id, name, isActive, created, lastUpdated, q, regionId, region, siteGroup, siteGroupId, siteId, site, locationId, location, deviceTypeId, roleId, role, platformId, platform, clusterTypeId, clusterType, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tagId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, regionIdN, regionN, siteGroupN, siteGroupIdN, siteIdN, siteN, locationIdN, locationN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, clusterTypeIdN, clusterTypeN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagIdN, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasConfigContextsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param isActive  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroup  (optional)
     * @param siteGroupId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param clusterTypeId  (optional)
     * @param clusterType  (optional)
     * @param clusterGroupId  (optional)
     * @param clusterGroup  (optional)
     * @param clusterId  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tagId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param clusterTypeIdN  (optional)
     * @param clusterTypeN  (optional)
     * @param clusterGroupIdN  (optional)
     * @param clusterGroupN  (optional)
     * @param clusterIdN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagIdN  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsListAsync(String id, String name, String isActive, String created, String lastUpdated, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String locationId, String location, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasConfigContextsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsListValidateBeforeCall(id, name, isActive, created, lastUpdated, q, regionId, region, siteGroup, siteGroupId, siteId, site, locationId, location, deviceTypeId, roleId, role, platformId, platform, clusterTypeId, clusterType, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tagId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, regionIdN, regionN, siteGroupN, siteGroupIdN, siteIdN, siteN, locationIdN, locationN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, clusterTypeIdN, clusterTypeN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagIdN, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasConfigContextsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsPartialUpdate
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsPartialUpdateCall(Integer id, WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsPartialUpdateValidateBeforeCall(Integer id, WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasConfigContextsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasConfigContextsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsPartialUpdate(Integer id, WritableConfigContext data) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsPartialUpdateWithHttpInfo(Integer id, WritableConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsPartialUpdateAsync(Integer id, WritableConfigContext data, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsRead
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasConfigContextsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsRead(Integer id) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsReadAsync(Integer id, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasConfigContextsUpdate
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsUpdateCall(Integer id, WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/config-contexts/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasConfigContextsUpdateValidateBeforeCall(Integer id, WritableConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasConfigContextsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasConfigContextsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasConfigContextsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @return ConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConfigContext extrasConfigContextsUpdate(Integer id, WritableConfigContext data) throws ApiException {
        ApiResponse<ConfigContext> localVarResp = extrasConfigContextsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigContext> extrasConfigContextsUpdateWithHttpInfo(Integer id, WritableConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = extrasConfigContextsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this config context. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasConfigContextsUpdateAsync(Integer id, WritableConfigContext data, final ApiCallback<ConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasConfigContextsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasContentTypesList
     * @param id  (optional)
     * @param appLabel  (optional)
     * @param model  (optional)
     * @param q  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasContentTypesListCall(BigDecimal id, String appLabel, String model, String q, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/content-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (appLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_label", appLabel));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasContentTypesListValidateBeforeCall(BigDecimal id, String appLabel, String model, String q, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasContentTypesListCall(id, appLabel, model, q, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param id  (optional)
     * @param appLabel  (optional)
     * @param model  (optional)
     * @param q  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasContentTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasContentTypesList200Response extrasContentTypesList(BigDecimal id, String appLabel, String model, String q, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasContentTypesList200Response> localVarResp = extrasContentTypesListWithHttpInfo(id, appLabel, model, q, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param id  (optional)
     * @param appLabel  (optional)
     * @param model  (optional)
     * @param q  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasContentTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasContentTypesList200Response> extrasContentTypesListWithHttpInfo(BigDecimal id, String appLabel, String model, String q, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasContentTypesListValidateBeforeCall(id, appLabel, model, q, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasContentTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param id  (optional)
     * @param appLabel  (optional)
     * @param model  (optional)
     * @param q  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasContentTypesListAsync(BigDecimal id, String appLabel, String model, String q, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasContentTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasContentTypesListValidateBeforeCall(id, appLabel, model, q, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasContentTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasContentTypesRead
     * @param id A unique integer value identifying this content type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasContentTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/content-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasContentTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasContentTypesRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasContentTypesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param id A unique integer value identifying this content type. (required)
     * @return ContentType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ContentType extrasContentTypesRead(Integer id) throws ApiException {
        ApiResponse<ContentType> localVarResp = extrasContentTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param id A unique integer value identifying this content type. (required)
     * @return ApiResponse&lt;ContentType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentType> extrasContentTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasContentTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContentType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param id A unique integer value identifying this content type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasContentTypesReadAsync(Integer id, final ApiCallback<ContentType> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasContentTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContentType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasCustomFieldsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasCustomFieldsBulkDelete() throws ApiException {
        extrasCustomFieldsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasCustomFieldsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsBulkPartialUpdateCall(WritableCustomField data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsBulkPartialUpdateValidateBeforeCall(WritableCustomField data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomFieldsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomFieldsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CustomField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomField extrasCustomFieldsBulkPartialUpdate(WritableCustomField data) throws ApiException {
        ApiResponse<CustomField> localVarResp = extrasCustomFieldsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CustomField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomField> extrasCustomFieldsBulkPartialUpdateWithHttpInfo(WritableCustomField data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsBulkPartialUpdateAsync(WritableCustomField data, final ApiCallback<CustomField> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsBulkUpdateCall(WritableCustomField data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsBulkUpdateValidateBeforeCall(WritableCustomField data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomFieldsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomFieldsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CustomField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomField extrasCustomFieldsBulkUpdate(WritableCustomField data) throws ApiException {
        ApiResponse<CustomField> localVarResp = extrasCustomFieldsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CustomField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomField> extrasCustomFieldsBulkUpdateWithHttpInfo(WritableCustomField data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsBulkUpdateAsync(WritableCustomField data, final ApiCallback<CustomField> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsCreateCall(WritableCustomField data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsCreateValidateBeforeCall(WritableCustomField data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomFieldsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomFieldsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CustomField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomField extrasCustomFieldsCreate(WritableCustomField data) throws ApiException {
        ApiResponse<CustomField> localVarResp = extrasCustomFieldsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CustomField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomField> extrasCustomFieldsCreateWithHttpInfo(WritableCustomField data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsCreateAsync(WritableCustomField data, final ApiCallback<CustomField> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsDelete
     * @param id A unique integer value identifying this custom field. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomFieldsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomFieldsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasCustomFieldsDelete(Integer id) throws ApiException {
        extrasCustomFieldsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasCustomFieldsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsList
     * @param id  (optional)
     * @param contentTypes  (optional)
     * @param name  (optional)
     * @param groupName  (optional)
     * @param required  (optional)
     * @param filterLogic  (optional)
     * @param uiVisibility  (optional)
     * @param weight  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param filterLogicN  (optional)
     * @param uiVisibilityN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param typeN  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsListCall(String id, String contentTypes, String name, String groupName, String required, String filterLogic, String uiVisibility, String weight, String description, String q, String type, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String filterLogicN, String uiVisibilityN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (contentTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types", contentTypes));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name", groupName));
        }

        if (required != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("required", required));
        }

        if (filterLogic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_logic", filterLogic));
        }

        if (uiVisibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ui_visibility", uiVisibility));
        }

        if (weight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight", weight));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (contentTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id", contentTypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (contentTypesN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__n", contentTypesN));
        }

        if (contentTypesIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__ic", contentTypesIc));
        }

        if (contentTypesNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__nic", contentTypesNic));
        }

        if (contentTypesIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__iew", contentTypesIew));
        }

        if (contentTypesNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__niew", contentTypesNiew));
        }

        if (contentTypesIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__isw", contentTypesIsw));
        }

        if (contentTypesNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__nisw", contentTypesNisw));
        }

        if (contentTypesIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__ie", contentTypesIe));
        }

        if (contentTypesNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__nie", contentTypesNie));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (groupNameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__n", groupNameN));
        }

        if (groupNameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__ic", groupNameIc));
        }

        if (groupNameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__nic", groupNameNic));
        }

        if (groupNameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__iew", groupNameIew));
        }

        if (groupNameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__niew", groupNameNiew));
        }

        if (groupNameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__isw", groupNameIsw));
        }

        if (groupNameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__nisw", groupNameNisw));
        }

        if (groupNameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__ie", groupNameIe));
        }

        if (groupNameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__nie", groupNameNie));
        }

        if (filterLogicN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_logic__n", filterLogicN));
        }

        if (uiVisibilityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ui_visibility__n", uiVisibilityN));
        }

        if (weightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__n", weightN));
        }

        if (weightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lte", weightLte));
        }

        if (weightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lt", weightLt));
        }

        if (weightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gte", weightGte));
        }

        if (weightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gt", weightGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (contentTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__n", contentTypeIdN));
        }

        if (contentTypeIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__lte", contentTypeIdLte));
        }

        if (contentTypeIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__lt", contentTypeIdLt));
        }

        if (contentTypeIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__gte", contentTypeIdGte));
        }

        if (contentTypeIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__gt", contentTypeIdGt));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsListValidateBeforeCall(String id, String contentTypes, String name, String groupName, String required, String filterLogic, String uiVisibility, String weight, String description, String q, String type, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String filterLogicN, String uiVisibilityN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasCustomFieldsListCall(id, contentTypes, name, groupName, required, filterLogic, uiVisibility, weight, description, q, type, contentTypeId, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, filterLogicN, uiVisibilityN, weightN, weightLte, weightLt, weightGte, weightGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, typeN, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentTypes  (optional)
     * @param name  (optional)
     * @param groupName  (optional)
     * @param required  (optional)
     * @param filterLogic  (optional)
     * @param uiVisibility  (optional)
     * @param weight  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param filterLogicN  (optional)
     * @param uiVisibilityN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param typeN  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasCustomFieldsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasCustomFieldsList200Response extrasCustomFieldsList(String id, String contentTypes, String name, String groupName, String required, String filterLogic, String uiVisibility, String weight, String description, String q, String type, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String filterLogicN, String uiVisibilityN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasCustomFieldsList200Response> localVarResp = extrasCustomFieldsListWithHttpInfo(id, contentTypes, name, groupName, required, filterLogic, uiVisibility, weight, description, q, type, contentTypeId, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, filterLogicN, uiVisibilityN, weightN, weightLte, weightLt, weightGte, weightGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, typeN, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentTypes  (optional)
     * @param name  (optional)
     * @param groupName  (optional)
     * @param required  (optional)
     * @param filterLogic  (optional)
     * @param uiVisibility  (optional)
     * @param weight  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param filterLogicN  (optional)
     * @param uiVisibilityN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param typeN  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasCustomFieldsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasCustomFieldsList200Response> extrasCustomFieldsListWithHttpInfo(String id, String contentTypes, String name, String groupName, String required, String filterLogic, String uiVisibility, String weight, String description, String q, String type, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String filterLogicN, String uiVisibilityN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsListValidateBeforeCall(id, contentTypes, name, groupName, required, filterLogic, uiVisibility, weight, description, q, type, contentTypeId, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, filterLogicN, uiVisibilityN, weightN, weightLte, weightLt, weightGte, weightGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, typeN, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasCustomFieldsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentTypes  (optional)
     * @param name  (optional)
     * @param groupName  (optional)
     * @param required  (optional)
     * @param filterLogic  (optional)
     * @param uiVisibility  (optional)
     * @param weight  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param filterLogicN  (optional)
     * @param uiVisibilityN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param typeN  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsListAsync(String id, String contentTypes, String name, String groupName, String required, String filterLogic, String uiVisibility, String weight, String description, String q, String type, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String filterLogicN, String uiVisibilityN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasCustomFieldsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsListValidateBeforeCall(id, contentTypes, name, groupName, required, filterLogic, uiVisibility, weight, description, q, type, contentTypeId, idN, idLte, idLt, idGte, idGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, filterLogicN, uiVisibilityN, weightN, weightLte, weightLt, weightGte, weightGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, typeN, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasCustomFieldsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsPartialUpdate
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsPartialUpdateCall(Integer id, WritableCustomField data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsPartialUpdateValidateBeforeCall(Integer id, WritableCustomField data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomFieldsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomFieldsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomFieldsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @return CustomField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomField extrasCustomFieldsPartialUpdate(Integer id, WritableCustomField data) throws ApiException {
        ApiResponse<CustomField> localVarResp = extrasCustomFieldsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @return ApiResponse&lt;CustomField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomField> extrasCustomFieldsPartialUpdateWithHttpInfo(Integer id, WritableCustomField data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsPartialUpdateAsync(Integer id, WritableCustomField data, final ApiCallback<CustomField> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsRead
     * @param id A unique integer value identifying this custom field. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomFieldsRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomFieldsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @return CustomField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomField extrasCustomFieldsRead(Integer id) throws ApiException {
        ApiResponse<CustomField> localVarResp = extrasCustomFieldsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @return ApiResponse&lt;CustomField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomField> extrasCustomFieldsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsReadAsync(Integer id, final ApiCallback<CustomField> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomFieldsUpdate
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsUpdateCall(Integer id, WritableCustomField data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-fields/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomFieldsUpdateValidateBeforeCall(Integer id, WritableCustomField data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomFieldsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomFieldsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomFieldsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @return CustomField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomField extrasCustomFieldsUpdate(Integer id, WritableCustomField data) throws ApiException {
        ApiResponse<CustomField> localVarResp = extrasCustomFieldsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @return ApiResponse&lt;CustomField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomField> extrasCustomFieldsUpdateWithHttpInfo(Integer id, WritableCustomField data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomFieldsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom field. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomFieldsUpdateAsync(Integer id, WritableCustomField data, final ApiCallback<CustomField> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomFieldsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CustomField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasCustomLinksBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasCustomLinksBulkDelete() throws ApiException {
        extrasCustomLinksBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasCustomLinksBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksBulkPartialUpdateCall(CustomLink data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksBulkPartialUpdateValidateBeforeCall(CustomLink data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomLinksBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomLinksBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CustomLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomLink extrasCustomLinksBulkPartialUpdate(CustomLink data) throws ApiException {
        ApiResponse<CustomLink> localVarResp = extrasCustomLinksBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CustomLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomLink> extrasCustomLinksBulkPartialUpdateWithHttpInfo(CustomLink data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksBulkPartialUpdateAsync(CustomLink data, final ApiCallback<CustomLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksBulkUpdateCall(CustomLink data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksBulkUpdateValidateBeforeCall(CustomLink data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomLinksBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomLinksBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CustomLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomLink extrasCustomLinksBulkUpdate(CustomLink data) throws ApiException {
        ApiResponse<CustomLink> localVarResp = extrasCustomLinksBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CustomLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomLink> extrasCustomLinksBulkUpdateWithHttpInfo(CustomLink data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksBulkUpdateAsync(CustomLink data, final ApiCallback<CustomLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksCreateCall(CustomLink data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksCreateValidateBeforeCall(CustomLink data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomLinksCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomLinksCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CustomLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomLink extrasCustomLinksCreate(CustomLink data) throws ApiException {
        ApiResponse<CustomLink> localVarResp = extrasCustomLinksCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CustomLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomLink> extrasCustomLinksCreateWithHttpInfo(CustomLink data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksCreateAsync(CustomLink data, final ApiCallback<CustomLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksDelete
     * @param id A unique integer value identifying this custom link. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-links/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomLinksDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomLinksDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasCustomLinksDelete(Integer id) throws ApiException {
        extrasCustomLinksDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasCustomLinksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksList
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param enabled  (optional)
     * @param linkText  (optional)
     * @param linkUrl  (optional)
     * @param weight  (optional)
     * @param groupName  (optional)
     * @param newWindow  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param linkTextN  (optional)
     * @param linkTextIc  (optional)
     * @param linkTextNic  (optional)
     * @param linkTextIew  (optional)
     * @param linkTextNiew  (optional)
     * @param linkTextIsw  (optional)
     * @param linkTextNisw  (optional)
     * @param linkTextIe  (optional)
     * @param linkTextNie  (optional)
     * @param linkUrlN  (optional)
     * @param linkUrlIc  (optional)
     * @param linkUrlNic  (optional)
     * @param linkUrlIew  (optional)
     * @param linkUrlNiew  (optional)
     * @param linkUrlIsw  (optional)
     * @param linkUrlNisw  (optional)
     * @param linkUrlIe  (optional)
     * @param linkUrlNie  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksListCall(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (linkText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text", linkText));
        }

        if (linkUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url", linkUrl));
        }

        if (weight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight", weight));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name", groupName));
        }

        if (newWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("new_window", newWindow));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (contentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type__n", contentTypeN));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (linkTextN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__n", linkTextN));
        }

        if (linkTextIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__ic", linkTextIc));
        }

        if (linkTextNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__nic", linkTextNic));
        }

        if (linkTextIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__iew", linkTextIew));
        }

        if (linkTextNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__niew", linkTextNiew));
        }

        if (linkTextIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__isw", linkTextIsw));
        }

        if (linkTextNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__nisw", linkTextNisw));
        }

        if (linkTextIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__ie", linkTextIe));
        }

        if (linkTextNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_text__nie", linkTextNie));
        }

        if (linkUrlN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__n", linkUrlN));
        }

        if (linkUrlIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__ic", linkUrlIc));
        }

        if (linkUrlNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__nic", linkUrlNic));
        }

        if (linkUrlIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__iew", linkUrlIew));
        }

        if (linkUrlNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__niew", linkUrlNiew));
        }

        if (linkUrlIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__isw", linkUrlIsw));
        }

        if (linkUrlNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__nisw", linkUrlNisw));
        }

        if (linkUrlIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__ie", linkUrlIe));
        }

        if (linkUrlNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url__nie", linkUrlNie));
        }

        if (weightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__n", weightN));
        }

        if (weightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lte", weightLte));
        }

        if (weightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lt", weightLt));
        }

        if (weightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gte", weightGte));
        }

        if (weightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gt", weightGt));
        }

        if (groupNameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__n", groupNameN));
        }

        if (groupNameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__ic", groupNameIc));
        }

        if (groupNameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__nic", groupNameNic));
        }

        if (groupNameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__iew", groupNameIew));
        }

        if (groupNameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__niew", groupNameNiew));
        }

        if (groupNameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__isw", groupNameIsw));
        }

        if (groupNameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__nisw", groupNameNisw));
        }

        if (groupNameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__ie", groupNameIe));
        }

        if (groupNameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name__nie", groupNameNie));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksListValidateBeforeCall(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasCustomLinksListCall(id, contentType, name, enabled, linkText, linkUrl, weight, groupName, newWindow, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, linkTextN, linkTextIc, linkTextNic, linkTextIew, linkTextNiew, linkTextIsw, linkTextNisw, linkTextIe, linkTextNie, linkUrlN, linkUrlIc, linkUrlNic, linkUrlIew, linkUrlNiew, linkUrlIsw, linkUrlNisw, linkUrlIe, linkUrlNie, weightN, weightLte, weightLt, weightGte, weightGt, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param enabled  (optional)
     * @param linkText  (optional)
     * @param linkUrl  (optional)
     * @param weight  (optional)
     * @param groupName  (optional)
     * @param newWindow  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param linkTextN  (optional)
     * @param linkTextIc  (optional)
     * @param linkTextNic  (optional)
     * @param linkTextIew  (optional)
     * @param linkTextNiew  (optional)
     * @param linkTextIsw  (optional)
     * @param linkTextNisw  (optional)
     * @param linkTextIe  (optional)
     * @param linkTextNie  (optional)
     * @param linkUrlN  (optional)
     * @param linkUrlIc  (optional)
     * @param linkUrlNic  (optional)
     * @param linkUrlIew  (optional)
     * @param linkUrlNiew  (optional)
     * @param linkUrlIsw  (optional)
     * @param linkUrlNisw  (optional)
     * @param linkUrlIe  (optional)
     * @param linkUrlNie  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasCustomLinksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasCustomLinksList200Response extrasCustomLinksList(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasCustomLinksList200Response> localVarResp = extrasCustomLinksListWithHttpInfo(id, contentType, name, enabled, linkText, linkUrl, weight, groupName, newWindow, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, linkTextN, linkTextIc, linkTextNic, linkTextIew, linkTextNiew, linkTextIsw, linkTextNisw, linkTextIe, linkTextNie, linkUrlN, linkUrlIc, linkUrlNic, linkUrlIew, linkUrlNiew, linkUrlIsw, linkUrlNisw, linkUrlIe, linkUrlNie, weightN, weightLte, weightLt, weightGte, weightGt, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param enabled  (optional)
     * @param linkText  (optional)
     * @param linkUrl  (optional)
     * @param weight  (optional)
     * @param groupName  (optional)
     * @param newWindow  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param linkTextN  (optional)
     * @param linkTextIc  (optional)
     * @param linkTextNic  (optional)
     * @param linkTextIew  (optional)
     * @param linkTextNiew  (optional)
     * @param linkTextIsw  (optional)
     * @param linkTextNisw  (optional)
     * @param linkTextIe  (optional)
     * @param linkTextNie  (optional)
     * @param linkUrlN  (optional)
     * @param linkUrlIc  (optional)
     * @param linkUrlNic  (optional)
     * @param linkUrlIew  (optional)
     * @param linkUrlNiew  (optional)
     * @param linkUrlIsw  (optional)
     * @param linkUrlNisw  (optional)
     * @param linkUrlIe  (optional)
     * @param linkUrlNie  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasCustomLinksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasCustomLinksList200Response> extrasCustomLinksListWithHttpInfo(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksListValidateBeforeCall(id, contentType, name, enabled, linkText, linkUrl, weight, groupName, newWindow, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, linkTextN, linkTextIc, linkTextNic, linkTextIew, linkTextNiew, linkTextIsw, linkTextNisw, linkTextIe, linkTextNie, linkUrlN, linkUrlIc, linkUrlNic, linkUrlIew, linkUrlNiew, linkUrlIsw, linkUrlNisw, linkUrlIe, linkUrlNie, weightN, weightLte, weightLt, weightGte, weightGt, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasCustomLinksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param enabled  (optional)
     * @param linkText  (optional)
     * @param linkUrl  (optional)
     * @param weight  (optional)
     * @param groupName  (optional)
     * @param newWindow  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param linkTextN  (optional)
     * @param linkTextIc  (optional)
     * @param linkTextNic  (optional)
     * @param linkTextIew  (optional)
     * @param linkTextNiew  (optional)
     * @param linkTextIsw  (optional)
     * @param linkTextNisw  (optional)
     * @param linkTextIe  (optional)
     * @param linkTextNie  (optional)
     * @param linkUrlN  (optional)
     * @param linkUrlIc  (optional)
     * @param linkUrlNic  (optional)
     * @param linkUrlIew  (optional)
     * @param linkUrlNiew  (optional)
     * @param linkUrlIsw  (optional)
     * @param linkUrlNisw  (optional)
     * @param linkUrlIe  (optional)
     * @param linkUrlNie  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param groupNameN  (optional)
     * @param groupNameIc  (optional)
     * @param groupNameNic  (optional)
     * @param groupNameIew  (optional)
     * @param groupNameNiew  (optional)
     * @param groupNameIsw  (optional)
     * @param groupNameNisw  (optional)
     * @param groupNameIe  (optional)
     * @param groupNameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksListAsync(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasCustomLinksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksListValidateBeforeCall(id, contentType, name, enabled, linkText, linkUrl, weight, groupName, newWindow, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, linkTextN, linkTextIc, linkTextNic, linkTextIew, linkTextNiew, linkTextIsw, linkTextNisw, linkTextIe, linkTextNie, linkUrlN, linkUrlIc, linkUrlNic, linkUrlIew, linkUrlNiew, linkUrlIsw, linkUrlNisw, linkUrlIe, linkUrlNie, weightN, weightLte, weightLt, weightGte, weightGt, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasCustomLinksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksPartialUpdate
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksPartialUpdateCall(Integer id, CustomLink data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-links/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksPartialUpdateValidateBeforeCall(Integer id, CustomLink data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomLinksPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomLinksPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomLinksPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @return CustomLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomLink extrasCustomLinksPartialUpdate(Integer id, CustomLink data) throws ApiException {
        ApiResponse<CustomLink> localVarResp = extrasCustomLinksPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @return ApiResponse&lt;CustomLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomLink> extrasCustomLinksPartialUpdateWithHttpInfo(Integer id, CustomLink data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksPartialUpdateAsync(Integer id, CustomLink data, final ApiCallback<CustomLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksRead
     * @param id A unique integer value identifying this custom link. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/custom-links/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomLinksRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomLinksReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @return CustomLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomLink extrasCustomLinksRead(Integer id) throws ApiException {
        ApiResponse<CustomLink> localVarResp = extrasCustomLinksReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @return ApiResponse&lt;CustomLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomLink> extrasCustomLinksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksReadAsync(Integer id, final ApiCallback<CustomLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasCustomLinksUpdate
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksUpdateCall(Integer id, CustomLink data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/custom-links/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasCustomLinksUpdateValidateBeforeCall(Integer id, CustomLink data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasCustomLinksUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasCustomLinksUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasCustomLinksUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @return CustomLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CustomLink extrasCustomLinksUpdate(Integer id, CustomLink data) throws ApiException {
        ApiResponse<CustomLink> localVarResp = extrasCustomLinksUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @return ApiResponse&lt;CustomLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomLink> extrasCustomLinksUpdateWithHttpInfo(Integer id, CustomLink data) throws ApiException {
        okhttp3.Call localVarCall = extrasCustomLinksUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this custom link. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasCustomLinksUpdateAsync(Integer id, CustomLink data, final ApiCallback<CustomLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasCustomLinksUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CustomLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/export-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasExportTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasExportTemplatesBulkDelete() throws ApiException {
        extrasExportTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasExportTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesBulkPartialUpdateCall(ExportTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/export-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesBulkPartialUpdateValidateBeforeCall(ExportTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasExportTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasExportTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesBulkPartialUpdate(ExportTemplate data) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesBulkPartialUpdateWithHttpInfo(ExportTemplate data) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesBulkPartialUpdateAsync(ExportTemplate data, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesBulkUpdateCall(ExportTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/export-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesBulkUpdateValidateBeforeCall(ExportTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasExportTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasExportTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesBulkUpdate(ExportTemplate data) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesBulkUpdateWithHttpInfo(ExportTemplate data) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesBulkUpdateAsync(ExportTemplate data, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesCreateCall(ExportTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/export-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesCreateValidateBeforeCall(ExportTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasExportTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasExportTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesCreate(ExportTemplate data) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesCreateWithHttpInfo(ExportTemplate data) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesCreateAsync(ExportTemplate data, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesDelete
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasExportTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasExportTemplatesDelete(Integer id) throws ApiException {
        extrasExportTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasExportTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesList
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesListCall(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/export-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (contentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type__n", contentTypeN));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesListValidateBeforeCall(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasExportTemplatesListCall(id, contentType, name, description, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasExportTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasExportTemplatesList200Response extrasExportTemplatesList(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasExportTemplatesList200Response> localVarResp = extrasExportTemplatesListWithHttpInfo(id, contentType, name, description, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasExportTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasExportTemplatesList200Response> extrasExportTemplatesListWithHttpInfo(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesListValidateBeforeCall(id, contentType, name, description, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasExportTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentType  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesListAsync(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasExportTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesListValidateBeforeCall(id, contentType, name, description, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasExportTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesPartialUpdate
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesPartialUpdateCall(Integer id, ExportTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesPartialUpdateValidateBeforeCall(Integer id, ExportTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasExportTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasExportTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesPartialUpdate(Integer id, ExportTemplate data) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesPartialUpdateWithHttpInfo(Integer id, ExportTemplate data) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesPartialUpdateAsync(Integer id, ExportTemplate data, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesRead
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasExportTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesReadAsync(Integer id, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasExportTemplatesUpdate
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesUpdateCall(Integer id, ExportTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/export-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasExportTemplatesUpdateValidateBeforeCall(Integer id, ExportTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasExportTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasExportTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasExportTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @return ExportTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportTemplate extrasExportTemplatesUpdate(Integer id, ExportTemplate data) throws ApiException {
        ApiResponse<ExportTemplate> localVarResp = extrasExportTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ExportTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTemplate> extrasExportTemplatesUpdateWithHttpInfo(Integer id, ExportTemplate data) throws ApiException {
        okhttp3.Call localVarCall = extrasExportTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this export template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasExportTemplatesUpdateAsync(Integer id, ExportTemplate data, final ApiCallback<ExportTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasExportTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ExportTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasImageAttachmentsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasImageAttachmentsBulkDelete() throws ApiException {
        extrasImageAttachmentsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasImageAttachmentsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsBulkPartialUpdateCall(ImageAttachment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsBulkPartialUpdateValidateBeforeCall(ImageAttachment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasImageAttachmentsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasImageAttachmentsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsBulkPartialUpdate(ImageAttachment data) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsBulkPartialUpdateWithHttpInfo(ImageAttachment data) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsBulkPartialUpdateAsync(ImageAttachment data, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsBulkUpdateCall(ImageAttachment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsBulkUpdateValidateBeforeCall(ImageAttachment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasImageAttachmentsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasImageAttachmentsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsBulkUpdate(ImageAttachment data) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsBulkUpdateWithHttpInfo(ImageAttachment data) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsBulkUpdateAsync(ImageAttachment data, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsCreateCall(ImageAttachment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsCreateValidateBeforeCall(ImageAttachment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasImageAttachmentsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasImageAttachmentsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsCreate(ImageAttachment data) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsCreateWithHttpInfo(ImageAttachment data) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsCreateAsync(ImageAttachment data, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsDelete
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasImageAttachmentsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasImageAttachmentsDelete(Integer id) throws ApiException {
        extrasImageAttachmentsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasImageAttachmentsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsList
     * @param id  (optional)
     * @param contentTypeId  (optional)
     * @param objectId  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param created  (optional)
     * @param contentType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeIdN  (optional)
     * @param objectIdN  (optional)
     * @param objectIdLte  (optional)
     * @param objectIdLt  (optional)
     * @param objectIdGte  (optional)
     * @param objectIdGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param contentTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsListCall(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (contentTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id", contentTypeId));
        }

        if (objectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id", objectId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (contentTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__n", contentTypeIdN));
        }

        if (objectIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__n", objectIdN));
        }

        if (objectIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__lte", objectIdLte));
        }

        if (objectIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__lt", objectIdLt));
        }

        if (objectIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__gte", objectIdGte));
        }

        if (objectIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id__gt", objectIdGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (contentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type__n", contentTypeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsListValidateBeforeCall(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasImageAttachmentsListCall(id, contentTypeId, objectId, name, q, created, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentTypeId  (optional)
     * @param objectId  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param created  (optional)
     * @param contentType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeIdN  (optional)
     * @param objectIdN  (optional)
     * @param objectIdLte  (optional)
     * @param objectIdLt  (optional)
     * @param objectIdGte  (optional)
     * @param objectIdGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param contentTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasImageAttachmentsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasImageAttachmentsList200Response extrasImageAttachmentsList(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasImageAttachmentsList200Response> localVarResp = extrasImageAttachmentsListWithHttpInfo(id, contentTypeId, objectId, name, q, created, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentTypeId  (optional)
     * @param objectId  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param created  (optional)
     * @param contentType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeIdN  (optional)
     * @param objectIdN  (optional)
     * @param objectIdLte  (optional)
     * @param objectIdLt  (optional)
     * @param objectIdGte  (optional)
     * @param objectIdGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param contentTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasImageAttachmentsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasImageAttachmentsList200Response> extrasImageAttachmentsListWithHttpInfo(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsListValidateBeforeCall(id, contentTypeId, objectId, name, q, created, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasImageAttachmentsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param contentTypeId  (optional)
     * @param objectId  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param created  (optional)
     * @param contentType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param contentTypeIdN  (optional)
     * @param objectIdN  (optional)
     * @param objectIdLte  (optional)
     * @param objectIdLt  (optional)
     * @param objectIdGte  (optional)
     * @param objectIdGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param contentTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsListAsync(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasImageAttachmentsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsListValidateBeforeCall(id, contentTypeId, objectId, name, q, created, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasImageAttachmentsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsPartialUpdate
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsPartialUpdateCall(Integer id, ImageAttachment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsPartialUpdateValidateBeforeCall(Integer id, ImageAttachment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasImageAttachmentsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasImageAttachmentsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsPartialUpdate(Integer id, ImageAttachment data) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsPartialUpdateWithHttpInfo(Integer id, ImageAttachment data) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsPartialUpdateAsync(Integer id, ImageAttachment data, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsRead
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasImageAttachmentsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsRead(Integer id) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsReadAsync(Integer id, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasImageAttachmentsUpdate
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsUpdateCall(Integer id, ImageAttachment data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/image-attachments/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasImageAttachmentsUpdateValidateBeforeCall(Integer id, ImageAttachment data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasImageAttachmentsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasImageAttachmentsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasImageAttachmentsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @return ImageAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImageAttachment extrasImageAttachmentsUpdate(Integer id, ImageAttachment data) throws ApiException {
        ApiResponse<ImageAttachment> localVarResp = extrasImageAttachmentsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ImageAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAttachment> extrasImageAttachmentsUpdateWithHttpInfo(Integer id, ImageAttachment data) throws ApiException {
        okhttp3.Call localVarCall = extrasImageAttachmentsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this image attachment. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasImageAttachmentsUpdateAsync(Integer id, ImageAttachment data, final ApiCallback<ImageAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasImageAttachmentsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ImageAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJobResultsList
     * @param id  (optional)
     * @param created  (optional)
     * @param completed  (optional)
     * @param status  (optional)
     * @param user  (optional)
     * @param objType  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param userN  (optional)
     * @param objTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJobResultsListCall(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/job-results/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (completed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed", completed));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (objType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("obj_type", objType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (userN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__n", userN));
        }

        if (objTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("obj_type__n", objTypeN));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJobResultsListValidateBeforeCall(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasJobResultsListCall(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a list of job results
     * @param id  (optional)
     * @param created  (optional)
     * @param completed  (optional)
     * @param status  (optional)
     * @param user  (optional)
     * @param objType  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param userN  (optional)
     * @param objTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasJobResultsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasJobResultsList200Response extrasJobResultsList(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasJobResultsList200Response> localVarResp = extrasJobResultsListWithHttpInfo(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of job results
     * @param id  (optional)
     * @param created  (optional)
     * @param completed  (optional)
     * @param status  (optional)
     * @param user  (optional)
     * @param objType  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param userN  (optional)
     * @param objTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasJobResultsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasJobResultsList200Response> extrasJobResultsListWithHttpInfo(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasJobResultsListValidateBeforeCall(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasJobResultsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of job results
     * @param id  (optional)
     * @param created  (optional)
     * @param completed  (optional)
     * @param status  (optional)
     * @param user  (optional)
     * @param objType  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param userN  (optional)
     * @param objTypeN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJobResultsListAsync(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasJobResultsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJobResultsListValidateBeforeCall(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasJobResultsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJobResultsRead
     * @param id A unique integer value identifying this job result. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJobResultsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/job-results/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJobResultsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasJobResultsRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJobResultsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a list of job results
     * @param id A unique integer value identifying this job result. (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JobResult extrasJobResultsRead(Integer id) throws ApiException {
        ApiResponse<JobResult> localVarResp = extrasJobResultsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of job results
     * @param id A unique integer value identifying this job result. (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> extrasJobResultsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasJobResultsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of job results
     * @param id A unique integer value identifying this job result. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJobResultsReadAsync(Integer id, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJobResultsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasJournalEntriesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasJournalEntriesBulkDelete() throws ApiException {
        extrasJournalEntriesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasJournalEntriesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesBulkPartialUpdateCall(WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesBulkPartialUpdateValidateBeforeCall(WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasJournalEntriesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJournalEntriesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return JournalEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JournalEntry extrasJournalEntriesBulkPartialUpdate(WritableJournalEntry data) throws ApiException {
        ApiResponse<JournalEntry> localVarResp = extrasJournalEntriesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;JournalEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalEntry> extrasJournalEntriesBulkPartialUpdateWithHttpInfo(WritableJournalEntry data) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesBulkPartialUpdateAsync(WritableJournalEntry data, final ApiCallback<JournalEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesBulkUpdateCall(WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesBulkUpdateValidateBeforeCall(WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasJournalEntriesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJournalEntriesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return JournalEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JournalEntry extrasJournalEntriesBulkUpdate(WritableJournalEntry data) throws ApiException {
        ApiResponse<JournalEntry> localVarResp = extrasJournalEntriesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;JournalEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalEntry> extrasJournalEntriesBulkUpdateWithHttpInfo(WritableJournalEntry data) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesBulkUpdateAsync(WritableJournalEntry data, final ApiCallback<JournalEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesCreateCall(WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesCreateValidateBeforeCall(WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasJournalEntriesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJournalEntriesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return JournalEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JournalEntry extrasJournalEntriesCreate(WritableJournalEntry data) throws ApiException {
        ApiResponse<JournalEntry> localVarResp = extrasJournalEntriesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;JournalEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalEntry> extrasJournalEntriesCreateWithHttpInfo(WritableJournalEntry data) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesCreateAsync(WritableJournalEntry data, final ApiCallback<JournalEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesDelete
     * @param id A unique integer value identifying this journal entry. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasJournalEntriesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJournalEntriesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasJournalEntriesDelete(Integer id) throws ApiException {
        extrasJournalEntriesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasJournalEntriesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesList
     * @param id  (optional)
     * @param assignedObjectTypeId  (optional)
     * @param assignedObjectId  (optional)
     * @param created  (optional)
     * @param kind  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param assignedObjectType  (optional)
     * @param createdById  (optional)
     * @param createdBy  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assignedObjectTypeIdN  (optional)
     * @param assignedObjectIdN  (optional)
     * @param assignedObjectIdLte  (optional)
     * @param assignedObjectIdLt  (optional)
     * @param assignedObjectIdGte  (optional)
     * @param assignedObjectIdGt  (optional)
     * @param kindN  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param assignedObjectTypeN  (optional)
     * @param createdByIdN  (optional)
     * @param createdByN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesListCall(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String lastUpdated, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (assignedObjectTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type_id", assignedObjectTypeId));
        }

        if (assignedObjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_id", assignedObjectId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (assignedObjectType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type", assignedObjectType));
        }

        if (createdById != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by_id", createdById));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by", createdBy));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (assignedObjectTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type_id__n", assignedObjectTypeIdN));
        }

        if (assignedObjectIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_id__n", assignedObjectIdN));
        }

        if (assignedObjectIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_id__lte", assignedObjectIdLte));
        }

        if (assignedObjectIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_id__lt", assignedObjectIdLt));
        }

        if (assignedObjectIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_id__gte", assignedObjectIdGte));
        }

        if (assignedObjectIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_id__gt", assignedObjectIdGt));
        }

        if (kindN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind__n", kindN));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (assignedObjectTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_object_type__n", assignedObjectTypeN));
        }

        if (createdByIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by_id__n", createdByIdN));
        }

        if (createdByN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by__n", createdByN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesListValidateBeforeCall(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String lastUpdated, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasJournalEntriesListCall(id, assignedObjectTypeId, assignedObjectId, created, kind, lastUpdated, q, tag, assignedObjectType, createdById, createdBy, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, assignedObjectIdN, assignedObjectIdLte, assignedObjectIdLt, assignedObjectIdGte, assignedObjectIdGt, kindN, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, assignedObjectTypeN, createdByIdN, createdByN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param assignedObjectTypeId  (optional)
     * @param assignedObjectId  (optional)
     * @param created  (optional)
     * @param kind  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param assignedObjectType  (optional)
     * @param createdById  (optional)
     * @param createdBy  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assignedObjectTypeIdN  (optional)
     * @param assignedObjectIdN  (optional)
     * @param assignedObjectIdLte  (optional)
     * @param assignedObjectIdLt  (optional)
     * @param assignedObjectIdGte  (optional)
     * @param assignedObjectIdGt  (optional)
     * @param kindN  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param assignedObjectTypeN  (optional)
     * @param createdByIdN  (optional)
     * @param createdByN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasJournalEntriesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasJournalEntriesList200Response extrasJournalEntriesList(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String lastUpdated, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasJournalEntriesList200Response> localVarResp = extrasJournalEntriesListWithHttpInfo(id, assignedObjectTypeId, assignedObjectId, created, kind, lastUpdated, q, tag, assignedObjectType, createdById, createdBy, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, assignedObjectIdN, assignedObjectIdLte, assignedObjectIdLt, assignedObjectIdGte, assignedObjectIdGt, kindN, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, assignedObjectTypeN, createdByIdN, createdByN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param assignedObjectTypeId  (optional)
     * @param assignedObjectId  (optional)
     * @param created  (optional)
     * @param kind  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param assignedObjectType  (optional)
     * @param createdById  (optional)
     * @param createdBy  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assignedObjectTypeIdN  (optional)
     * @param assignedObjectIdN  (optional)
     * @param assignedObjectIdLte  (optional)
     * @param assignedObjectIdLt  (optional)
     * @param assignedObjectIdGte  (optional)
     * @param assignedObjectIdGt  (optional)
     * @param kindN  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param assignedObjectTypeN  (optional)
     * @param createdByIdN  (optional)
     * @param createdByN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasJournalEntriesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasJournalEntriesList200Response> extrasJournalEntriesListWithHttpInfo(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String lastUpdated, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesListValidateBeforeCall(id, assignedObjectTypeId, assignedObjectId, created, kind, lastUpdated, q, tag, assignedObjectType, createdById, createdBy, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, assignedObjectIdN, assignedObjectIdLte, assignedObjectIdLt, assignedObjectIdGte, assignedObjectIdGt, kindN, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, assignedObjectTypeN, createdByIdN, createdByN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasJournalEntriesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param assignedObjectTypeId  (optional)
     * @param assignedObjectId  (optional)
     * @param created  (optional)
     * @param kind  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param assignedObjectType  (optional)
     * @param createdById  (optional)
     * @param createdBy  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assignedObjectTypeIdN  (optional)
     * @param assignedObjectIdN  (optional)
     * @param assignedObjectIdLte  (optional)
     * @param assignedObjectIdLt  (optional)
     * @param assignedObjectIdGte  (optional)
     * @param assignedObjectIdGt  (optional)
     * @param kindN  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param assignedObjectTypeN  (optional)
     * @param createdByIdN  (optional)
     * @param createdByN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesListAsync(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String lastUpdated, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasJournalEntriesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesListValidateBeforeCall(id, assignedObjectTypeId, assignedObjectId, created, kind, lastUpdated, q, tag, assignedObjectType, createdById, createdBy, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, assignedObjectIdN, assignedObjectIdLte, assignedObjectIdLt, assignedObjectIdGte, assignedObjectIdGt, kindN, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, assignedObjectTypeN, createdByIdN, createdByN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasJournalEntriesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesPartialUpdate
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesPartialUpdateCall(Integer id, WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesPartialUpdateValidateBeforeCall(Integer id, WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasJournalEntriesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasJournalEntriesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJournalEntriesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @return JournalEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JournalEntry extrasJournalEntriesPartialUpdate(Integer id, WritableJournalEntry data) throws ApiException {
        ApiResponse<JournalEntry> localVarResp = extrasJournalEntriesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @return ApiResponse&lt;JournalEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalEntry> extrasJournalEntriesPartialUpdateWithHttpInfo(Integer id, WritableJournalEntry data) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesPartialUpdateAsync(Integer id, WritableJournalEntry data, final ApiCallback<JournalEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesRead
     * @param id A unique integer value identifying this journal entry. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasJournalEntriesRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJournalEntriesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @return JournalEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JournalEntry extrasJournalEntriesRead(Integer id) throws ApiException {
        ApiResponse<JournalEntry> localVarResp = extrasJournalEntriesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @return ApiResponse&lt;JournalEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalEntry> extrasJournalEntriesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesReadAsync(Integer id, final ApiCallback<JournalEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasJournalEntriesUpdate
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesUpdateCall(Integer id, WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/journal-entries/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasJournalEntriesUpdateValidateBeforeCall(Integer id, WritableJournalEntry data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasJournalEntriesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasJournalEntriesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasJournalEntriesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @return JournalEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JournalEntry extrasJournalEntriesUpdate(Integer id, WritableJournalEntry data) throws ApiException {
        ApiResponse<JournalEntry> localVarResp = extrasJournalEntriesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @return ApiResponse&lt;JournalEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JournalEntry> extrasJournalEntriesUpdateWithHttpInfo(Integer id, WritableJournalEntry data) throws ApiException {
        okhttp3.Call localVarCall = extrasJournalEntriesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this journal entry. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasJournalEntriesUpdateAsync(Integer id, WritableJournalEntry data, final ApiCallback<JournalEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasJournalEntriesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<JournalEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasObjectChangesList
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectTypeId  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param changedObjectType  (optional)
     * @param userId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeIdN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param changedObjectTypeN  (optional)
     * @param userIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesListCall(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/object-changes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name", userName));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_id", requestId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (changedObjectTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_type_id", changedObjectTypeId));
        }

        if (changedObjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id", changedObjectId));
        }

        if (objectRepr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr", objectRepr));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (changedObjectType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_type", changedObjectType));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (userN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__n", userN));
        }

        if (userNameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__n", userNameN));
        }

        if (userNameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__ic", userNameIc));
        }

        if (userNameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__nic", userNameNic));
        }

        if (userNameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__iew", userNameIew));
        }

        if (userNameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__niew", userNameNiew));
        }

        if (userNameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__isw", userNameIsw));
        }

        if (userNameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__nisw", userNameNisw));
        }

        if (userNameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__ie", userNameIe));
        }

        if (userNameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name__nie", userNameNie));
        }

        if (actionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action__n", actionN));
        }

        if (changedObjectTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_type_id__n", changedObjectTypeIdN));
        }

        if (changedObjectIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__n", changedObjectIdN));
        }

        if (changedObjectIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__lte", changedObjectIdLte));
        }

        if (changedObjectIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__lt", changedObjectIdLt));
        }

        if (changedObjectIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__gte", changedObjectIdGte));
        }

        if (changedObjectIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_id__gt", changedObjectIdGt));
        }

        if (objectReprN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__n", objectReprN));
        }

        if (objectReprIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__ic", objectReprIc));
        }

        if (objectReprNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__nic", objectReprNic));
        }

        if (objectReprIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__iew", objectReprIew));
        }

        if (objectReprNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__niew", objectReprNiew));
        }

        if (objectReprIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__isw", objectReprIsw));
        }

        if (objectReprNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__nisw", objectReprNisw));
        }

        if (objectReprIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__ie", objectReprIe));
        }

        if (objectReprNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_repr__nie", objectReprNie));
        }

        if (changedObjectTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changed_object_type__n", changedObjectTypeN));
        }

        if (userIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id__n", userIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasObjectChangesListValidateBeforeCall(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasObjectChangesListCall(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectTypeId  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param changedObjectType  (optional)
     * @param userId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeIdN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param changedObjectTypeN  (optional)
     * @param userIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasObjectChangesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasObjectChangesList200Response extrasObjectChangesList(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasObjectChangesList200Response> localVarResp = extrasObjectChangesListWithHttpInfo(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectTypeId  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param changedObjectType  (optional)
     * @param userId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeIdN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param changedObjectTypeN  (optional)
     * @param userIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasObjectChangesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasObjectChangesList200Response> extrasObjectChangesListWithHttpInfo(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasObjectChangesListValidateBeforeCall(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasObjectChangesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of recent changes.
     * @param id  (optional)
     * @param user  (optional)
     * @param userName  (optional)
     * @param requestId  (optional)
     * @param action  (optional)
     * @param changedObjectTypeId  (optional)
     * @param changedObjectId  (optional)
     * @param objectRepr  (optional)
     * @param q  (optional)
     * @param time  (optional)
     * @param changedObjectType  (optional)
     * @param userId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param userN  (optional)
     * @param userNameN  (optional)
     * @param userNameIc  (optional)
     * @param userNameNic  (optional)
     * @param userNameIew  (optional)
     * @param userNameNiew  (optional)
     * @param userNameIsw  (optional)
     * @param userNameNisw  (optional)
     * @param userNameIe  (optional)
     * @param userNameNie  (optional)
     * @param actionN  (optional)
     * @param changedObjectTypeIdN  (optional)
     * @param changedObjectIdN  (optional)
     * @param changedObjectIdLte  (optional)
     * @param changedObjectIdLt  (optional)
     * @param changedObjectIdGte  (optional)
     * @param changedObjectIdGt  (optional)
     * @param objectReprN  (optional)
     * @param objectReprIc  (optional)
     * @param objectReprNic  (optional)
     * @param objectReprIew  (optional)
     * @param objectReprNiew  (optional)
     * @param objectReprIsw  (optional)
     * @param objectReprNisw  (optional)
     * @param objectReprIe  (optional)
     * @param objectReprNie  (optional)
     * @param changedObjectTypeN  (optional)
     * @param userIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesListAsync(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasObjectChangesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasObjectChangesListValidateBeforeCall(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasObjectChangesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasObjectChangesRead
     * @param id A unique integer value identifying this object change. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/object-changes/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasObjectChangesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasObjectChangesRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasObjectChangesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id A unique integer value identifying this object change. (required)
     * @return ObjectChange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ObjectChange extrasObjectChangesRead(Integer id) throws ApiException {
        ApiResponse<ObjectChange> localVarResp = extrasObjectChangesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of recent changes.
     * @param id A unique integer value identifying this object change. (required)
     * @return ApiResponse&lt;ObjectChange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectChange> extrasObjectChangesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasObjectChangesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ObjectChange>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of recent changes.
     * @param id A unique integer value identifying this object change. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasObjectChangesReadAsync(Integer id, final ApiCallback<ObjectChange> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasObjectChangesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ObjectChange>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasReportsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/reports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasReportsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasReportsListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasReportsList() throws ApiException {
        extrasReportsListWithHttpInfo();
    }

    /**
     * 
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasReportsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasReportsListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasReportsListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasReportsRead
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/reports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasReportsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasReportsRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasReportsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasReportsRead(String id) throws ApiException {
        extrasReportsReadWithHttpInfo(id);
    }

    /**
     * 
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasReportsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = extrasReportsReadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsReadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasReportsReadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasReportsRun
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsRunCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/reports/{id}/run/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasReportsRunValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasReportsRun(Async)");
        }
        

        okhttp3.Call localVarCall = extrasReportsRunCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Run a Report identified as \&quot;&lt;module&gt;.&lt;script&gt;\&quot; and return the pending JobResult as the result
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasReportsRun(String id) throws ApiException {
        extrasReportsRunWithHttpInfo(id);
    }

    /**
     * 
     * Run a Report identified as \&quot;&lt;module&gt;.&lt;script&gt;\&quot; and return the pending JobResult as the result
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasReportsRunWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = extrasReportsRunValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Run a Report identified as \&quot;&lt;module&gt;.&lt;script&gt;\&quot; and return the pending JobResult as the result
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasReportsRunAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasReportsRunValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasScriptsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/scripts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasScriptsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasScriptsListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasScriptsList() throws ApiException {
        extrasScriptsListWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasScriptsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasScriptsListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasScriptsListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasScriptsRead
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/scripts/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasScriptsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasScriptsRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasScriptsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasScriptsRead(String id) throws ApiException {
        extrasScriptsReadWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasScriptsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = extrasScriptsReadValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasScriptsReadAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasScriptsReadValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/tags/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasTagsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasTagsBulkDelete() throws ApiException {
        extrasTagsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasTagsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasTagsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsBulkPartialUpdateCall(Tag data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/tags/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsBulkPartialUpdateValidateBeforeCall(Tag data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasTagsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasTagsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsBulkPartialUpdate(Tag data) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsBulkPartialUpdateWithHttpInfo(Tag data) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsBulkPartialUpdateAsync(Tag data, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsBulkUpdateCall(Tag data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/tags/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsBulkUpdateValidateBeforeCall(Tag data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasTagsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasTagsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsBulkUpdate(Tag data) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsBulkUpdateWithHttpInfo(Tag data) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsBulkUpdateAsync(Tag data, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsCreateCall(Tag data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/tags/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsCreateValidateBeforeCall(Tag data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasTagsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasTagsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsCreate(Tag data) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsCreateWithHttpInfo(Tag data) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsCreateAsync(Tag data, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsDelete
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasTagsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasTagsDelete(Integer id) throws ApiException {
        extrasTagsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasTagsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param contentType  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsListCall(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/tags/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (contentTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id", contentTypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsListValidateBeforeCall(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasTagsListCall(id, name, slug, color, description, created, lastUpdated, q, contentType, contentTypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param contentType  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasTagsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasTagsList200Response extrasTagsList(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasTagsList200Response> localVarResp = extrasTagsListWithHttpInfo(id, name, slug, color, description, created, lastUpdated, q, contentType, contentTypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param contentType  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasTagsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasTagsList200Response> extrasTagsListWithHttpInfo(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsListValidateBeforeCall(id, name, slug, color, description, created, lastUpdated, q, contentType, contentTypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasTagsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param contentType  (optional)
     * @param contentTypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsListAsync(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasTagsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsListValidateBeforeCall(id, name, slug, color, description, created, lastUpdated, q, contentType, contentTypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasTagsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsPartialUpdate
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsPartialUpdateCall(Integer id, Tag data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsPartialUpdateValidateBeforeCall(Integer id, Tag data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasTagsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasTagsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsPartialUpdate(Integer id, Tag data) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsPartialUpdateWithHttpInfo(Integer id, Tag data) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsPartialUpdateAsync(Integer id, Tag data, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsRead
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasTagsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsRead(Integer id) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsReadAsync(Integer id, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasTagsUpdate
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsUpdateCall(Integer id, Tag data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/tags/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasTagsUpdateValidateBeforeCall(Integer id, Tag data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasTagsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasTagsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasTagsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tag extrasTagsUpdate(Integer id, Tag data) throws ApiException {
        ApiResponse<Tag> localVarResp = extrasTagsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> extrasTagsUpdateWithHttpInfo(Integer id, Tag data) throws ApiException {
        okhttp3.Call localVarCall = extrasTagsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this tag. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasTagsUpdateAsync(Integer id, Tag data, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasTagsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/webhooks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasWebhooksBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasWebhooksBulkDelete() throws ApiException {
        extrasWebhooksBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasWebhooksBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksBulkPartialUpdateCall(Webhook data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/webhooks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksBulkPartialUpdateValidateBeforeCall(Webhook data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasWebhooksBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasWebhooksBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Webhook extrasWebhooksBulkPartialUpdate(Webhook data) throws ApiException {
        ApiResponse<Webhook> localVarResp = extrasWebhooksBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> extrasWebhooksBulkPartialUpdateWithHttpInfo(Webhook data) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksBulkPartialUpdateAsync(Webhook data, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksBulkUpdateCall(Webhook data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/webhooks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksBulkUpdateValidateBeforeCall(Webhook data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasWebhooksBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasWebhooksBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Webhook extrasWebhooksBulkUpdate(Webhook data) throws ApiException {
        ApiResponse<Webhook> localVarResp = extrasWebhooksBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> extrasWebhooksBulkUpdateWithHttpInfo(Webhook data) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksBulkUpdateAsync(Webhook data, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksCreateCall(Webhook data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/webhooks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksCreateValidateBeforeCall(Webhook data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasWebhooksCreate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasWebhooksCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Webhook extrasWebhooksCreate(Webhook data) throws ApiException {
        ApiResponse<Webhook> localVarResp = extrasWebhooksCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> extrasWebhooksCreateWithHttpInfo(Webhook data) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksCreateAsync(Webhook data, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksDelete
     * @param id A unique integer value identifying this webhook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/webhooks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasWebhooksDelete(Async)");
        }
        

        okhttp3.Call localVarCall = extrasWebhooksDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void extrasWebhooksDelete(Integer id) throws ApiException {
        extrasWebhooksDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extrasWebhooksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksList
     * @param id  (optional)
     * @param name  (optional)
     * @param typeCreate  (optional)
     * @param typeUpdate  (optional)
     * @param typeDelete  (optional)
     * @param payloadUrl  (optional)
     * @param enabled  (optional)
     * @param httpMethod  (optional)
     * @param httpContentType  (optional)
     * @param secret  (optional)
     * @param sslVerification  (optional)
     * @param caFilePath  (optional)
     * @param q  (optional)
     * @param contentTypeId  (optional)
     * @param contentTypes  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param payloadUrlN  (optional)
     * @param payloadUrlIc  (optional)
     * @param payloadUrlNic  (optional)
     * @param payloadUrlIew  (optional)
     * @param payloadUrlNiew  (optional)
     * @param payloadUrlIsw  (optional)
     * @param payloadUrlNisw  (optional)
     * @param payloadUrlIe  (optional)
     * @param payloadUrlNie  (optional)
     * @param httpMethodN  (optional)
     * @param httpContentTypeN  (optional)
     * @param httpContentTypeIc  (optional)
     * @param httpContentTypeNic  (optional)
     * @param httpContentTypeIew  (optional)
     * @param httpContentTypeNiew  (optional)
     * @param httpContentTypeIsw  (optional)
     * @param httpContentTypeNisw  (optional)
     * @param httpContentTypeIe  (optional)
     * @param httpContentTypeNie  (optional)
     * @param secretN  (optional)
     * @param secretIc  (optional)
     * @param secretNic  (optional)
     * @param secretIew  (optional)
     * @param secretNiew  (optional)
     * @param secretIsw  (optional)
     * @param secretNisw  (optional)
     * @param secretIe  (optional)
     * @param secretNie  (optional)
     * @param caFilePathN  (optional)
     * @param caFilePathIc  (optional)
     * @param caFilePathNic  (optional)
     * @param caFilePathIew  (optional)
     * @param caFilePathNiew  (optional)
     * @param caFilePathIsw  (optional)
     * @param caFilePathNisw  (optional)
     * @param caFilePathIe  (optional)
     * @param caFilePathNie  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksListCall(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/webhooks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (typeCreate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_create", typeCreate));
        }

        if (typeUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_update", typeUpdate));
        }

        if (typeDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_delete", typeDelete));
        }

        if (payloadUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url", payloadUrl));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (httpMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_method", httpMethod));
        }

        if (httpContentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type", httpContentType));
        }

        if (secret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret", secret));
        }

        if (sslVerification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssl_verification", sslVerification));
        }

        if (caFilePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path", caFilePath));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (contentTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id", contentTypeId));
        }

        if (contentTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types", contentTypes));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (payloadUrlN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__n", payloadUrlN));
        }

        if (payloadUrlIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__ic", payloadUrlIc));
        }

        if (payloadUrlNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__nic", payloadUrlNic));
        }

        if (payloadUrlIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__iew", payloadUrlIew));
        }

        if (payloadUrlNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__niew", payloadUrlNiew));
        }

        if (payloadUrlIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__isw", payloadUrlIsw));
        }

        if (payloadUrlNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__nisw", payloadUrlNisw));
        }

        if (payloadUrlIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__ie", payloadUrlIe));
        }

        if (payloadUrlNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload_url__nie", payloadUrlNie));
        }

        if (httpMethodN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_method__n", httpMethodN));
        }

        if (httpContentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__n", httpContentTypeN));
        }

        if (httpContentTypeIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__ic", httpContentTypeIc));
        }

        if (httpContentTypeNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__nic", httpContentTypeNic));
        }

        if (httpContentTypeIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__iew", httpContentTypeIew));
        }

        if (httpContentTypeNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__niew", httpContentTypeNiew));
        }

        if (httpContentTypeIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__isw", httpContentTypeIsw));
        }

        if (httpContentTypeNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__nisw", httpContentTypeNisw));
        }

        if (httpContentTypeIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__ie", httpContentTypeIe));
        }

        if (httpContentTypeNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("http_content_type__nie", httpContentTypeNie));
        }

        if (secretN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__n", secretN));
        }

        if (secretIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__ic", secretIc));
        }

        if (secretNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__nic", secretNic));
        }

        if (secretIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__iew", secretIew));
        }

        if (secretNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__niew", secretNiew));
        }

        if (secretIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__isw", secretIsw));
        }

        if (secretNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__nisw", secretNisw));
        }

        if (secretIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__ie", secretIe));
        }

        if (secretNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret__nie", secretNie));
        }

        if (caFilePathN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__n", caFilePathN));
        }

        if (caFilePathIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__ic", caFilePathIc));
        }

        if (caFilePathNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__nic", caFilePathNic));
        }

        if (caFilePathIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__iew", caFilePathIew));
        }

        if (caFilePathNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__niew", caFilePathNiew));
        }

        if (caFilePathIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__isw", caFilePathIsw));
        }

        if (caFilePathNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__nisw", caFilePathNisw));
        }

        if (caFilePathIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__ie", caFilePathIe));
        }

        if (caFilePathNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ca_file_path__nie", caFilePathNie));
        }

        if (contentTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__n", contentTypeIdN));
        }

        if (contentTypeIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__lte", contentTypeIdLte));
        }

        if (contentTypeIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__lt", contentTypeIdLt));
        }

        if (contentTypeIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__gte", contentTypeIdGte));
        }

        if (contentTypeIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type_id__gt", contentTypeIdGt));
        }

        if (contentTypesN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__n", contentTypesN));
        }

        if (contentTypesIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__ic", contentTypesIc));
        }

        if (contentTypesNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__nic", contentTypesNic));
        }

        if (contentTypesIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__iew", contentTypesIew));
        }

        if (contentTypesNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__niew", contentTypesNiew));
        }

        if (contentTypesIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__isw", contentTypesIsw));
        }

        if (contentTypesNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__nisw", contentTypesNisw));
        }

        if (contentTypesIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__ie", contentTypesIe));
        }

        if (contentTypesNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_types__nie", contentTypesNie));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksListValidateBeforeCall(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extrasWebhooksListCall(id, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, secret, sslVerification, caFilePath, q, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, payloadUrlN, payloadUrlIc, payloadUrlNic, payloadUrlIew, payloadUrlNiew, payloadUrlIsw, payloadUrlNisw, payloadUrlIe, payloadUrlNie, httpMethodN, httpContentTypeN, httpContentTypeIc, httpContentTypeNic, httpContentTypeIew, httpContentTypeNiew, httpContentTypeIsw, httpContentTypeNisw, httpContentTypeIe, httpContentTypeNie, secretN, secretIc, secretNic, secretIew, secretNiew, secretIsw, secretNisw, secretIe, secretNie, caFilePathN, caFilePathIc, caFilePathNic, caFilePathIew, caFilePathNiew, caFilePathIsw, caFilePathNisw, caFilePathIe, caFilePathNie, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param typeCreate  (optional)
     * @param typeUpdate  (optional)
     * @param typeDelete  (optional)
     * @param payloadUrl  (optional)
     * @param enabled  (optional)
     * @param httpMethod  (optional)
     * @param httpContentType  (optional)
     * @param secret  (optional)
     * @param sslVerification  (optional)
     * @param caFilePath  (optional)
     * @param q  (optional)
     * @param contentTypeId  (optional)
     * @param contentTypes  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param payloadUrlN  (optional)
     * @param payloadUrlIc  (optional)
     * @param payloadUrlNic  (optional)
     * @param payloadUrlIew  (optional)
     * @param payloadUrlNiew  (optional)
     * @param payloadUrlIsw  (optional)
     * @param payloadUrlNisw  (optional)
     * @param payloadUrlIe  (optional)
     * @param payloadUrlNie  (optional)
     * @param httpMethodN  (optional)
     * @param httpContentTypeN  (optional)
     * @param httpContentTypeIc  (optional)
     * @param httpContentTypeNic  (optional)
     * @param httpContentTypeIew  (optional)
     * @param httpContentTypeNiew  (optional)
     * @param httpContentTypeIsw  (optional)
     * @param httpContentTypeNisw  (optional)
     * @param httpContentTypeIe  (optional)
     * @param httpContentTypeNie  (optional)
     * @param secretN  (optional)
     * @param secretIc  (optional)
     * @param secretNic  (optional)
     * @param secretIew  (optional)
     * @param secretNiew  (optional)
     * @param secretIsw  (optional)
     * @param secretNisw  (optional)
     * @param secretIe  (optional)
     * @param secretNie  (optional)
     * @param caFilePathN  (optional)
     * @param caFilePathIc  (optional)
     * @param caFilePathNic  (optional)
     * @param caFilePathIew  (optional)
     * @param caFilePathNiew  (optional)
     * @param caFilePathIsw  (optional)
     * @param caFilePathNisw  (optional)
     * @param caFilePathIe  (optional)
     * @param caFilePathNie  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ExtrasWebhooksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExtrasWebhooksList200Response extrasWebhooksList(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ExtrasWebhooksList200Response> localVarResp = extrasWebhooksListWithHttpInfo(id, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, secret, sslVerification, caFilePath, q, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, payloadUrlN, payloadUrlIc, payloadUrlNic, payloadUrlIew, payloadUrlNiew, payloadUrlIsw, payloadUrlNisw, payloadUrlIe, payloadUrlNie, httpMethodN, httpContentTypeN, httpContentTypeIc, httpContentTypeNic, httpContentTypeIew, httpContentTypeNiew, httpContentTypeIsw, httpContentTypeNisw, httpContentTypeIe, httpContentTypeNie, secretN, secretIc, secretNic, secretIew, secretNiew, secretIsw, secretNisw, secretIe, secretNie, caFilePathN, caFilePathIc, caFilePathNic, caFilePathIew, caFilePathNiew, caFilePathIsw, caFilePathNisw, caFilePathIe, caFilePathNie, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param typeCreate  (optional)
     * @param typeUpdate  (optional)
     * @param typeDelete  (optional)
     * @param payloadUrl  (optional)
     * @param enabled  (optional)
     * @param httpMethod  (optional)
     * @param httpContentType  (optional)
     * @param secret  (optional)
     * @param sslVerification  (optional)
     * @param caFilePath  (optional)
     * @param q  (optional)
     * @param contentTypeId  (optional)
     * @param contentTypes  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param payloadUrlN  (optional)
     * @param payloadUrlIc  (optional)
     * @param payloadUrlNic  (optional)
     * @param payloadUrlIew  (optional)
     * @param payloadUrlNiew  (optional)
     * @param payloadUrlIsw  (optional)
     * @param payloadUrlNisw  (optional)
     * @param payloadUrlIe  (optional)
     * @param payloadUrlNie  (optional)
     * @param httpMethodN  (optional)
     * @param httpContentTypeN  (optional)
     * @param httpContentTypeIc  (optional)
     * @param httpContentTypeNic  (optional)
     * @param httpContentTypeIew  (optional)
     * @param httpContentTypeNiew  (optional)
     * @param httpContentTypeIsw  (optional)
     * @param httpContentTypeNisw  (optional)
     * @param httpContentTypeIe  (optional)
     * @param httpContentTypeNie  (optional)
     * @param secretN  (optional)
     * @param secretIc  (optional)
     * @param secretNic  (optional)
     * @param secretIew  (optional)
     * @param secretNiew  (optional)
     * @param secretIsw  (optional)
     * @param secretNisw  (optional)
     * @param secretIe  (optional)
     * @param secretNie  (optional)
     * @param caFilePathN  (optional)
     * @param caFilePathIc  (optional)
     * @param caFilePathNic  (optional)
     * @param caFilePathIew  (optional)
     * @param caFilePathNiew  (optional)
     * @param caFilePathIsw  (optional)
     * @param caFilePathNisw  (optional)
     * @param caFilePathIe  (optional)
     * @param caFilePathNie  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;ExtrasWebhooksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtrasWebhooksList200Response> extrasWebhooksListWithHttpInfo(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksListValidateBeforeCall(id, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, secret, sslVerification, caFilePath, q, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, payloadUrlN, payloadUrlIc, payloadUrlNic, payloadUrlIew, payloadUrlNiew, payloadUrlIsw, payloadUrlNisw, payloadUrlIe, payloadUrlNie, httpMethodN, httpContentTypeN, httpContentTypeIc, httpContentTypeNic, httpContentTypeIew, httpContentTypeNiew, httpContentTypeIsw, httpContentTypeNisw, httpContentTypeIe, httpContentTypeNie, secretN, secretIc, secretNic, secretIew, secretNiew, secretIsw, secretNisw, secretIe, secretNie, caFilePathN, caFilePathIc, caFilePathNic, caFilePathIew, caFilePathNiew, caFilePathIsw, caFilePathNisw, caFilePathIe, caFilePathNie, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<ExtrasWebhooksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param typeCreate  (optional)
     * @param typeUpdate  (optional)
     * @param typeDelete  (optional)
     * @param payloadUrl  (optional)
     * @param enabled  (optional)
     * @param httpMethod  (optional)
     * @param httpContentType  (optional)
     * @param secret  (optional)
     * @param sslVerification  (optional)
     * @param caFilePath  (optional)
     * @param q  (optional)
     * @param contentTypeId  (optional)
     * @param contentTypes  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param payloadUrlN  (optional)
     * @param payloadUrlIc  (optional)
     * @param payloadUrlNic  (optional)
     * @param payloadUrlIew  (optional)
     * @param payloadUrlNiew  (optional)
     * @param payloadUrlIsw  (optional)
     * @param payloadUrlNisw  (optional)
     * @param payloadUrlIe  (optional)
     * @param payloadUrlNie  (optional)
     * @param httpMethodN  (optional)
     * @param httpContentTypeN  (optional)
     * @param httpContentTypeIc  (optional)
     * @param httpContentTypeNic  (optional)
     * @param httpContentTypeIew  (optional)
     * @param httpContentTypeNiew  (optional)
     * @param httpContentTypeIsw  (optional)
     * @param httpContentTypeNisw  (optional)
     * @param httpContentTypeIe  (optional)
     * @param httpContentTypeNie  (optional)
     * @param secretN  (optional)
     * @param secretIc  (optional)
     * @param secretNic  (optional)
     * @param secretIew  (optional)
     * @param secretNiew  (optional)
     * @param secretIsw  (optional)
     * @param secretNisw  (optional)
     * @param secretIe  (optional)
     * @param secretNie  (optional)
     * @param caFilePathN  (optional)
     * @param caFilePathIc  (optional)
     * @param caFilePathNic  (optional)
     * @param caFilePathIew  (optional)
     * @param caFilePathNiew  (optional)
     * @param caFilePathIsw  (optional)
     * @param caFilePathNisw  (optional)
     * @param caFilePathIe  (optional)
     * @param caFilePathNie  (optional)
     * @param contentTypeIdN  (optional)
     * @param contentTypeIdLte  (optional)
     * @param contentTypeIdLt  (optional)
     * @param contentTypeIdGte  (optional)
     * @param contentTypeIdGt  (optional)
     * @param contentTypesN  (optional)
     * @param contentTypesIc  (optional)
     * @param contentTypesNic  (optional)
     * @param contentTypesIew  (optional)
     * @param contentTypesNiew  (optional)
     * @param contentTypesIsw  (optional)
     * @param contentTypesNisw  (optional)
     * @param contentTypesIe  (optional)
     * @param contentTypesNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksListAsync(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, String ordering, Integer limit, Integer offset, final ApiCallback<ExtrasWebhooksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksListValidateBeforeCall(id, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, secret, sslVerification, caFilePath, q, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, payloadUrlN, payloadUrlIc, payloadUrlNic, payloadUrlIew, payloadUrlNiew, payloadUrlIsw, payloadUrlNisw, payloadUrlIe, payloadUrlNie, httpMethodN, httpContentTypeN, httpContentTypeIc, httpContentTypeNic, httpContentTypeIew, httpContentTypeNiew, httpContentTypeIsw, httpContentTypeNisw, httpContentTypeIe, httpContentTypeNie, secretN, secretIc, secretNic, secretIew, secretNiew, secretIsw, secretNisw, secretIe, secretNie, caFilePathN, caFilePathIc, caFilePathNic, caFilePathIew, caFilePathNiew, caFilePathIsw, caFilePathNisw, caFilePathIe, caFilePathNie, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ExtrasWebhooksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksPartialUpdate
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksPartialUpdateCall(Integer id, Webhook data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/webhooks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksPartialUpdateValidateBeforeCall(Integer id, Webhook data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasWebhooksPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasWebhooksPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasWebhooksPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Webhook extrasWebhooksPartialUpdate(Integer id, Webhook data) throws ApiException {
        ApiResponse<Webhook> localVarResp = extrasWebhooksPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> extrasWebhooksPartialUpdateWithHttpInfo(Integer id, Webhook data) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksPartialUpdateAsync(Integer id, Webhook data, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksRead
     * @param id A unique integer value identifying this webhook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extras/webhooks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasWebhooksRead(Async)");
        }
        

        okhttp3.Call localVarCall = extrasWebhooksReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Webhook extrasWebhooksRead(Integer id) throws ApiException {
        ApiResponse<Webhook> localVarResp = extrasWebhooksReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> extrasWebhooksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksReadAsync(Integer id, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extrasWebhooksUpdate
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksUpdateCall(Integer id, Webhook data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/extras/webhooks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extrasWebhooksUpdateValidateBeforeCall(Integer id, Webhook data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling extrasWebhooksUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling extrasWebhooksUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = extrasWebhooksUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Webhook extrasWebhooksUpdate(Integer id, Webhook data) throws ApiException {
        ApiResponse<Webhook> localVarResp = extrasWebhooksUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> extrasWebhooksUpdateWithHttpInfo(Integer id, Webhook data) throws ApiException {
        okhttp3.Call localVarCall = extrasWebhooksUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this webhook. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extrasWebhooksUpdateAsync(Integer id, Webhook data, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = extrasWebhooksUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
