/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Pair;

import java.math.BigDecimal;
import de.codemakers.netbox.client.model.ConfigContext;
import de.codemakers.netbox.client.model.ContentType;
import de.codemakers.netbox.client.model.CustomField;
import de.codemakers.netbox.client.model.CustomLink;
import de.codemakers.netbox.client.model.ExportTemplate;
import de.codemakers.netbox.client.model.ExtrasConfigContextsList200Response;
import de.codemakers.netbox.client.model.ExtrasContentTypesList200Response;
import de.codemakers.netbox.client.model.ExtrasCustomFieldsList200Response;
import de.codemakers.netbox.client.model.ExtrasCustomLinksList200Response;
import de.codemakers.netbox.client.model.ExtrasExportTemplatesList200Response;
import de.codemakers.netbox.client.model.ExtrasImageAttachmentsList200Response;
import de.codemakers.netbox.client.model.ExtrasJobResultsList200Response;
import de.codemakers.netbox.client.model.ExtrasJournalEntriesList200Response;
import de.codemakers.netbox.client.model.ExtrasObjectChangesList200Response;
import de.codemakers.netbox.client.model.ExtrasTagsList200Response;
import de.codemakers.netbox.client.model.ExtrasWebhooksList200Response;
import de.codemakers.netbox.client.model.ImageAttachment;
import de.codemakers.netbox.client.model.JobResult;
import de.codemakers.netbox.client.model.JournalEntry;
import de.codemakers.netbox.client.model.ObjectChange;
import de.codemakers.netbox.client.model.Tag;
import de.codemakers.netbox.client.model.Webhook;
import de.codemakers.netbox.client.model.WritableConfigContext;
import de.codemakers.netbox.client.model.WritableCustomField;
import de.codemakers.netbox.client.model.WritableJournalEntry;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T18:36:37.665487300+02:00[Europe/Berlin]")
public class ExtrasApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ExtrasApi() {
    this(new ApiClient());
  }

  public ExtrasApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasConfigContextsBulkDelete() throws ApiException {
    extrasConfigContextsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasConfigContextsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConfigContext
   * @throws ApiException if fails to make API call
   */
  public ConfigContext extrasConfigContextsBulkPartialUpdate(WritableConfigContext data) throws ApiException {
    ApiResponse<ConfigContext> localVarResponse = extrasConfigContextsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConfigContext> extrasConfigContextsBulkPartialUpdateWithHttpInfo(WritableConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsBulkPartialUpdateRequestBuilder(WritableConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasConfigContextsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConfigContext
   * @throws ApiException if fails to make API call
   */
  public ConfigContext extrasConfigContextsBulkUpdate(WritableConfigContext data) throws ApiException {
    ApiResponse<ConfigContext> localVarResponse = extrasConfigContextsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConfigContext> extrasConfigContextsBulkUpdateWithHttpInfo(WritableConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsBulkUpdateRequestBuilder(WritableConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasConfigContextsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConfigContext
   * @throws ApiException if fails to make API call
   */
  public ConfigContext extrasConfigContextsCreate(WritableConfigContext data) throws ApiException {
    ApiResponse<ConfigContext> localVarResponse = extrasConfigContextsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConfigContext> extrasConfigContextsCreateWithHttpInfo(WritableConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsCreate", localVarResponse);
        }
        return new ApiResponse<ConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsCreateRequestBuilder(WritableConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasConfigContextsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasConfigContextsDelete(Integer id) throws ApiException {
    extrasConfigContextsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasConfigContextsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasConfigContextsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param isActive  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroup  (optional)
   * @param siteGroupId  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param deviceTypeId  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param platformId  (optional)
   * @param platform  (optional)
   * @param clusterTypeId  (optional)
   * @param clusterType  (optional)
   * @param clusterGroupId  (optional)
   * @param clusterGroup  (optional)
   * @param clusterId  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param tagId  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param deviceTypeIdN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param platformIdN  (optional)
   * @param platformN  (optional)
   * @param clusterTypeIdN  (optional)
   * @param clusterTypeN  (optional)
   * @param clusterGroupIdN  (optional)
   * @param clusterGroupN  (optional)
   * @param clusterIdN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param tagIdN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasConfigContextsList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasConfigContextsList200Response extrasConfigContextsList(String id, String name, String isActive, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasConfigContextsList200Response> localVarResponse = extrasConfigContextsListWithHttpInfo(id, name, isActive, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteGroup, siteGroupId, siteId, site, deviceTypeId, roleId, role, platformId, platform, clusterTypeId, clusterType, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tagId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteGroupN, siteGroupIdN, siteIdN, siteN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, clusterTypeIdN, clusterTypeN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagIdN, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param isActive  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroup  (optional)
   * @param siteGroupId  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param deviceTypeId  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param platformId  (optional)
   * @param platform  (optional)
   * @param clusterTypeId  (optional)
   * @param clusterType  (optional)
   * @param clusterGroupId  (optional)
   * @param clusterGroup  (optional)
   * @param clusterId  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param tagId  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param deviceTypeIdN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param platformIdN  (optional)
   * @param platformN  (optional)
   * @param clusterTypeIdN  (optional)
   * @param clusterTypeN  (optional)
   * @param clusterGroupIdN  (optional)
   * @param clusterGroupN  (optional)
   * @param clusterIdN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param tagIdN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasConfigContextsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasConfigContextsList200Response> extrasConfigContextsListWithHttpInfo(String id, String name, String isActive, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsListRequestBuilder(id, name, isActive, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteGroup, siteGroupId, siteId, site, deviceTypeId, roleId, role, platformId, platform, clusterTypeId, clusterType, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tagId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteGroupN, siteGroupIdN, siteIdN, siteN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, clusterTypeIdN, clusterTypeN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagIdN, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsList", localVarResponse);
        }
        return new ApiResponse<ExtrasConfigContextsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasConfigContextsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsListRequestBuilder(String id, String name, String isActive, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteGroup, String siteGroupId, String siteId, String site, String deviceTypeId, String roleId, String role, String platformId, String platform, String clusterTypeId, String clusterType, String clusterGroupId, String clusterGroup, String clusterId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String tagId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteGroupN, String siteGroupIdN, String siteIdN, String siteN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String clusterTypeIdN, String clusterTypeN, String clusterGroupIdN, String clusterGroupN, String clusterIdN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagIdN, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("is_active", isActive));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_type_id", deviceTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform_id", platformId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform", platform));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type_id", clusterTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type", clusterType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group_id", clusterGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group", clusterGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id", clusterId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag_id", tagId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_type_id__n", deviceTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform_id__n", platformIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform__n", platformN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type_id__n", clusterTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_type__n", clusterTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group_id__n", clusterGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_group__n", clusterGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id__n", clusterIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag_id__n", tagIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @param data  (required)
   * @return ConfigContext
   * @throws ApiException if fails to make API call
   */
  public ConfigContext extrasConfigContextsPartialUpdate(Integer id, WritableConfigContext data) throws ApiException {
    ApiResponse<ConfigContext> localVarResponse = extrasConfigContextsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConfigContext> extrasConfigContextsPartialUpdateWithHttpInfo(Integer id, WritableConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsPartialUpdateRequestBuilder(Integer id, WritableConfigContext data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasConfigContextsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasConfigContextsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @return ConfigContext
   * @throws ApiException if fails to make API call
   */
  public ConfigContext extrasConfigContextsRead(Integer id) throws ApiException {
    ApiResponse<ConfigContext> localVarResponse = extrasConfigContextsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @return ApiResponse&lt;ConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConfigContext> extrasConfigContextsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsRead", localVarResponse);
        }
        return new ApiResponse<ConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasConfigContextsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @param data  (required)
   * @return ConfigContext
   * @throws ApiException if fails to make API call
   */
  public ConfigContext extrasConfigContextsUpdate(Integer id, WritableConfigContext data) throws ApiException {
    ApiResponse<ConfigContext> localVarResponse = extrasConfigContextsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this config context. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConfigContext> extrasConfigContextsUpdateWithHttpInfo(Integer id, WritableConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasConfigContextsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasConfigContextsUpdate", localVarResponse);
        }
        return new ApiResponse<ConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasConfigContextsUpdateRequestBuilder(Integer id, WritableConfigContext data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasConfigContextsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasConfigContextsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/config-contexts/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
   * @param id  (optional)
   * @param appLabel  (optional)
   * @param model  (optional)
   * @param q  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasContentTypesList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasContentTypesList200Response extrasContentTypesList(BigDecimal id, String appLabel, String model, String q, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasContentTypesList200Response> localVarResponse = extrasContentTypesListWithHttpInfo(id, appLabel, model, q, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
   * @param id  (optional)
   * @param appLabel  (optional)
   * @param model  (optional)
   * @param q  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasContentTypesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasContentTypesList200Response> extrasContentTypesListWithHttpInfo(BigDecimal id, String appLabel, String model, String q, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasContentTypesListRequestBuilder(id, appLabel, model, q, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasContentTypesList", localVarResponse);
        }
        return new ApiResponse<ExtrasContentTypesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasContentTypesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasContentTypesListRequestBuilder(BigDecimal id, String appLabel, String model, String q, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/content-types/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("app_label", appLabel));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model", model));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
   * @param id A unique integer value identifying this content type. (required)
   * @return ContentType
   * @throws ApiException if fails to make API call
   */
  public ContentType extrasContentTypesRead(Integer id) throws ApiException {
    ApiResponse<ContentType> localVarResponse = extrasContentTypesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
   * @param id A unique integer value identifying this content type. (required)
   * @return ApiResponse&lt;ContentType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ContentType> extrasContentTypesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasContentTypesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasContentTypesRead", localVarResponse);
        }
        return new ApiResponse<ContentType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ContentType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasContentTypesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasContentTypesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/content-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasCustomFieldsBulkDelete() throws ApiException {
    extrasCustomFieldsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasCustomFieldsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CustomField
   * @throws ApiException if fails to make API call
   */
  public CustomField extrasCustomFieldsBulkPartialUpdate(WritableCustomField data) throws ApiException {
    ApiResponse<CustomField> localVarResponse = extrasCustomFieldsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CustomField&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomField> extrasCustomFieldsBulkPartialUpdateWithHttpInfo(WritableCustomField data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CustomField>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomField>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsBulkPartialUpdateRequestBuilder(WritableCustomField data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomFieldsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CustomField
   * @throws ApiException if fails to make API call
   */
  public CustomField extrasCustomFieldsBulkUpdate(WritableCustomField data) throws ApiException {
    ApiResponse<CustomField> localVarResponse = extrasCustomFieldsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CustomField&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomField> extrasCustomFieldsBulkUpdateWithHttpInfo(WritableCustomField data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<CustomField>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomField>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsBulkUpdateRequestBuilder(WritableCustomField data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomFieldsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CustomField
   * @throws ApiException if fails to make API call
   */
  public CustomField extrasCustomFieldsCreate(WritableCustomField data) throws ApiException {
    ApiResponse<CustomField> localVarResponse = extrasCustomFieldsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CustomField&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomField> extrasCustomFieldsCreateWithHttpInfo(WritableCustomField data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsCreate", localVarResponse);
        }
        return new ApiResponse<CustomField>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomField>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsCreateRequestBuilder(WritableCustomField data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomFieldsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasCustomFieldsDelete(Integer id) throws ApiException {
    extrasCustomFieldsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasCustomFieldsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomFieldsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param required  (optional)
   * @param filterLogic  (optional)
   * @param weight  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param type  (optional)
   * @param contentTypeId  (optional)
   * @param contentTypes  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param filterLogicN  (optional)
   * @param weightN  (optional)
   * @param weightLte  (optional)
   * @param weightLt  (optional)
   * @param weightGte  (optional)
   * @param weightGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param typeN  (optional)
   * @param contentTypeIdN  (optional)
   * @param contentTypeIdLte  (optional)
   * @param contentTypeIdLt  (optional)
   * @param contentTypeIdGte  (optional)
   * @param contentTypeIdGt  (optional)
   * @param contentTypesN  (optional)
   * @param contentTypesIc  (optional)
   * @param contentTypesNic  (optional)
   * @param contentTypesIew  (optional)
   * @param contentTypesNiew  (optional)
   * @param contentTypesIsw  (optional)
   * @param contentTypesNisw  (optional)
   * @param contentTypesIe  (optional)
   * @param contentTypesNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasCustomFieldsList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasCustomFieldsList200Response extrasCustomFieldsList(String id, String name, String required, String filterLogic, String weight, String description, String q, String type, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String filterLogicN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasCustomFieldsList200Response> localVarResponse = extrasCustomFieldsListWithHttpInfo(id, name, required, filterLogic, weight, description, q, type, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, filterLogicN, weightN, weightLte, weightLt, weightGte, weightGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, typeN, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param required  (optional)
   * @param filterLogic  (optional)
   * @param weight  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param type  (optional)
   * @param contentTypeId  (optional)
   * @param contentTypes  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param filterLogicN  (optional)
   * @param weightN  (optional)
   * @param weightLte  (optional)
   * @param weightLt  (optional)
   * @param weightGte  (optional)
   * @param weightGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param typeN  (optional)
   * @param contentTypeIdN  (optional)
   * @param contentTypeIdLte  (optional)
   * @param contentTypeIdLt  (optional)
   * @param contentTypeIdGte  (optional)
   * @param contentTypeIdGt  (optional)
   * @param contentTypesN  (optional)
   * @param contentTypesIc  (optional)
   * @param contentTypesNic  (optional)
   * @param contentTypesIew  (optional)
   * @param contentTypesNiew  (optional)
   * @param contentTypesIsw  (optional)
   * @param contentTypesNisw  (optional)
   * @param contentTypesIe  (optional)
   * @param contentTypesNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasCustomFieldsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasCustomFieldsList200Response> extrasCustomFieldsListWithHttpInfo(String id, String name, String required, String filterLogic, String weight, String description, String q, String type, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String filterLogicN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsListRequestBuilder(id, name, required, filterLogic, weight, description, q, type, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, filterLogicN, weightN, weightLte, weightLt, weightGte, weightGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, typeN, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsList", localVarResponse);
        }
        return new ApiResponse<ExtrasCustomFieldsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasCustomFieldsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsListRequestBuilder(String id, String name, String required, String filterLogic, String weight, String description, String q, String type, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String filterLogicN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String typeN, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("required", required));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_logic", filterLogic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight", weight));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id", contentTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types", contentTypes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_logic__n", filterLogicN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__n", weightN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__lte", weightLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__lt", weightLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__gte", weightGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__gt", weightGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__n", contentTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__lte", contentTypeIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__lt", contentTypeIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__gte", contentTypeIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__gt", contentTypeIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__n", contentTypesN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__ic", contentTypesIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__nic", contentTypesNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__iew", contentTypesIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__niew", contentTypesNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__isw", contentTypesIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__nisw", contentTypesNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__ie", contentTypesIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__nie", contentTypesNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @param data  (required)
   * @return CustomField
   * @throws ApiException if fails to make API call
   */
  public CustomField extrasCustomFieldsPartialUpdate(Integer id, WritableCustomField data) throws ApiException {
    ApiResponse<CustomField> localVarResponse = extrasCustomFieldsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CustomField&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomField> extrasCustomFieldsPartialUpdateWithHttpInfo(Integer id, WritableCustomField data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CustomField>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomField>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsPartialUpdateRequestBuilder(Integer id, WritableCustomField data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomFieldsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomFieldsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @return CustomField
   * @throws ApiException if fails to make API call
   */
  public CustomField extrasCustomFieldsRead(Integer id) throws ApiException {
    ApiResponse<CustomField> localVarResponse = extrasCustomFieldsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @return ApiResponse&lt;CustomField&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomField> extrasCustomFieldsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsRead", localVarResponse);
        }
        return new ApiResponse<CustomField>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomField>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomFieldsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @param data  (required)
   * @return CustomField
   * @throws ApiException if fails to make API call
   */
  public CustomField extrasCustomFieldsUpdate(Integer id, WritableCustomField data) throws ApiException {
    ApiResponse<CustomField> localVarResponse = extrasCustomFieldsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom field. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CustomField&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomField> extrasCustomFieldsUpdateWithHttpInfo(Integer id, WritableCustomField data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomFieldsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomFieldsUpdate", localVarResponse);
        }
        return new ApiResponse<CustomField>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomField>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomFieldsUpdateRequestBuilder(Integer id, WritableCustomField data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomFieldsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomFieldsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-fields/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasCustomLinksBulkDelete() throws ApiException {
    extrasCustomLinksBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasCustomLinksBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CustomLink
   * @throws ApiException if fails to make API call
   */
  public CustomLink extrasCustomLinksBulkPartialUpdate(CustomLink data) throws ApiException {
    ApiResponse<CustomLink> localVarResponse = extrasCustomLinksBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CustomLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomLink> extrasCustomLinksBulkPartialUpdateWithHttpInfo(CustomLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CustomLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksBulkPartialUpdateRequestBuilder(CustomLink data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomLinksBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CustomLink
   * @throws ApiException if fails to make API call
   */
  public CustomLink extrasCustomLinksBulkUpdate(CustomLink data) throws ApiException {
    ApiResponse<CustomLink> localVarResponse = extrasCustomLinksBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CustomLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomLink> extrasCustomLinksBulkUpdateWithHttpInfo(CustomLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksBulkUpdate", localVarResponse);
        }
        return new ApiResponse<CustomLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksBulkUpdateRequestBuilder(CustomLink data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomLinksBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CustomLink
   * @throws ApiException if fails to make API call
   */
  public CustomLink extrasCustomLinksCreate(CustomLink data) throws ApiException {
    ApiResponse<CustomLink> localVarResponse = extrasCustomLinksCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CustomLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomLink> extrasCustomLinksCreateWithHttpInfo(CustomLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksCreate", localVarResponse);
        }
        return new ApiResponse<CustomLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksCreateRequestBuilder(CustomLink data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomLinksCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasCustomLinksDelete(Integer id) throws ApiException {
    extrasCustomLinksDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasCustomLinksDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomLinksDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param contentType  (optional)
   * @param name  (optional)
   * @param enabled  (optional)
   * @param linkText  (optional)
   * @param linkUrl  (optional)
   * @param weight  (optional)
   * @param groupName  (optional)
   * @param newWindow  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param contentTypeN  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param linkTextN  (optional)
   * @param linkTextIc  (optional)
   * @param linkTextNic  (optional)
   * @param linkTextIew  (optional)
   * @param linkTextNiew  (optional)
   * @param linkTextIsw  (optional)
   * @param linkTextNisw  (optional)
   * @param linkTextIe  (optional)
   * @param linkTextNie  (optional)
   * @param linkUrlN  (optional)
   * @param linkUrlIc  (optional)
   * @param linkUrlNic  (optional)
   * @param linkUrlIew  (optional)
   * @param linkUrlNiew  (optional)
   * @param linkUrlIsw  (optional)
   * @param linkUrlNisw  (optional)
   * @param linkUrlIe  (optional)
   * @param linkUrlNie  (optional)
   * @param weightN  (optional)
   * @param weightLte  (optional)
   * @param weightLt  (optional)
   * @param weightGte  (optional)
   * @param weightGt  (optional)
   * @param groupNameN  (optional)
   * @param groupNameIc  (optional)
   * @param groupNameNic  (optional)
   * @param groupNameIew  (optional)
   * @param groupNameNiew  (optional)
   * @param groupNameIsw  (optional)
   * @param groupNameNisw  (optional)
   * @param groupNameIe  (optional)
   * @param groupNameNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasCustomLinksList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasCustomLinksList200Response extrasCustomLinksList(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasCustomLinksList200Response> localVarResponse = extrasCustomLinksListWithHttpInfo(id, contentType, name, enabled, linkText, linkUrl, weight, groupName, newWindow, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, linkTextN, linkTextIc, linkTextNic, linkTextIew, linkTextNiew, linkTextIsw, linkTextNisw, linkTextIe, linkTextNie, linkUrlN, linkUrlIc, linkUrlNic, linkUrlIew, linkUrlNiew, linkUrlIsw, linkUrlNisw, linkUrlIe, linkUrlNie, weightN, weightLte, weightLt, weightGte, weightGt, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param contentType  (optional)
   * @param name  (optional)
   * @param enabled  (optional)
   * @param linkText  (optional)
   * @param linkUrl  (optional)
   * @param weight  (optional)
   * @param groupName  (optional)
   * @param newWindow  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param contentTypeN  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param linkTextN  (optional)
   * @param linkTextIc  (optional)
   * @param linkTextNic  (optional)
   * @param linkTextIew  (optional)
   * @param linkTextNiew  (optional)
   * @param linkTextIsw  (optional)
   * @param linkTextNisw  (optional)
   * @param linkTextIe  (optional)
   * @param linkTextNie  (optional)
   * @param linkUrlN  (optional)
   * @param linkUrlIc  (optional)
   * @param linkUrlNic  (optional)
   * @param linkUrlIew  (optional)
   * @param linkUrlNiew  (optional)
   * @param linkUrlIsw  (optional)
   * @param linkUrlNisw  (optional)
   * @param linkUrlIe  (optional)
   * @param linkUrlNie  (optional)
   * @param weightN  (optional)
   * @param weightLte  (optional)
   * @param weightLt  (optional)
   * @param weightGte  (optional)
   * @param weightGt  (optional)
   * @param groupNameN  (optional)
   * @param groupNameIc  (optional)
   * @param groupNameNic  (optional)
   * @param groupNameIew  (optional)
   * @param groupNameNiew  (optional)
   * @param groupNameIsw  (optional)
   * @param groupNameNisw  (optional)
   * @param groupNameIe  (optional)
   * @param groupNameNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasCustomLinksList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasCustomLinksList200Response> extrasCustomLinksListWithHttpInfo(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksListRequestBuilder(id, contentType, name, enabled, linkText, linkUrl, weight, groupName, newWindow, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, linkTextN, linkTextIc, linkTextNic, linkTextIew, linkTextNiew, linkTextIsw, linkTextNisw, linkTextIe, linkTextNie, linkUrlN, linkUrlIc, linkUrlNic, linkUrlIew, linkUrlNiew, linkUrlIsw, linkUrlNisw, linkUrlIe, linkUrlNie, weightN, weightLte, weightLt, weightGte, weightGt, groupNameN, groupNameIc, groupNameNic, groupNameIew, groupNameNiew, groupNameIsw, groupNameNisw, groupNameIe, groupNameNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksList", localVarResponse);
        }
        return new ApiResponse<ExtrasCustomLinksList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasCustomLinksList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksListRequestBuilder(String id, String contentType, String name, String enabled, String linkText, String linkUrl, String weight, String groupName, String newWindow, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String linkTextN, String linkTextIc, String linkTextNic, String linkTextIew, String linkTextNiew, String linkTextIsw, String linkTextNisw, String linkTextIe, String linkTextNie, String linkUrlN, String linkUrlIc, String linkUrlNic, String linkUrlIew, String linkUrlNiew, String linkUrlIsw, String linkUrlNisw, String linkUrlIe, String linkUrlNie, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String groupNameN, String groupNameIc, String groupNameNic, String groupNameIew, String groupNameNiew, String groupNameIsw, String groupNameNisw, String groupNameIe, String groupNameNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabled", enabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text", linkText));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url", linkUrl));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight", weight));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name", groupName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("new_window", newWindow));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type__n", contentTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__n", linkTextN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__ic", linkTextIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__nic", linkTextNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__iew", linkTextIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__niew", linkTextNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__isw", linkTextIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__nisw", linkTextNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__ie", linkTextIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_text__nie", linkTextNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__n", linkUrlN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__ic", linkUrlIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__nic", linkUrlNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__iew", linkUrlIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__niew", linkUrlNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__isw", linkUrlIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__nisw", linkUrlNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__ie", linkUrlIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("link_url__nie", linkUrlNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__n", weightN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__lte", weightLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__lt", weightLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__gte", weightGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("weight__gt", weightGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__n", groupNameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__ic", groupNameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__nic", groupNameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__iew", groupNameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__niew", groupNameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__isw", groupNameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__nisw", groupNameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__ie", groupNameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_name__nie", groupNameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @param data  (required)
   * @return CustomLink
   * @throws ApiException if fails to make API call
   */
  public CustomLink extrasCustomLinksPartialUpdate(Integer id, CustomLink data) throws ApiException {
    ApiResponse<CustomLink> localVarResponse = extrasCustomLinksPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CustomLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomLink> extrasCustomLinksPartialUpdateWithHttpInfo(Integer id, CustomLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CustomLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksPartialUpdateRequestBuilder(Integer id, CustomLink data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomLinksPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomLinksPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @return CustomLink
   * @throws ApiException if fails to make API call
   */
  public CustomLink extrasCustomLinksRead(Integer id) throws ApiException {
    ApiResponse<CustomLink> localVarResponse = extrasCustomLinksReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @return ApiResponse&lt;CustomLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomLink> extrasCustomLinksReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksRead", localVarResponse);
        }
        return new ApiResponse<CustomLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomLinksRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @param data  (required)
   * @return CustomLink
   * @throws ApiException if fails to make API call
   */
  public CustomLink extrasCustomLinksUpdate(Integer id, CustomLink data) throws ApiException {
    ApiResponse<CustomLink> localVarResponse = extrasCustomLinksUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this custom link. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CustomLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomLink> extrasCustomLinksUpdateWithHttpInfo(Integer id, CustomLink data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasCustomLinksUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasCustomLinksUpdate", localVarResponse);
        }
        return new ApiResponse<CustomLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomLink>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasCustomLinksUpdateRequestBuilder(Integer id, CustomLink data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasCustomLinksUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasCustomLinksUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/custom-links/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasExportTemplatesBulkDelete() throws ApiException {
    extrasExportTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasExportTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ExportTemplate
   * @throws ApiException if fails to make API call
   */
  public ExportTemplate extrasExportTemplatesBulkPartialUpdate(ExportTemplate data) throws ApiException {
    ApiResponse<ExportTemplate> localVarResponse = extrasExportTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ExportTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportTemplate> extrasExportTemplatesBulkPartialUpdateWithHttpInfo(ExportTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ExportTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesBulkPartialUpdateRequestBuilder(ExportTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasExportTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ExportTemplate
   * @throws ApiException if fails to make API call
   */
  public ExportTemplate extrasExportTemplatesBulkUpdate(ExportTemplate data) throws ApiException {
    ApiResponse<ExportTemplate> localVarResponse = extrasExportTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ExportTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportTemplate> extrasExportTemplatesBulkUpdateWithHttpInfo(ExportTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ExportTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesBulkUpdateRequestBuilder(ExportTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasExportTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ExportTemplate
   * @throws ApiException if fails to make API call
   */
  public ExportTemplate extrasExportTemplatesCreate(ExportTemplate data) throws ApiException {
    ApiResponse<ExportTemplate> localVarResponse = extrasExportTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ExportTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportTemplate> extrasExportTemplatesCreateWithHttpInfo(ExportTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<ExportTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesCreateRequestBuilder(ExportTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasExportTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasExportTemplatesDelete(Integer id) throws ApiException {
    extrasExportTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasExportTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasExportTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param contentType  (optional)
   * @param name  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param contentTypeN  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasExportTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasExportTemplatesList200Response extrasExportTemplatesList(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasExportTemplatesList200Response> localVarResponse = extrasExportTemplatesListWithHttpInfo(id, contentType, name, description, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param contentType  (optional)
   * @param name  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param contentTypeN  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasExportTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasExportTemplatesList200Response> extrasExportTemplatesListWithHttpInfo(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesListRequestBuilder(id, contentType, name, description, q, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesList", localVarResponse);
        }
        return new ApiResponse<ExtrasExportTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasExportTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesListRequestBuilder(String id, String contentType, String name, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type__n", contentTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @param data  (required)
   * @return ExportTemplate
   * @throws ApiException if fails to make API call
   */
  public ExportTemplate extrasExportTemplatesPartialUpdate(Integer id, ExportTemplate data) throws ApiException {
    ApiResponse<ExportTemplate> localVarResponse = extrasExportTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ExportTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportTemplate> extrasExportTemplatesPartialUpdateWithHttpInfo(Integer id, ExportTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ExportTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesPartialUpdateRequestBuilder(Integer id, ExportTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasExportTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasExportTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @return ExportTemplate
   * @throws ApiException if fails to make API call
   */
  public ExportTemplate extrasExportTemplatesRead(Integer id) throws ApiException {
    ApiResponse<ExportTemplate> localVarResponse = extrasExportTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @return ApiResponse&lt;ExportTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportTemplate> extrasExportTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesRead", localVarResponse);
        }
        return new ApiResponse<ExportTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasExportTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @param data  (required)
   * @return ExportTemplate
   * @throws ApiException if fails to make API call
   */
  public ExportTemplate extrasExportTemplatesUpdate(Integer id, ExportTemplate data) throws ApiException {
    ApiResponse<ExportTemplate> localVarResponse = extrasExportTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this export template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ExportTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportTemplate> extrasExportTemplatesUpdateWithHttpInfo(Integer id, ExportTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasExportTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasExportTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<ExportTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasExportTemplatesUpdateRequestBuilder(Integer id, ExportTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasExportTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasExportTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/export-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasImageAttachmentsBulkDelete() throws ApiException {
    extrasImageAttachmentsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasImageAttachmentsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ImageAttachment
   * @throws ApiException if fails to make API call
   */
  public ImageAttachment extrasImageAttachmentsBulkPartialUpdate(ImageAttachment data) throws ApiException {
    ApiResponse<ImageAttachment> localVarResponse = extrasImageAttachmentsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ImageAttachment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageAttachment> extrasImageAttachmentsBulkPartialUpdateWithHttpInfo(ImageAttachment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ImageAttachment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageAttachment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsBulkPartialUpdateRequestBuilder(ImageAttachment data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasImageAttachmentsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ImageAttachment
   * @throws ApiException if fails to make API call
   */
  public ImageAttachment extrasImageAttachmentsBulkUpdate(ImageAttachment data) throws ApiException {
    ApiResponse<ImageAttachment> localVarResponse = extrasImageAttachmentsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ImageAttachment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageAttachment> extrasImageAttachmentsBulkUpdateWithHttpInfo(ImageAttachment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ImageAttachment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageAttachment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsBulkUpdateRequestBuilder(ImageAttachment data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasImageAttachmentsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ImageAttachment
   * @throws ApiException if fails to make API call
   */
  public ImageAttachment extrasImageAttachmentsCreate(ImageAttachment data) throws ApiException {
    ApiResponse<ImageAttachment> localVarResponse = extrasImageAttachmentsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ImageAttachment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageAttachment> extrasImageAttachmentsCreateWithHttpInfo(ImageAttachment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsCreate", localVarResponse);
        }
        return new ApiResponse<ImageAttachment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageAttachment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsCreateRequestBuilder(ImageAttachment data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasImageAttachmentsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasImageAttachmentsDelete(Integer id) throws ApiException {
    extrasImageAttachmentsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasImageAttachmentsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasImageAttachmentsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param contentTypeId  (optional)
   * @param objectId  (optional)
   * @param name  (optional)
   * @param q  (optional)
   * @param created  (optional)
   * @param contentType  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param contentTypeIdN  (optional)
   * @param objectIdN  (optional)
   * @param objectIdLte  (optional)
   * @param objectIdLt  (optional)
   * @param objectIdGte  (optional)
   * @param objectIdGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param contentTypeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasImageAttachmentsList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasImageAttachmentsList200Response extrasImageAttachmentsList(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasImageAttachmentsList200Response> localVarResponse = extrasImageAttachmentsListWithHttpInfo(id, contentTypeId, objectId, name, q, created, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param contentTypeId  (optional)
   * @param objectId  (optional)
   * @param name  (optional)
   * @param q  (optional)
   * @param created  (optional)
   * @param contentType  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param contentTypeIdN  (optional)
   * @param objectIdN  (optional)
   * @param objectIdLte  (optional)
   * @param objectIdLt  (optional)
   * @param objectIdGte  (optional)
   * @param objectIdGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param contentTypeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasImageAttachmentsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasImageAttachmentsList200Response> extrasImageAttachmentsListWithHttpInfo(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsListRequestBuilder(id, contentTypeId, objectId, name, q, created, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsList", localVarResponse);
        }
        return new ApiResponse<ExtrasImageAttachmentsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasImageAttachmentsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsListRequestBuilder(String id, String contentTypeId, String objectId, String name, String q, String created, String contentType, String idN, String idLte, String idLt, String idGte, String idGt, String contentTypeIdN, String objectIdN, String objectIdLte, String objectIdLt, String objectIdGte, String objectIdGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String contentTypeN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id", contentTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_id", objectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__n", contentTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_id__n", objectIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_id__lte", objectIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_id__lt", objectIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_id__gte", objectIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_id__gt", objectIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type__n", contentTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @param data  (required)
   * @return ImageAttachment
   * @throws ApiException if fails to make API call
   */
  public ImageAttachment extrasImageAttachmentsPartialUpdate(Integer id, ImageAttachment data) throws ApiException {
    ApiResponse<ImageAttachment> localVarResponse = extrasImageAttachmentsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ImageAttachment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageAttachment> extrasImageAttachmentsPartialUpdateWithHttpInfo(Integer id, ImageAttachment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ImageAttachment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageAttachment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsPartialUpdateRequestBuilder(Integer id, ImageAttachment data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasImageAttachmentsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasImageAttachmentsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @return ImageAttachment
   * @throws ApiException if fails to make API call
   */
  public ImageAttachment extrasImageAttachmentsRead(Integer id) throws ApiException {
    ApiResponse<ImageAttachment> localVarResponse = extrasImageAttachmentsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @return ApiResponse&lt;ImageAttachment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageAttachment> extrasImageAttachmentsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsRead", localVarResponse);
        }
        return new ApiResponse<ImageAttachment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageAttachment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasImageAttachmentsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @param data  (required)
   * @return ImageAttachment
   * @throws ApiException if fails to make API call
   */
  public ImageAttachment extrasImageAttachmentsUpdate(Integer id, ImageAttachment data) throws ApiException {
    ApiResponse<ImageAttachment> localVarResponse = extrasImageAttachmentsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this image attachment. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ImageAttachment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ImageAttachment> extrasImageAttachmentsUpdateWithHttpInfo(Integer id, ImageAttachment data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasImageAttachmentsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasImageAttachmentsUpdate", localVarResponse);
        }
        return new ApiResponse<ImageAttachment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ImageAttachment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasImageAttachmentsUpdateRequestBuilder(Integer id, ImageAttachment data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasImageAttachmentsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasImageAttachmentsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/image-attachments/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of job results
   * @param id  (optional)
   * @param created  (optional)
   * @param completed  (optional)
   * @param status  (optional)
   * @param user  (optional)
   * @param objType  (optional)
   * @param name  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param statusN  (optional)
   * @param userN  (optional)
   * @param objTypeN  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasJobResultsList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasJobResultsList200Response extrasJobResultsList(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasJobResultsList200Response> localVarResponse = extrasJobResultsListWithHttpInfo(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of job results
   * @param id  (optional)
   * @param created  (optional)
   * @param completed  (optional)
   * @param status  (optional)
   * @param user  (optional)
   * @param objType  (optional)
   * @param name  (optional)
   * @param q  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param statusN  (optional)
   * @param userN  (optional)
   * @param objTypeN  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasJobResultsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasJobResultsList200Response> extrasJobResultsListWithHttpInfo(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJobResultsListRequestBuilder(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJobResultsList", localVarResponse);
        }
        return new ApiResponse<ExtrasJobResultsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasJobResultsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJobResultsListRequestBuilder(String id, String created, String completed, String status, String user, String objType, String name, String q, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String userN, String objTypeN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/job-results/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("completed", completed));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user", user));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("obj_type", objType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user__n", userN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("obj_type__n", objTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of job results
   * @param id A unique integer value identifying this job result. (required)
   * @return JobResult
   * @throws ApiException if fails to make API call
   */
  public JobResult extrasJobResultsRead(Integer id) throws ApiException {
    ApiResponse<JobResult> localVarResponse = extrasJobResultsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of job results
   * @param id A unique integer value identifying this job result. (required)
   * @return ApiResponse&lt;JobResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JobResult> extrasJobResultsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJobResultsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJobResultsRead", localVarResponse);
        }
        return new ApiResponse<JobResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JobResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJobResultsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasJobResultsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/job-results/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasJournalEntriesBulkDelete() throws ApiException {
    extrasJournalEntriesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasJournalEntriesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return JournalEntry
   * @throws ApiException if fails to make API call
   */
  public JournalEntry extrasJournalEntriesBulkPartialUpdate(WritableJournalEntry data) throws ApiException {
    ApiResponse<JournalEntry> localVarResponse = extrasJournalEntriesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;JournalEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JournalEntry> extrasJournalEntriesBulkPartialUpdateWithHttpInfo(WritableJournalEntry data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<JournalEntry>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JournalEntry>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesBulkPartialUpdateRequestBuilder(WritableJournalEntry data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasJournalEntriesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return JournalEntry
   * @throws ApiException if fails to make API call
   */
  public JournalEntry extrasJournalEntriesBulkUpdate(WritableJournalEntry data) throws ApiException {
    ApiResponse<JournalEntry> localVarResponse = extrasJournalEntriesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;JournalEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JournalEntry> extrasJournalEntriesBulkUpdateWithHttpInfo(WritableJournalEntry data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<JournalEntry>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JournalEntry>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesBulkUpdateRequestBuilder(WritableJournalEntry data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasJournalEntriesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return JournalEntry
   * @throws ApiException if fails to make API call
   */
  public JournalEntry extrasJournalEntriesCreate(WritableJournalEntry data) throws ApiException {
    ApiResponse<JournalEntry> localVarResponse = extrasJournalEntriesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;JournalEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JournalEntry> extrasJournalEntriesCreateWithHttpInfo(WritableJournalEntry data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesCreate", localVarResponse);
        }
        return new ApiResponse<JournalEntry>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JournalEntry>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesCreateRequestBuilder(WritableJournalEntry data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasJournalEntriesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasJournalEntriesDelete(Integer id) throws ApiException {
    extrasJournalEntriesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasJournalEntriesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasJournalEntriesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param assignedObjectTypeId  (optional)
   * @param assignedObjectId  (optional)
   * @param created  (optional)
   * @param kind  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param assignedObjectType  (optional)
   * @param createdById  (optional)
   * @param createdBy  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param assignedObjectTypeIdN  (optional)
   * @param assignedObjectIdN  (optional)
   * @param assignedObjectIdLte  (optional)
   * @param assignedObjectIdLt  (optional)
   * @param assignedObjectIdGte  (optional)
   * @param assignedObjectIdGt  (optional)
   * @param kindN  (optional)
   * @param tagN  (optional)
   * @param assignedObjectTypeN  (optional)
   * @param createdByIdN  (optional)
   * @param createdByN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasJournalEntriesList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasJournalEntriesList200Response extrasJournalEntriesList(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasJournalEntriesList200Response> localVarResponse = extrasJournalEntriesListWithHttpInfo(id, assignedObjectTypeId, assignedObjectId, created, kind, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, assignedObjectType, createdById, createdBy, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, assignedObjectIdN, assignedObjectIdLte, assignedObjectIdLt, assignedObjectIdGte, assignedObjectIdGt, kindN, tagN, assignedObjectTypeN, createdByIdN, createdByN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param assignedObjectTypeId  (optional)
   * @param assignedObjectId  (optional)
   * @param created  (optional)
   * @param kind  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param assignedObjectType  (optional)
   * @param createdById  (optional)
   * @param createdBy  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param assignedObjectTypeIdN  (optional)
   * @param assignedObjectIdN  (optional)
   * @param assignedObjectIdLte  (optional)
   * @param assignedObjectIdLt  (optional)
   * @param assignedObjectIdGte  (optional)
   * @param assignedObjectIdGt  (optional)
   * @param kindN  (optional)
   * @param tagN  (optional)
   * @param assignedObjectTypeN  (optional)
   * @param createdByIdN  (optional)
   * @param createdByN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasJournalEntriesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasJournalEntriesList200Response> extrasJournalEntriesListWithHttpInfo(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesListRequestBuilder(id, assignedObjectTypeId, assignedObjectId, created, kind, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, assignedObjectType, createdById, createdBy, idN, idLte, idLt, idGte, idGt, assignedObjectTypeIdN, assignedObjectIdN, assignedObjectIdLte, assignedObjectIdLt, assignedObjectIdGte, assignedObjectIdGt, kindN, tagN, assignedObjectTypeN, createdByIdN, createdByN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesList", localVarResponse);
        }
        return new ApiResponse<ExtrasJournalEntriesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasJournalEntriesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesListRequestBuilder(String id, String assignedObjectTypeId, String assignedObjectId, String created, String kind, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String assignedObjectType, String createdById, String createdBy, String idN, String idLte, String idLt, String idGte, String idGt, String assignedObjectTypeIdN, String assignedObjectIdN, String assignedObjectIdLte, String assignedObjectIdLt, String assignedObjectIdGte, String assignedObjectIdGt, String kindN, String tagN, String assignedObjectTypeN, String createdByIdN, String createdByN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_type_id", assignedObjectTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_id", assignedObjectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kind", kind));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_type", assignedObjectType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created_by_id", createdById));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created_by", createdBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_type_id__n", assignedObjectTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_id__n", assignedObjectIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_id__lte", assignedObjectIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_id__lt", assignedObjectIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_id__gte", assignedObjectIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_id__gt", assignedObjectIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kind__n", kindN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assigned_object_type__n", assignedObjectTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created_by_id__n", createdByIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created_by__n", createdByN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @param data  (required)
   * @return JournalEntry
   * @throws ApiException if fails to make API call
   */
  public JournalEntry extrasJournalEntriesPartialUpdate(Integer id, WritableJournalEntry data) throws ApiException {
    ApiResponse<JournalEntry> localVarResponse = extrasJournalEntriesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @param data  (required)
   * @return ApiResponse&lt;JournalEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JournalEntry> extrasJournalEntriesPartialUpdateWithHttpInfo(Integer id, WritableJournalEntry data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<JournalEntry>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JournalEntry>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesPartialUpdateRequestBuilder(Integer id, WritableJournalEntry data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasJournalEntriesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasJournalEntriesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @return JournalEntry
   * @throws ApiException if fails to make API call
   */
  public JournalEntry extrasJournalEntriesRead(Integer id) throws ApiException {
    ApiResponse<JournalEntry> localVarResponse = extrasJournalEntriesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @return ApiResponse&lt;JournalEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JournalEntry> extrasJournalEntriesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesRead", localVarResponse);
        }
        return new ApiResponse<JournalEntry>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JournalEntry>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasJournalEntriesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @param data  (required)
   * @return JournalEntry
   * @throws ApiException if fails to make API call
   */
  public JournalEntry extrasJournalEntriesUpdate(Integer id, WritableJournalEntry data) throws ApiException {
    ApiResponse<JournalEntry> localVarResponse = extrasJournalEntriesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this journal entry. (required)
   * @param data  (required)
   * @return ApiResponse&lt;JournalEntry&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JournalEntry> extrasJournalEntriesUpdateWithHttpInfo(Integer id, WritableJournalEntry data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasJournalEntriesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasJournalEntriesUpdate", localVarResponse);
        }
        return new ApiResponse<JournalEntry>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JournalEntry>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasJournalEntriesUpdateRequestBuilder(Integer id, WritableJournalEntry data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasJournalEntriesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasJournalEntriesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/journal-entries/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of recent changes.
   * @param id  (optional)
   * @param user  (optional)
   * @param userName  (optional)
   * @param requestId  (optional)
   * @param action  (optional)
   * @param changedObjectTypeId  (optional)
   * @param changedObjectId  (optional)
   * @param objectRepr  (optional)
   * @param q  (optional)
   * @param time  (optional)
   * @param changedObjectType  (optional)
   * @param userId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param userN  (optional)
   * @param userNameN  (optional)
   * @param userNameIc  (optional)
   * @param userNameNic  (optional)
   * @param userNameIew  (optional)
   * @param userNameNiew  (optional)
   * @param userNameIsw  (optional)
   * @param userNameNisw  (optional)
   * @param userNameIe  (optional)
   * @param userNameNie  (optional)
   * @param actionN  (optional)
   * @param changedObjectTypeIdN  (optional)
   * @param changedObjectIdN  (optional)
   * @param changedObjectIdLte  (optional)
   * @param changedObjectIdLt  (optional)
   * @param changedObjectIdGte  (optional)
   * @param changedObjectIdGt  (optional)
   * @param objectReprN  (optional)
   * @param objectReprIc  (optional)
   * @param objectReprNic  (optional)
   * @param objectReprIew  (optional)
   * @param objectReprNiew  (optional)
   * @param objectReprIsw  (optional)
   * @param objectReprNisw  (optional)
   * @param objectReprIe  (optional)
   * @param objectReprNie  (optional)
   * @param changedObjectTypeN  (optional)
   * @param userIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasObjectChangesList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasObjectChangesList200Response extrasObjectChangesList(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasObjectChangesList200Response> localVarResponse = extrasObjectChangesListWithHttpInfo(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of recent changes.
   * @param id  (optional)
   * @param user  (optional)
   * @param userName  (optional)
   * @param requestId  (optional)
   * @param action  (optional)
   * @param changedObjectTypeId  (optional)
   * @param changedObjectId  (optional)
   * @param objectRepr  (optional)
   * @param q  (optional)
   * @param time  (optional)
   * @param changedObjectType  (optional)
   * @param userId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param userN  (optional)
   * @param userNameN  (optional)
   * @param userNameIc  (optional)
   * @param userNameNic  (optional)
   * @param userNameIew  (optional)
   * @param userNameNiew  (optional)
   * @param userNameIsw  (optional)
   * @param userNameNisw  (optional)
   * @param userNameIe  (optional)
   * @param userNameNie  (optional)
   * @param actionN  (optional)
   * @param changedObjectTypeIdN  (optional)
   * @param changedObjectIdN  (optional)
   * @param changedObjectIdLte  (optional)
   * @param changedObjectIdLt  (optional)
   * @param changedObjectIdGte  (optional)
   * @param changedObjectIdGt  (optional)
   * @param objectReprN  (optional)
   * @param objectReprIc  (optional)
   * @param objectReprNic  (optional)
   * @param objectReprIew  (optional)
   * @param objectReprNiew  (optional)
   * @param objectReprIsw  (optional)
   * @param objectReprNisw  (optional)
   * @param objectReprIe  (optional)
   * @param objectReprNie  (optional)
   * @param changedObjectTypeN  (optional)
   * @param userIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasObjectChangesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasObjectChangesList200Response> extrasObjectChangesListWithHttpInfo(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasObjectChangesListRequestBuilder(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasObjectChangesList", localVarResponse);
        }
        return new ApiResponse<ExtrasObjectChangesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasObjectChangesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasObjectChangesListRequestBuilder(String id, String user, String userName, String requestId, String action, String changedObjectTypeId, String changedObjectId, String objectRepr, String q, String time, String changedObjectType, String userId, String idN, String idLte, String idLt, String idGte, String idGt, String userN, String userNameN, String userNameIc, String userNameNic, String userNameIew, String userNameNiew, String userNameIsw, String userNameNisw, String userNameIe, String userNameNie, String actionN, String changedObjectTypeIdN, String changedObjectIdN, String changedObjectIdLte, String changedObjectIdLt, String changedObjectIdGte, String changedObjectIdGt, String objectReprN, String objectReprIc, String objectReprNic, String objectReprIew, String objectReprNiew, String objectReprIsw, String objectReprNisw, String objectReprIe, String objectReprNie, String changedObjectTypeN, String userIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/object-changes/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user", user));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("request_id", requestId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("action", action));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_type_id", changedObjectTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_id", changedObjectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr", objectRepr));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("time", time));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_type", changedObjectType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user__n", userN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__n", userNameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__ic", userNameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__nic", userNameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__iew", userNameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__niew", userNameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__isw", userNameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__nisw", userNameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__ie", userNameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_name__nie", userNameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("action__n", actionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_type_id__n", changedObjectTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_id__n", changedObjectIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_id__lte", changedObjectIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_id__lt", changedObjectIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_id__gte", changedObjectIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_id__gt", changedObjectIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__n", objectReprN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__ic", objectReprIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__nic", objectReprNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__iew", objectReprIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__niew", objectReprNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__isw", objectReprIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__nisw", objectReprNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__ie", objectReprIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("object_repr__nie", objectReprNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed_object_type__n", changedObjectTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id__n", userIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of recent changes.
   * @param id A unique integer value identifying this object change. (required)
   * @return ObjectChange
   * @throws ApiException if fails to make API call
   */
  public ObjectChange extrasObjectChangesRead(Integer id) throws ApiException {
    ApiResponse<ObjectChange> localVarResponse = extrasObjectChangesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of recent changes.
   * @param id A unique integer value identifying this object change. (required)
   * @return ApiResponse&lt;ObjectChange&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectChange> extrasObjectChangesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasObjectChangesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasObjectChangesRead", localVarResponse);
        }
        return new ApiResponse<ObjectChange>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectChange>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasObjectChangesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasObjectChangesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/object-changes/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Compile all reports and their related results (if any). Result data is deferred in the list view.
   * @throws ApiException if fails to make API call
   */
  public void extrasReportsList() throws ApiException {
    extrasReportsListWithHttpInfo();
  }

  /**
   * 
   * Compile all reports and their related results (if any). Result data is deferred in the list view.
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasReportsListWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasReportsListRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasReportsList", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasReportsListRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/reports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasReportsRead(String id) throws ApiException {
    extrasReportsReadWithHttpInfo(id);
  }

  /**
   * 
   * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
   * @param id  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasReportsReadWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasReportsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasReportsRead", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasReportsReadRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasReportsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/reports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Run a Report identified as \&quot;&lt;module&gt;.&lt;script&gt;\&quot; and return the pending JobResult as the result
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasReportsRun(String id) throws ApiException {
    extrasReportsRunWithHttpInfo(id);
  }

  /**
   * 
   * Run a Report identified as \&quot;&lt;module&gt;.&lt;script&gt;\&quot; and return the pending JobResult as the result
   * @param id  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasReportsRunWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasReportsRunRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasReportsRun", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasReportsRunRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasReportsRun");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/reports/{id}/run/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasScriptsList() throws ApiException {
    extrasScriptsListWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasScriptsListWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasScriptsListRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasScriptsList", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasScriptsListRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/scripts/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasScriptsRead(String id) throws ApiException {
    extrasScriptsReadWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasScriptsReadWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasScriptsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasScriptsRead", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasScriptsReadRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasScriptsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/scripts/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasTagsBulkDelete() throws ApiException {
    extrasTagsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasTagsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Tag
   * @throws ApiException if fails to make API call
   */
  public Tag extrasTagsBulkPartialUpdate(Tag data) throws ApiException {
    ApiResponse<Tag> localVarResponse = extrasTagsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Tag&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Tag> extrasTagsBulkPartialUpdateWithHttpInfo(Tag data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Tag>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Tag>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsBulkPartialUpdateRequestBuilder(Tag data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasTagsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Tag
   * @throws ApiException if fails to make API call
   */
  public Tag extrasTagsBulkUpdate(Tag data) throws ApiException {
    ApiResponse<Tag> localVarResponse = extrasTagsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Tag&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Tag> extrasTagsBulkUpdateWithHttpInfo(Tag data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Tag>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Tag>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsBulkUpdateRequestBuilder(Tag data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasTagsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Tag
   * @throws ApiException if fails to make API call
   */
  public Tag extrasTagsCreate(Tag data) throws ApiException {
    ApiResponse<Tag> localVarResponse = extrasTagsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Tag&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Tag> extrasTagsCreateWithHttpInfo(Tag data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsCreate", localVarResponse);
        }
        return new ApiResponse<Tag>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Tag>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsCreateRequestBuilder(Tag data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasTagsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasTagsDelete(Integer id) throws ApiException {
    extrasTagsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasTagsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasTagsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param contentType  (optional)
   * @param contentTypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasTagsList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasTagsList200Response extrasTagsList(String id, String name, String slug, String color, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasTagsList200Response> localVarResponse = extrasTagsListWithHttpInfo(id, name, slug, color, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, contentType, contentTypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param contentType  (optional)
   * @param contentTypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasTagsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasTagsList200Response> extrasTagsListWithHttpInfo(String id, String name, String slug, String color, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsListRequestBuilder(id, name, slug, color, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, contentType, contentTypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsList", localVarResponse);
        }
        return new ApiResponse<ExtrasTagsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasTagsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsListRequestBuilder(String id, String name, String slug, String color, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String contentType, String contentTypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id", contentTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @param data  (required)
   * @return Tag
   * @throws ApiException if fails to make API call
   */
  public Tag extrasTagsPartialUpdate(Integer id, Tag data) throws ApiException {
    ApiResponse<Tag> localVarResponse = extrasTagsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Tag&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Tag> extrasTagsPartialUpdateWithHttpInfo(Integer id, Tag data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Tag>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Tag>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsPartialUpdateRequestBuilder(Integer id, Tag data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasTagsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasTagsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @return Tag
   * @throws ApiException if fails to make API call
   */
  public Tag extrasTagsRead(Integer id) throws ApiException {
    ApiResponse<Tag> localVarResponse = extrasTagsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @return ApiResponse&lt;Tag&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Tag> extrasTagsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsRead", localVarResponse);
        }
        return new ApiResponse<Tag>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Tag>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasTagsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @param data  (required)
   * @return Tag
   * @throws ApiException if fails to make API call
   */
  public Tag extrasTagsUpdate(Integer id, Tag data) throws ApiException {
    ApiResponse<Tag> localVarResponse = extrasTagsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this tag. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Tag&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Tag> extrasTagsUpdateWithHttpInfo(Integer id, Tag data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasTagsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasTagsUpdate", localVarResponse);
        }
        return new ApiResponse<Tag>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Tag>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasTagsUpdateRequestBuilder(Integer id, Tag data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasTagsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasTagsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/tags/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void extrasWebhooksBulkDelete() throws ApiException {
    extrasWebhooksBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasWebhooksBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook extrasWebhooksBulkPartialUpdate(Webhook data) throws ApiException {
    ApiResponse<Webhook> localVarResponse = extrasWebhooksBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Webhook&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Webhook> extrasWebhooksBulkPartialUpdateWithHttpInfo(Webhook data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Webhook>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Webhook>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksBulkPartialUpdateRequestBuilder(Webhook data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasWebhooksBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook extrasWebhooksBulkUpdate(Webhook data) throws ApiException {
    ApiResponse<Webhook> localVarResponse = extrasWebhooksBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Webhook&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Webhook> extrasWebhooksBulkUpdateWithHttpInfo(Webhook data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Webhook>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Webhook>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksBulkUpdateRequestBuilder(Webhook data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasWebhooksBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook extrasWebhooksCreate(Webhook data) throws ApiException {
    ApiResponse<Webhook> localVarResponse = extrasWebhooksCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Webhook&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Webhook> extrasWebhooksCreateWithHttpInfo(Webhook data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksCreate", localVarResponse);
        }
        return new ApiResponse<Webhook>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Webhook>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksCreateRequestBuilder(Webhook data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasWebhooksCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @throws ApiException if fails to make API call
   */
  public void extrasWebhooksDelete(Integer id) throws ApiException {
    extrasWebhooksDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> extrasWebhooksDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasWebhooksDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param typeCreate  (optional)
   * @param typeUpdate  (optional)
   * @param typeDelete  (optional)
   * @param payloadUrl  (optional)
   * @param enabled  (optional)
   * @param httpMethod  (optional)
   * @param httpContentType  (optional)
   * @param secret  (optional)
   * @param sslVerification  (optional)
   * @param caFilePath  (optional)
   * @param q  (optional)
   * @param contentTypeId  (optional)
   * @param contentTypes  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param payloadUrlN  (optional)
   * @param payloadUrlIc  (optional)
   * @param payloadUrlNic  (optional)
   * @param payloadUrlIew  (optional)
   * @param payloadUrlNiew  (optional)
   * @param payloadUrlIsw  (optional)
   * @param payloadUrlNisw  (optional)
   * @param payloadUrlIe  (optional)
   * @param payloadUrlNie  (optional)
   * @param httpMethodN  (optional)
   * @param httpContentTypeN  (optional)
   * @param httpContentTypeIc  (optional)
   * @param httpContentTypeNic  (optional)
   * @param httpContentTypeIew  (optional)
   * @param httpContentTypeNiew  (optional)
   * @param httpContentTypeIsw  (optional)
   * @param httpContentTypeNisw  (optional)
   * @param httpContentTypeIe  (optional)
   * @param httpContentTypeNie  (optional)
   * @param secretN  (optional)
   * @param secretIc  (optional)
   * @param secretNic  (optional)
   * @param secretIew  (optional)
   * @param secretNiew  (optional)
   * @param secretIsw  (optional)
   * @param secretNisw  (optional)
   * @param secretIe  (optional)
   * @param secretNie  (optional)
   * @param caFilePathN  (optional)
   * @param caFilePathIc  (optional)
   * @param caFilePathNic  (optional)
   * @param caFilePathIew  (optional)
   * @param caFilePathNiew  (optional)
   * @param caFilePathIsw  (optional)
   * @param caFilePathNisw  (optional)
   * @param caFilePathIe  (optional)
   * @param caFilePathNie  (optional)
   * @param contentTypeIdN  (optional)
   * @param contentTypeIdLte  (optional)
   * @param contentTypeIdLt  (optional)
   * @param contentTypeIdGte  (optional)
   * @param contentTypeIdGt  (optional)
   * @param contentTypesN  (optional)
   * @param contentTypesIc  (optional)
   * @param contentTypesNic  (optional)
   * @param contentTypesIew  (optional)
   * @param contentTypesNiew  (optional)
   * @param contentTypesIsw  (optional)
   * @param contentTypesNisw  (optional)
   * @param contentTypesIe  (optional)
   * @param contentTypesNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ExtrasWebhooksList200Response
   * @throws ApiException if fails to make API call
   */
  public ExtrasWebhooksList200Response extrasWebhooksList(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<ExtrasWebhooksList200Response> localVarResponse = extrasWebhooksListWithHttpInfo(id, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, secret, sslVerification, caFilePath, q, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, payloadUrlN, payloadUrlIc, payloadUrlNic, payloadUrlIew, payloadUrlNiew, payloadUrlIsw, payloadUrlNisw, payloadUrlIe, payloadUrlNie, httpMethodN, httpContentTypeN, httpContentTypeIc, httpContentTypeNic, httpContentTypeIew, httpContentTypeNiew, httpContentTypeIsw, httpContentTypeNisw, httpContentTypeIe, httpContentTypeNie, secretN, secretIc, secretNic, secretIew, secretNiew, secretIsw, secretNisw, secretIe, secretNie, caFilePathN, caFilePathIc, caFilePathNic, caFilePathIew, caFilePathNiew, caFilePathIsw, caFilePathNisw, caFilePathIe, caFilePathNie, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param typeCreate  (optional)
   * @param typeUpdate  (optional)
   * @param typeDelete  (optional)
   * @param payloadUrl  (optional)
   * @param enabled  (optional)
   * @param httpMethod  (optional)
   * @param httpContentType  (optional)
   * @param secret  (optional)
   * @param sslVerification  (optional)
   * @param caFilePath  (optional)
   * @param q  (optional)
   * @param contentTypeId  (optional)
   * @param contentTypes  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param payloadUrlN  (optional)
   * @param payloadUrlIc  (optional)
   * @param payloadUrlNic  (optional)
   * @param payloadUrlIew  (optional)
   * @param payloadUrlNiew  (optional)
   * @param payloadUrlIsw  (optional)
   * @param payloadUrlNisw  (optional)
   * @param payloadUrlIe  (optional)
   * @param payloadUrlNie  (optional)
   * @param httpMethodN  (optional)
   * @param httpContentTypeN  (optional)
   * @param httpContentTypeIc  (optional)
   * @param httpContentTypeNic  (optional)
   * @param httpContentTypeIew  (optional)
   * @param httpContentTypeNiew  (optional)
   * @param httpContentTypeIsw  (optional)
   * @param httpContentTypeNisw  (optional)
   * @param httpContentTypeIe  (optional)
   * @param httpContentTypeNie  (optional)
   * @param secretN  (optional)
   * @param secretIc  (optional)
   * @param secretNic  (optional)
   * @param secretIew  (optional)
   * @param secretNiew  (optional)
   * @param secretIsw  (optional)
   * @param secretNisw  (optional)
   * @param secretIe  (optional)
   * @param secretNie  (optional)
   * @param caFilePathN  (optional)
   * @param caFilePathIc  (optional)
   * @param caFilePathNic  (optional)
   * @param caFilePathIew  (optional)
   * @param caFilePathNiew  (optional)
   * @param caFilePathIsw  (optional)
   * @param caFilePathNisw  (optional)
   * @param caFilePathIe  (optional)
   * @param caFilePathNie  (optional)
   * @param contentTypeIdN  (optional)
   * @param contentTypeIdLte  (optional)
   * @param contentTypeIdLt  (optional)
   * @param contentTypeIdGte  (optional)
   * @param contentTypeIdGt  (optional)
   * @param contentTypesN  (optional)
   * @param contentTypesIc  (optional)
   * @param contentTypesNic  (optional)
   * @param contentTypesIew  (optional)
   * @param contentTypesNiew  (optional)
   * @param contentTypesIsw  (optional)
   * @param contentTypesNisw  (optional)
   * @param contentTypesIe  (optional)
   * @param contentTypesNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;ExtrasWebhooksList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtrasWebhooksList200Response> extrasWebhooksListWithHttpInfo(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksListRequestBuilder(id, name, typeCreate, typeUpdate, typeDelete, payloadUrl, enabled, httpMethod, httpContentType, secret, sslVerification, caFilePath, q, contentTypeId, contentTypes, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, payloadUrlN, payloadUrlIc, payloadUrlNic, payloadUrlIew, payloadUrlNiew, payloadUrlIsw, payloadUrlNisw, payloadUrlIe, payloadUrlNie, httpMethodN, httpContentTypeN, httpContentTypeIc, httpContentTypeNic, httpContentTypeIew, httpContentTypeNiew, httpContentTypeIsw, httpContentTypeNisw, httpContentTypeIe, httpContentTypeNie, secretN, secretIc, secretNic, secretIew, secretNiew, secretIsw, secretNisw, secretIe, secretNie, caFilePathN, caFilePathIc, caFilePathNic, caFilePathIew, caFilePathNiew, caFilePathIsw, caFilePathNisw, caFilePathIe, caFilePathNie, contentTypeIdN, contentTypeIdLte, contentTypeIdLt, contentTypeIdGte, contentTypeIdGt, contentTypesN, contentTypesIc, contentTypesNic, contentTypesIew, contentTypesNiew, contentTypesIsw, contentTypesNisw, contentTypesIe, contentTypesNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksList", localVarResponse);
        }
        return new ApiResponse<ExtrasWebhooksList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtrasWebhooksList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksListRequestBuilder(String id, String name, String typeCreate, String typeUpdate, String typeDelete, String payloadUrl, String enabled, String httpMethod, String httpContentType, String secret, String sslVerification, String caFilePath, String q, String contentTypeId, String contentTypes, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String payloadUrlN, String payloadUrlIc, String payloadUrlNic, String payloadUrlIew, String payloadUrlNiew, String payloadUrlIsw, String payloadUrlNisw, String payloadUrlIe, String payloadUrlNie, String httpMethodN, String httpContentTypeN, String httpContentTypeIc, String httpContentTypeNic, String httpContentTypeIew, String httpContentTypeNiew, String httpContentTypeIsw, String httpContentTypeNisw, String httpContentTypeIe, String httpContentTypeNie, String secretN, String secretIc, String secretNic, String secretIew, String secretNiew, String secretIsw, String secretNisw, String secretIe, String secretNie, String caFilePathN, String caFilePathIc, String caFilePathNic, String caFilePathIew, String caFilePathNiew, String caFilePathIsw, String caFilePathNisw, String caFilePathIe, String caFilePathNie, String contentTypeIdN, String contentTypeIdLte, String contentTypeIdLt, String contentTypeIdGte, String contentTypeIdGt, String contentTypesN, String contentTypesIc, String contentTypesNic, String contentTypesIew, String contentTypesNiew, String contentTypesIsw, String contentTypesNisw, String contentTypesIe, String contentTypesNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type_create", typeCreate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type_update", typeUpdate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type_delete", typeDelete));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url", payloadUrl));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabled", enabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_method", httpMethod));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type", httpContentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret", secret));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ssl_verification", sslVerification));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path", caFilePath));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id", contentTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types", contentTypes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__n", payloadUrlN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__ic", payloadUrlIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__nic", payloadUrlNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__iew", payloadUrlIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__niew", payloadUrlNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__isw", payloadUrlIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__nisw", payloadUrlNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__ie", payloadUrlIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("payload_url__nie", payloadUrlNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_method__n", httpMethodN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__n", httpContentTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__ic", httpContentTypeIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__nic", httpContentTypeNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__iew", httpContentTypeIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__niew", httpContentTypeNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__isw", httpContentTypeIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__nisw", httpContentTypeNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__ie", httpContentTypeIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("http_content_type__nie", httpContentTypeNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__n", secretN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__ic", secretIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__nic", secretNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__iew", secretIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__niew", secretNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__isw", secretIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__nisw", secretNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__ie", secretIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("secret__nie", secretNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__n", caFilePathN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__ic", caFilePathIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__nic", caFilePathNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__iew", caFilePathIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__niew", caFilePathNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__isw", caFilePathIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__nisw", caFilePathNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__ie", caFilePathIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ca_file_path__nie", caFilePathNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__n", contentTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__lte", contentTypeIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__lt", contentTypeIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__gte", contentTypeIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type_id__gt", contentTypeIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__n", contentTypesN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__ic", contentTypesIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__nic", contentTypesNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__iew", contentTypesIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__niew", contentTypesNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__isw", contentTypesIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__nisw", contentTypesNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__ie", contentTypesIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_types__nie", contentTypesNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @param data  (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook extrasWebhooksPartialUpdate(Integer id, Webhook data) throws ApiException {
    ApiResponse<Webhook> localVarResponse = extrasWebhooksPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Webhook&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Webhook> extrasWebhooksPartialUpdateWithHttpInfo(Integer id, Webhook data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Webhook>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Webhook>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksPartialUpdateRequestBuilder(Integer id, Webhook data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasWebhooksPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasWebhooksPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook extrasWebhooksRead(Integer id) throws ApiException {
    ApiResponse<Webhook> localVarResponse = extrasWebhooksReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @return ApiResponse&lt;Webhook&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Webhook> extrasWebhooksReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksRead", localVarResponse);
        }
        return new ApiResponse<Webhook>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Webhook>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasWebhooksRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @param data  (required)
   * @return Webhook
   * @throws ApiException if fails to make API call
   */
  public Webhook extrasWebhooksUpdate(Integer id, Webhook data) throws ApiException {
    ApiResponse<Webhook> localVarResponse = extrasWebhooksUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this webhook. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Webhook&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Webhook> extrasWebhooksUpdateWithHttpInfo(Integer id, Webhook data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extrasWebhooksUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extrasWebhooksUpdate", localVarResponse);
        }
        return new ApiResponse<Webhook>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Webhook>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extrasWebhooksUpdateRequestBuilder(Integer id, Webhook data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling extrasWebhooksUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling extrasWebhooksUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extras/webhooks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
