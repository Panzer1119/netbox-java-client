/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiCallback;
import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Configuration;
import de.codemakers.netbox.client.Pair;
import de.codemakers.netbox.client.ProgressRequestBody;
import de.codemakers.netbox.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.codemakers.netbox.client.model.Cable;
import de.codemakers.netbox.client.model.CableTermination;
import de.codemakers.netbox.client.model.ConsolePort;
import de.codemakers.netbox.client.model.ConsolePortTemplate;
import de.codemakers.netbox.client.model.ConsoleServerPort;
import de.codemakers.netbox.client.model.ConsoleServerPortTemplate;
import de.codemakers.netbox.client.model.DcimCableTerminationsList200Response;
import de.codemakers.netbox.client.model.DcimCablesList200Response;
import de.codemakers.netbox.client.model.DcimConsolePortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimConsolePortsList200Response;
import de.codemakers.netbox.client.model.DcimConsoleServerPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimConsoleServerPortsList200Response;
import de.codemakers.netbox.client.model.DcimDeviceBayTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimDeviceBaysList200Response;
import de.codemakers.netbox.client.model.DcimDeviceRolesList200Response;
import de.codemakers.netbox.client.model.DcimDeviceTypesList200Response;
import de.codemakers.netbox.client.model.DcimDevicesList200Response;
import de.codemakers.netbox.client.model.DcimFrontPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimFrontPortsList200Response;
import de.codemakers.netbox.client.model.DcimInterfaceTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimInterfacesList200Response;
import de.codemakers.netbox.client.model.DcimInventoryItemRolesList200Response;
import de.codemakers.netbox.client.model.DcimInventoryItemTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimInventoryItemsList200Response;
import de.codemakers.netbox.client.model.DcimLocationsList200Response;
import de.codemakers.netbox.client.model.DcimManufacturersList200Response;
import de.codemakers.netbox.client.model.DcimModuleBayTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimModuleBaysList200Response;
import de.codemakers.netbox.client.model.DcimModuleTypesList200Response;
import de.codemakers.netbox.client.model.DcimModulesList200Response;
import de.codemakers.netbox.client.model.DcimPlatformsList200Response;
import de.codemakers.netbox.client.model.DcimPowerFeedsList200Response;
import de.codemakers.netbox.client.model.DcimPowerOutletTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimPowerOutletsList200Response;
import de.codemakers.netbox.client.model.DcimPowerPanelsList200Response;
import de.codemakers.netbox.client.model.DcimPowerPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimPowerPortsList200Response;
import de.codemakers.netbox.client.model.DcimRackReservationsList200Response;
import de.codemakers.netbox.client.model.DcimRackRolesList200Response;
import de.codemakers.netbox.client.model.DcimRacksList200Response;
import de.codemakers.netbox.client.model.DcimRearPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimRearPortsList200Response;
import de.codemakers.netbox.client.model.DcimRegionsList200Response;
import de.codemakers.netbox.client.model.DcimSiteGroupsList200Response;
import de.codemakers.netbox.client.model.DcimSitesList200Response;
import de.codemakers.netbox.client.model.DcimVirtualChassisList200Response;
import de.codemakers.netbox.client.model.Device;
import de.codemakers.netbox.client.model.DeviceBay;
import de.codemakers.netbox.client.model.DeviceBayTemplate;
import de.codemakers.netbox.client.model.DeviceNAPALM;
import de.codemakers.netbox.client.model.DeviceRole;
import de.codemakers.netbox.client.model.DeviceType;
import de.codemakers.netbox.client.model.DeviceWithConfigContext;
import de.codemakers.netbox.client.model.FrontPort;
import de.codemakers.netbox.client.model.FrontPortTemplate;
import de.codemakers.netbox.client.model.InterfaceTemplate;
import de.codemakers.netbox.client.model.InventoryItem;
import de.codemakers.netbox.client.model.InventoryItemRole;
import de.codemakers.netbox.client.model.InventoryItemTemplate;
import de.codemakers.netbox.client.model.Location;
import de.codemakers.netbox.client.model.Manufacturer;
import de.codemakers.netbox.client.model.ModelInterface;
import de.codemakers.netbox.client.model.Module;
import de.codemakers.netbox.client.model.ModuleBay;
import de.codemakers.netbox.client.model.ModuleBayTemplate;
import de.codemakers.netbox.client.model.ModuleType;
import de.codemakers.netbox.client.model.Platform;
import de.codemakers.netbox.client.model.PowerFeed;
import de.codemakers.netbox.client.model.PowerOutlet;
import de.codemakers.netbox.client.model.PowerOutletTemplate;
import de.codemakers.netbox.client.model.PowerPanel;
import de.codemakers.netbox.client.model.PowerPort;
import de.codemakers.netbox.client.model.PowerPortTemplate;
import de.codemakers.netbox.client.model.Rack;
import de.codemakers.netbox.client.model.RackReservation;
import de.codemakers.netbox.client.model.RackRole;
import de.codemakers.netbox.client.model.RackUnit;
import de.codemakers.netbox.client.model.RearPort;
import de.codemakers.netbox.client.model.RearPortTemplate;
import de.codemakers.netbox.client.model.Region;
import de.codemakers.netbox.client.model.Site;
import de.codemakers.netbox.client.model.SiteGroup;
import de.codemakers.netbox.client.model.VirtualChassis;
import de.codemakers.netbox.client.model.WritableCable;
import de.codemakers.netbox.client.model.WritableConsolePort;
import de.codemakers.netbox.client.model.WritableConsolePortTemplate;
import de.codemakers.netbox.client.model.WritableConsoleServerPort;
import de.codemakers.netbox.client.model.WritableConsoleServerPortTemplate;
import de.codemakers.netbox.client.model.WritableDeviceBay;
import de.codemakers.netbox.client.model.WritableDeviceBayTemplate;
import de.codemakers.netbox.client.model.WritableDeviceType;
import de.codemakers.netbox.client.model.WritableDeviceWithConfigContext;
import de.codemakers.netbox.client.model.WritableFrontPort;
import de.codemakers.netbox.client.model.WritableFrontPortTemplate;
import de.codemakers.netbox.client.model.WritableInterface;
import de.codemakers.netbox.client.model.WritableInterfaceTemplate;
import de.codemakers.netbox.client.model.WritableInventoryItem;
import de.codemakers.netbox.client.model.WritableInventoryItemTemplate;
import de.codemakers.netbox.client.model.WritableLocation;
import de.codemakers.netbox.client.model.WritableModule;
import de.codemakers.netbox.client.model.WritableModuleBay;
import de.codemakers.netbox.client.model.WritableModuleBayTemplate;
import de.codemakers.netbox.client.model.WritableModuleType;
import de.codemakers.netbox.client.model.WritablePlatform;
import de.codemakers.netbox.client.model.WritablePowerFeed;
import de.codemakers.netbox.client.model.WritablePowerOutlet;
import de.codemakers.netbox.client.model.WritablePowerOutletTemplate;
import de.codemakers.netbox.client.model.WritablePowerPanel;
import de.codemakers.netbox.client.model.WritablePowerPort;
import de.codemakers.netbox.client.model.WritablePowerPortTemplate;
import de.codemakers.netbox.client.model.WritableRack;
import de.codemakers.netbox.client.model.WritableRackReservation;
import de.codemakers.netbox.client.model.WritableRearPort;
import de.codemakers.netbox.client.model.WritableRearPortTemplate;
import de.codemakers.netbox.client.model.WritableRegion;
import de.codemakers.netbox.client.model.WritableSite;
import de.codemakers.netbox.client.model.WritableSiteGroup;
import de.codemakers.netbox.client.model.WritableVirtualChassis;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DcimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DcimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DcimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dcimCableTerminationsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimCableTerminationsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCableTerminationsBulkDelete() throws ApiException {
        dcimCableTerminationsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCableTerminationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkPartialUpdateCall(CableTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsBulkPartialUpdateValidateBeforeCall(CableTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCableTerminationsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCableTerminationsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsBulkPartialUpdate(CableTermination data) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsBulkPartialUpdateWithHttpInfo(CableTermination data) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkPartialUpdateAsync(CableTermination data, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkUpdateCall(CableTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsBulkUpdateValidateBeforeCall(CableTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCableTerminationsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCableTerminationsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsBulkUpdate(CableTermination data) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsBulkUpdateWithHttpInfo(CableTermination data) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkUpdateAsync(CableTermination data, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsCreateCall(CableTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsCreateValidateBeforeCall(CableTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCableTerminationsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCableTerminationsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsCreate(CableTermination data) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsCreateWithHttpInfo(CableTermination data) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsCreateAsync(CableTermination data, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsDelete
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCableTerminationsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCableTerminationsDelete(Integer id) throws ApiException {
        dcimCableTerminationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCableTerminationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsList
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsListCall(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (cable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable", cable));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (terminationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_type", terminationType));
        }

        if (terminationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id", terminationId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (cableN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable__n", cableN));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (terminationTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_type__n", terminationTypeN));
        }

        if (terminationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__n", terminationIdN));
        }

        if (terminationIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__lte", terminationIdLte));
        }

        if (terminationIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__lt", terminationIdLt));
        }

        if (terminationIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__gte", terminationIdGte));
        }

        if (terminationIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__gt", terminationIdGt));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsListValidateBeforeCall(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimCableTerminationsListCall(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimCableTerminationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimCableTerminationsList200Response dcimCableTerminationsList(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimCableTerminationsList200Response> localVarResp = dcimCableTerminationsListWithHttpInfo(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimCableTerminationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimCableTerminationsList200Response> dcimCableTerminationsListWithHttpInfo(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsListValidateBeforeCall(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimCableTerminationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsListAsync(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset, final ApiCallback<DcimCableTerminationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsListValidateBeforeCall(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimCableTerminationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsPartialUpdate
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsPartialUpdateCall(Integer id, CableTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsPartialUpdateValidateBeforeCall(Integer id, CableTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCableTerminationsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCableTerminationsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsPartialUpdate(Integer id, CableTermination data) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsPartialUpdateWithHttpInfo(Integer id, CableTermination data) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsPartialUpdateAsync(Integer id, CableTermination data, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsRead
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCableTerminationsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsRead(Integer id) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsReadAsync(Integer id, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsUpdate
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsUpdateCall(Integer id, CableTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsUpdateValidateBeforeCall(Integer id, CableTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCableTerminationsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCableTerminationsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsUpdate(Integer id, CableTermination data) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsUpdateWithHttpInfo(Integer id, CableTermination data) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsUpdateAsync(Integer id, CableTermination data, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimCablesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCablesBulkDelete() throws ApiException {
        dcimCablesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCablesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimCablesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkPartialUpdateCall(WritableCable data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesBulkPartialUpdateValidateBeforeCall(WritableCable data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCablesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCablesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesBulkPartialUpdate(WritableCable data) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesBulkPartialUpdateWithHttpInfo(WritableCable data) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkPartialUpdateAsync(WritableCable data, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkUpdateCall(WritableCable data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesBulkUpdateValidateBeforeCall(WritableCable data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCablesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCablesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesBulkUpdate(WritableCable data) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesBulkUpdateWithHttpInfo(WritableCable data) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkUpdateAsync(WritableCable data, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesCreateCall(WritableCable data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesCreateValidateBeforeCall(WritableCable data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCablesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCablesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesCreate(WritableCable data) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesCreateWithHttpInfo(WritableCable data) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesCreateAsync(WritableCable data, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesDelete
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCablesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCablesDelete(Integer id) throws ApiException {
        dcimCablesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCablesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesList
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesListCall(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (lengthUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_unit", lengthUnit));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (terminationAType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_type", terminationAType));
        }

        if (terminationAId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id", terminationAId));
        }

        if (terminationBType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_type", terminationBType));
        }

        if (terminationBId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id", terminationBId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (lengthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__n", lengthN));
        }

        if (lengthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__lte", lengthLte));
        }

        if (lengthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__lt", lengthLt));
        }

        if (lengthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__gte", lengthGte));
        }

        if (lengthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__gt", lengthGt));
        }

        if (lengthUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_unit__n", lengthUnitN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (terminationATypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_type__n", terminationATypeN));
        }

        if (terminationAIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__n", terminationAIdN));
        }

        if (terminationAIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__lte", terminationAIdLte));
        }

        if (terminationAIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__lt", terminationAIdLt));
        }

        if (terminationAIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__gte", terminationAIdGte));
        }

        if (terminationAIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__gt", terminationAIdGt));
        }

        if (terminationBTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_type__n", terminationBTypeN));
        }

        if (terminationBIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__n", terminationBIdN));
        }

        if (terminationBIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__lte", terminationBIdLte));
        }

        if (terminationBIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__lt", terminationBIdLt));
        }

        if (terminationBIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__gte", terminationBIdGte));
        }

        if (terminationBIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__gt", terminationBIdGt));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesListValidateBeforeCall(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimCablesListCall(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimCablesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimCablesList200Response dcimCablesList(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimCablesList200Response> localVarResp = dcimCablesListWithHttpInfo(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimCablesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimCablesList200Response> dcimCablesListWithHttpInfo(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesListValidateBeforeCall(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimCablesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesListAsync(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimCablesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesListValidateBeforeCall(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimCablesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesPartialUpdate
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesPartialUpdateCall(Integer id, WritableCable data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesPartialUpdateValidateBeforeCall(Integer id, WritableCable data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCablesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCablesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesPartialUpdate(Integer id, WritableCable data) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesPartialUpdateWithHttpInfo(Integer id, WritableCable data) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesPartialUpdateAsync(Integer id, WritableCable data, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesRead
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCablesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesRead(Integer id) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesReadAsync(Integer id, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesUpdate
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesUpdateCall(Integer id, WritableCable data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesUpdateValidateBeforeCall(Integer id, WritableCable data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimCablesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimCablesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesUpdate(Integer id, WritableCable data) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesUpdateWithHttpInfo(Integer id, WritableCable data) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesUpdateAsync(Integer id, WritableCable data, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConnectedDeviceList
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/connected-device/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (peerDevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_device", peerDevice));
        }

        if (peerInterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_interface", peerInterface));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConnectedDeviceListValidateBeforeCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'peerDevice' is set
        if (peerDevice == null) {
            throw new ApiException("Missing the required parameter 'peerDevice' when calling dcimConnectedDeviceList(Async)");
        }
        
        // verify the required parameter 'peerInterface' is set
        if (peerInterface == null) {
            throw new ApiException("Missing the required parameter 'peerInterface' when calling dcimConnectedDeviceList(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConnectedDeviceListCall(peerDevice, peerInterface, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimConnectedDeviceList(String peerDevice, String peerInterface) throws ApiException {
        ApiResponse<Device> localVarResp = dcimConnectedDeviceListWithHttpInfo(peerDevice, peerInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimConnectedDeviceListWithHttpInfo(String peerDevice, String peerInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListAsync(String peerDevice, String peerInterface, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortTemplatesBulkDelete() throws ApiException {
        dcimConsolePortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkPartialUpdateCall(WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesBulkPartialUpdateValidateBeforeCall(WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesBulkPartialUpdate(WritableConsolePortTemplate data) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesBulkPartialUpdateWithHttpInfo(WritableConsolePortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkPartialUpdateAsync(WritableConsolePortTemplate data, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkUpdateCall(WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesBulkUpdateValidateBeforeCall(WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesBulkUpdate(WritableConsolePortTemplate data) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesBulkUpdateWithHttpInfo(WritableConsolePortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkUpdateAsync(WritableConsolePortTemplate data, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateCall(WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesCreateValidateBeforeCall(WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesCreate(WritableConsolePortTemplate data) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesCreateWithHttpInfo(WritableConsolePortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateAsync(WritableConsolePortTemplate data, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesDelete
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortTemplatesDelete(Integer id) throws ApiException {
        dcimConsolePortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesListValidateBeforeCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesListCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsolePortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsolePortTemplatesList200Response dcimConsolePortTemplatesList(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsolePortTemplatesList200Response> localVarResp = dcimConsolePortTemplatesListWithHttpInfo(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsolePortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsolePortTemplatesList200Response> dcimConsolePortTemplatesListWithHttpInfo(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListAsync(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsolePortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateCall(Integer id, WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesPartialUpdate(Integer id, WritableConsolePortTemplate data) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateAsync(Integer id, WritableConsolePortTemplate data, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesRead
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadAsync(Integer id, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateCall(Integer id, WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesUpdate(Integer id, WritableConsolePortTemplate data) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateAsync(Integer id, WritableConsolePortTemplate data, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsolePortsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortsBulkDelete() throws ApiException {
        dcimConsolePortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkPartialUpdateCall(WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsBulkPartialUpdateValidateBeforeCall(WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsBulkPartialUpdate(WritableConsolePort data) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsBulkPartialUpdateWithHttpInfo(WritableConsolePort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkPartialUpdateAsync(WritableConsolePort data, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkUpdateCall(WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsBulkUpdateValidateBeforeCall(WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsBulkUpdate(WritableConsolePort data) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsBulkUpdateWithHttpInfo(WritableConsolePort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkUpdateAsync(WritableConsolePort data, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateCall(WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsCreateValidateBeforeCall(WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsCreate(WritableConsolePort data) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsCreateWithHttpInfo(WritableConsolePort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateAsync(WritableConsolePort data, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsDelete
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortsDelete(Integer id) throws ApiException {
        dcimConsolePortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsListValidateBeforeCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsolePortsListCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsolePortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsolePortsList200Response dcimConsolePortsList(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsolePortsList200Response> localVarResp = dcimConsolePortsListWithHttpInfo(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsolePortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsolePortsList200Response> dcimConsolePortsListWithHttpInfo(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsolePortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListAsync(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsolePortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsolePortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsPartialUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateCall(Integer id, WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsPartialUpdateValidateBeforeCall(Integer id, WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsPartialUpdate(Integer id, WritableConsolePort data) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsPartialUpdateWithHttpInfo(Integer id, WritableConsolePort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateAsync(Integer id, WritableConsolePort data, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsRead
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsRead(Integer id) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadAsync(Integer id, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsTrace
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/trace/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsTrace(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsTraceCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsTrace(Integer id) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsTraceAsync(Integer id, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateCall(Integer id, WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsUpdateValidateBeforeCall(Integer id, WritableConsolePort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsolePortsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsolePortsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsUpdate(Integer id, WritableConsolePort data) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsUpdateWithHttpInfo(Integer id, WritableConsolePort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateAsync(Integer id, WritableConsolePort data, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortTemplatesBulkDelete() throws ApiException {
        dcimConsoleServerPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkPartialUpdateCall(WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesBulkPartialUpdateValidateBeforeCall(WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesBulkPartialUpdate(WritableConsoleServerPortTemplate data) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesBulkPartialUpdateWithHttpInfo(WritableConsoleServerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkPartialUpdateAsync(WritableConsoleServerPortTemplate data, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkUpdateCall(WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesBulkUpdateValidateBeforeCall(WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesBulkUpdate(WritableConsoleServerPortTemplate data) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesBulkUpdateWithHttpInfo(WritableConsoleServerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkUpdateAsync(WritableConsoleServerPortTemplate data, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateCall(WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesCreateValidateBeforeCall(WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesCreate(WritableConsoleServerPortTemplate data) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesCreateWithHttpInfo(WritableConsoleServerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateAsync(WritableConsoleServerPortTemplate data, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesDelete
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortTemplatesDelete(Integer id) throws ApiException {
        dcimConsoleServerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesListValidateBeforeCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortTemplatesList200Response dcimConsoleServerPortTemplatesList(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortTemplatesList200Response> localVarResp = dcimConsoleServerPortTemplatesListWithHttpInfo(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortTemplatesList200Response> dcimConsoleServerPortTemplatesListWithHttpInfo(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListAsync(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateCall(Integer id, WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesPartialUpdate(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateAsync(Integer id, WritableConsoleServerPortTemplate data, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesRead
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadAsync(Integer id, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateCall(Integer id, WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesUpdate(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateAsync(Integer id, WritableConsoleServerPortTemplate data, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortsBulkDelete() throws ApiException {
        dcimConsoleServerPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkPartialUpdateCall(WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsBulkPartialUpdateValidateBeforeCall(WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsBulkPartialUpdate(WritableConsoleServerPort data) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsBulkPartialUpdateWithHttpInfo(WritableConsoleServerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkPartialUpdateAsync(WritableConsoleServerPort data, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkUpdateCall(WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsBulkUpdateValidateBeforeCall(WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsBulkUpdate(WritableConsoleServerPort data) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsBulkUpdateWithHttpInfo(WritableConsoleServerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkUpdateAsync(WritableConsoleServerPort data, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateCall(WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsCreateValidateBeforeCall(WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsCreate(WritableConsoleServerPort data) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsCreateWithHttpInfo(WritableConsoleServerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateAsync(WritableConsoleServerPort data, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsDelete
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortsDelete(Integer id) throws ApiException {
        dcimConsoleServerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsListValidateBeforeCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsListCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortsList200Response dcimConsoleServerPortsList(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortsList200Response> localVarResp = dcimConsoleServerPortsListWithHttpInfo(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortsList200Response> dcimConsoleServerPortsListWithHttpInfo(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListAsync(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsPartialUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateCall(Integer id, WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsPartialUpdate(Integer id, WritableConsoleServerPort data) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateAsync(Integer id, WritableConsoleServerPort data, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsRead
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadAsync(Integer id, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsTrace
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/trace/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsTrace(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsTraceCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsTrace(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsTraceAsync(Integer id, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateCall(Integer id, WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimConsoleServerPortsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsUpdate(Integer id, WritableConsoleServerPort data) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsUpdateWithHttpInfo(Integer id, WritableConsoleServerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateAsync(Integer id, WritableConsoleServerPort data, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBayTemplatesBulkDelete() throws ApiException {
        dcimDeviceBayTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBayTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkPartialUpdateCall(WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesBulkPartialUpdateValidateBeforeCall(WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBayTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesBulkPartialUpdate(WritableDeviceBayTemplate data) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesBulkPartialUpdateWithHttpInfo(WritableDeviceBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkPartialUpdateAsync(WritableDeviceBayTemplate data, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkUpdateCall(WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesBulkUpdateValidateBeforeCall(WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBayTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesBulkUpdate(WritableDeviceBayTemplate data) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesBulkUpdateWithHttpInfo(WritableDeviceBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkUpdateAsync(WritableDeviceBayTemplate data, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateCall(WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesCreateValidateBeforeCall(WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBayTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesCreate(WritableDeviceBayTemplate data) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesCreateWithHttpInfo(WritableDeviceBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateAsync(WritableDeviceBayTemplate data, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesDelete
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBayTemplatesDelete(Integer id) throws ApiException {
        dcimDeviceBayTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesListValidateBeforeCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBayTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBayTemplatesList200Response dcimDeviceBayTemplatesList(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBayTemplatesList200Response> localVarResp = dcimDeviceBayTemplatesListWithHttpInfo(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBayTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBayTemplatesList200Response> dcimDeviceBayTemplatesListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListAsync(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceBayTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesPartialUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateCall(Integer id, WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesPartialUpdate(Integer id, WritableDeviceBayTemplate data) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateAsync(Integer id, WritableDeviceBayTemplate data, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesRead
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesRead(Integer id) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadAsync(Integer id, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateCall(Integer id, WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesUpdate(Integer id, WritableDeviceBayTemplate data) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateAsync(Integer id, WritableDeviceBayTemplate data, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceBaysBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBaysBulkDelete() throws ApiException {
        dcimDeviceBaysBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBaysBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkPartialUpdateCall(WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysBulkPartialUpdateValidateBeforeCall(WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBaysBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBaysBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysBulkPartialUpdate(WritableDeviceBay data) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysBulkPartialUpdateWithHttpInfo(WritableDeviceBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkPartialUpdateAsync(WritableDeviceBay data, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkUpdateCall(WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysBulkUpdateValidateBeforeCall(WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBaysBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBaysBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysBulkUpdate(WritableDeviceBay data) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysBulkUpdateWithHttpInfo(WritableDeviceBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkUpdateAsync(WritableDeviceBay data, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateCall(WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysCreateValidateBeforeCall(WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBaysCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBaysCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysCreate(WritableDeviceBay data) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysCreateWithHttpInfo(WritableDeviceBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateAsync(WritableDeviceBay data, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysDelete
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBaysDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBaysDelete(Integer id) throws ApiException {
        dcimDeviceBaysDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBaysDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysListValidateBeforeCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceBaysListCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBaysList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBaysList200Response dcimDeviceBaysList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBaysList200Response> localVarResp = dcimDeviceBaysListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBaysList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBaysList200Response> dcimDeviceBaysListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListAsync(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceBaysList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysPartialUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateCall(Integer id, WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBaysPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysPartialUpdate(Integer id, WritableDeviceBay data) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysPartialUpdateWithHttpInfo(Integer id, WritableDeviceBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateAsync(Integer id, WritableDeviceBay data, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysRead
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBaysReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysRead(Integer id) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadAsync(Integer id, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateCall(Integer id, WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysUpdateValidateBeforeCall(Integer id, WritableDeviceBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceBaysUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceBaysUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysUpdate(Integer id, WritableDeviceBay data) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysUpdateWithHttpInfo(Integer id, WritableDeviceBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateAsync(Integer id, WritableDeviceBay data, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceRolesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceRolesBulkDelete() throws ApiException {
        dcimDeviceRolesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkPartialUpdateCall(DeviceRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesBulkPartialUpdateValidateBeforeCall(DeviceRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceRolesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceRolesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesBulkPartialUpdate(DeviceRole data) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesBulkPartialUpdateWithHttpInfo(DeviceRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkPartialUpdateAsync(DeviceRole data, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkUpdateCall(DeviceRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesBulkUpdateValidateBeforeCall(DeviceRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceRolesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceRolesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesBulkUpdate(DeviceRole data) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesBulkUpdateWithHttpInfo(DeviceRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkUpdateAsync(DeviceRole data, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateCall(DeviceRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesCreateValidateBeforeCall(DeviceRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceRolesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceRolesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesCreate(DeviceRole data) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesCreateWithHttpInfo(DeviceRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateAsync(DeviceRole data, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesDelete
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceRolesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceRolesDelete(Integer id) throws ApiException {
        dcimDeviceRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListCall(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (vmRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vm_role", vmRole));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesListValidateBeforeCall(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceRolesListCall(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceRolesList200Response dcimDeviceRolesList(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceRolesList200Response> localVarResp = dcimDeviceRolesListWithHttpInfo(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceRolesList200Response> dcimDeviceRolesListWithHttpInfo(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListAsync(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesPartialUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateCall(Integer id, DeviceRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesPartialUpdateValidateBeforeCall(Integer id, DeviceRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceRolesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesPartialUpdate(Integer id, DeviceRole data) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesPartialUpdateWithHttpInfo(Integer id, DeviceRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateAsync(Integer id, DeviceRole data, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesRead
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceRolesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesRead(Integer id) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadAsync(Integer id, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateCall(Integer id, DeviceRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesUpdateValidateBeforeCall(Integer id, DeviceRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceRolesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceRolesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesUpdate(Integer id, DeviceRole data) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesUpdateWithHttpInfo(Integer id, DeviceRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateAsync(Integer id, DeviceRole data, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceTypesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceTypesBulkDelete() throws ApiException {
        dcimDeviceTypesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceTypesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkPartialUpdateCall(WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesBulkPartialUpdateValidateBeforeCall(WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceTypesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceTypesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesBulkPartialUpdate(WritableDeviceType data) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesBulkPartialUpdateWithHttpInfo(WritableDeviceType data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkPartialUpdateAsync(WritableDeviceType data, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkUpdateCall(WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesBulkUpdateValidateBeforeCall(WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceTypesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceTypesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesBulkUpdate(WritableDeviceType data) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesBulkUpdateWithHttpInfo(WritableDeviceType data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkUpdateAsync(WritableDeviceType data, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateCall(WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesCreateValidateBeforeCall(WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceTypesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceTypesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesCreate(WritableDeviceType data) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesCreateWithHttpInfo(WritableDeviceType data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateAsync(WritableDeviceType data, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesDelete
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceTypesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceTypesDelete(Integer id) throws ApiException {
        dcimDeviceTypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesList
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListCall(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number", partNumber));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (subdeviceRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdevice_role", subdeviceRole));
        }

        if (airflow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow", airflow));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (moduleBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bays", moduleBays));
        }

        if (deviceBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_bays", deviceBays));
        }

        if (inventoryItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_items", inventoryItems));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (modelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ic", modelIc));
        }

        if (modelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nic", modelNic));
        }

        if (modelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__iew", modelIew));
        }

        if (modelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__niew", modelNiew));
        }

        if (modelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__isw", modelIsw));
        }

        if (modelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nisw", modelNisw));
        }

        if (modelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ie", modelIe));
        }

        if (modelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nie", modelNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (partNumberN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__n", partNumberN));
        }

        if (partNumberIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ic", partNumberIc));
        }

        if (partNumberNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nic", partNumberNic));
        }

        if (partNumberIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__iew", partNumberIew));
        }

        if (partNumberNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__niew", partNumberNiew));
        }

        if (partNumberIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__isw", partNumberIsw));
        }

        if (partNumberNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nisw", partNumberNisw));
        }

        if (partNumberIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ie", partNumberIe));
        }

        if (partNumberNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nie", partNumberNie));
        }

        if (uHeightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__n", uHeightN));
        }

        if (uHeightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lte", uHeightLte));
        }

        if (uHeightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lt", uHeightLt));
        }

        if (uHeightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gte", uHeightGte));
        }

        if (uHeightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gt", uHeightGt));
        }

        if (subdeviceRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdevice_role__n", subdeviceRoleN));
        }

        if (airflowN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow__n", airflowN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesListValidateBeforeCall(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDeviceTypesListCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceTypesList200Response dcimDeviceTypesList(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceTypesList200Response> localVarResp = dcimDeviceTypesListWithHttpInfo(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceTypesList200Response> dcimDeviceTypesListWithHttpInfo(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListAsync(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesPartialUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateCall(Integer id, WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceTypesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesPartialUpdate(Integer id, WritableDeviceType data) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesPartialUpdateWithHttpInfo(Integer id, WritableDeviceType data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateAsync(Integer id, WritableDeviceType data, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesRead
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceTypesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesRead(Integer id) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadAsync(Integer id, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateCall(Integer id, WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesUpdateValidateBeforeCall(Integer id, WritableDeviceType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDeviceTypesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDeviceTypesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesUpdate(Integer id, WritableDeviceType data) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesUpdateWithHttpInfo(Integer id, WritableDeviceType data) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateAsync(Integer id, WritableDeviceType data, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDevicesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDevicesBulkDelete() throws ApiException {
        dcimDevicesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDevicesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkPartialUpdateCall(WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesBulkPartialUpdateValidateBeforeCall(WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDevicesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesBulkPartialUpdate(WritableDeviceWithConfigContext data) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesBulkPartialUpdateWithHttpInfo(WritableDeviceWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkPartialUpdateAsync(WritableDeviceWithConfigContext data, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkUpdateCall(WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesBulkUpdateValidateBeforeCall(WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDevicesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesBulkUpdate(WritableDeviceWithConfigContext data) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesBulkUpdateWithHttpInfo(WritableDeviceWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkUpdateAsync(WritableDeviceWithConfigContext data, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateCall(WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesCreateValidateBeforeCall(WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDevicesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesCreate(WritableDeviceWithConfigContext data) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesCreateWithHttpInfo(WritableDeviceWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateAsync(WritableDeviceWithConfigContext data, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesDelete
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDevicesDelete(Integer id) throws ApiException {
        dcimDevicesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDevicesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesList
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListCall(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (face != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face", face));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (airflow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow", airflow));
        }

        if (vcPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position", vcPosition));
        }

        if (vcPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority", vcPriority));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (localContextData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local_context_data", localContextData));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (deviceTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id", deviceTypeId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (parentDeviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_device_id", parentDeviceId));
        }

        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id", platformId));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (hasPrimaryIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_primary_ip", hasPrimaryIp));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassisMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_member", virtualChassisMember));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (moduleBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bays", moduleBays));
        }

        if (deviceBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_bays", deviceBays));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (faceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face__n", faceN));
        }

        if (positionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__n", positionN));
        }

        if (positionLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__lte", positionLte));
        }

        if (positionLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__lt", positionLt));
        }

        if (positionGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__gte", positionGte));
        }

        if (positionGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__gt", positionGt));
        }

        if (airflowN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow__n", airflowN));
        }

        if (vcPositionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__n", vcPositionN));
        }

        if (vcPositionLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__lte", vcPositionLte));
        }

        if (vcPositionLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__lt", vcPositionLt));
        }

        if (vcPositionGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__gte", vcPositionGte));
        }

        if (vcPositionGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__gt", vcPositionGt));
        }

        if (vcPriorityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__n", vcPriorityN));
        }

        if (vcPriorityLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__lte", vcPriorityLte));
        }

        if (vcPriorityLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__lt", vcPriorityLt));
        }

        if (vcPriorityGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__gte", vcPriorityGte));
        }

        if (vcPriorityGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__gt", vcPriorityGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (deviceTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id__n", deviceTypeIdN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (parentDeviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_device_id__n", parentDeviceIdN));
        }

        if (platformIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id__n", platformIdN));
        }

        if (platformN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform__n", platformN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (clusterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id__n", clusterIdN));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }

        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }

        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }

        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }

        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }

        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }

        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }

        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }

        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesListValidateBeforeCall(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimDevicesListCall(id, name, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, virtualChassisIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDevicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDevicesList200Response dcimDevicesList(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDevicesList200Response> localVarResp = dcimDevicesListWithHttpInfo(id, name, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, virtualChassisIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDevicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDevicesList200Response> dcimDevicesListWithHttpInfo(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(id, name, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, virtualChassisIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListAsync(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDevicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(id, name, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, virtualChassisIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesNapalm
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmCall(Integer id, String method, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/napalm/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesNapalmValidateBeforeCall(Integer id, String method, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesNapalm(Async)");
        }
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling dcimDevicesNapalm(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesNapalmCall(id, method, _callback);
        return localVarCall;

    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @return DeviceNAPALM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceNAPALM dcimDevicesNapalm(Integer id, String method) throws ApiException {
        ApiResponse<DeviceNAPALM> localVarResp = dcimDevicesNapalmWithHttpInfo(id, method);
        return localVarResp.getData();
    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @return ApiResponse&lt;DeviceNAPALM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceNAPALM> dcimDevicesNapalmWithHttpInfo(Integer id, String method) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, method, null);
        Type localVarReturnType = new TypeToken<DeviceNAPALM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmAsync(Integer id, String method, final ApiCallback<DeviceNAPALM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, method, _callback);
        Type localVarReturnType = new TypeToken<DeviceNAPALM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesPartialUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateCall(Integer id, WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDevicesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesPartialUpdate(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesPartialUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateAsync(Integer id, WritableDeviceWithConfigContext data, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesRead
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesRead(Integer id) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadAsync(Integer id, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateCall(Integer id, WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesUpdateValidateBeforeCall(Integer id, WritableDeviceWithConfigContext data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimDevicesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimDevicesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesUpdate(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateAsync(Integer id, WritableDeviceWithConfigContext data, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortTemplatesBulkDelete() throws ApiException {
        dcimFrontPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkPartialUpdateCall(WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesBulkPartialUpdateValidateBeforeCall(WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesBulkPartialUpdate(WritableFrontPortTemplate data) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesBulkPartialUpdateWithHttpInfo(WritableFrontPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkPartialUpdateAsync(WritableFrontPortTemplate data, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkUpdateCall(WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesBulkUpdateValidateBeforeCall(WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesBulkUpdate(WritableFrontPortTemplate data) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesBulkUpdateWithHttpInfo(WritableFrontPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkUpdateAsync(WritableFrontPortTemplate data, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesCreateCall(WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesCreateValidateBeforeCall(WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesCreate(WritableFrontPortTemplate data) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesCreateWithHttpInfo(WritableFrontPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesCreateAsync(WritableFrontPortTemplate data, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesDelete
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortTemplatesDelete(Integer id) throws ApiException {
        dcimFrontPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesListCall(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesListValidateBeforeCall(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesListCall(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimFrontPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimFrontPortTemplatesList200Response dcimFrontPortTemplatesList(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimFrontPortTemplatesList200Response> localVarResp = dcimFrontPortTemplatesListWithHttpInfo(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimFrontPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimFrontPortTemplatesList200Response> dcimFrontPortTemplatesListWithHttpInfo(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesListValidateBeforeCall(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimFrontPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesListAsync(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimFrontPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesListValidateBeforeCall(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimFrontPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesPartialUpdateCall(Integer id, WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesPartialUpdate(Integer id, WritableFrontPortTemplate data) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesPartialUpdateAsync(Integer id, WritableFrontPortTemplate data, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesRead
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesReadAsync(Integer id, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesUpdate
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesUpdateCall(Integer id, WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesUpdateValidateBeforeCall(Integer id, WritableFrontPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesUpdate(Integer id, WritableFrontPortTemplate data) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesUpdateAsync(Integer id, WritableFrontPortTemplate data, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimFrontPortsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortsBulkDelete() throws ApiException {
        dcimFrontPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkPartialUpdateCall(WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsBulkPartialUpdateValidateBeforeCall(WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsBulkPartialUpdate(WritableFrontPort data) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsBulkPartialUpdateWithHttpInfo(WritableFrontPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkPartialUpdateAsync(WritableFrontPort data, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkUpdateCall(WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsBulkUpdateValidateBeforeCall(WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsBulkUpdate(WritableFrontPort data) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsBulkUpdateWithHttpInfo(WritableFrontPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkUpdateAsync(WritableFrontPort data, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsCreateCall(WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsCreateValidateBeforeCall(WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsCreate(WritableFrontPort data) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsCreateWithHttpInfo(WritableFrontPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsCreateAsync(WritableFrontPort data, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsDelete
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortsDelete(Integer id) throws ApiException {
        dcimFrontPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsListCall(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsListValidateBeforeCall(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimFrontPortsListCall(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimFrontPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimFrontPortsList200Response dcimFrontPortsList(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimFrontPortsList200Response> localVarResp = dcimFrontPortsListWithHttpInfo(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimFrontPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimFrontPortsList200Response> dcimFrontPortsListWithHttpInfo(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsListValidateBeforeCall(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimFrontPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsListAsync(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimFrontPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsListValidateBeforeCall(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimFrontPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsPartialUpdate
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPartialUpdateCall(Integer id, WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsPartialUpdateValidateBeforeCall(Integer id, WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsPartialUpdate(Integer id, WritableFrontPort data) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsPartialUpdateWithHttpInfo(Integer id, WritableFrontPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPartialUpdateAsync(Integer id, WritableFrontPort data, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsPaths
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPathsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/paths/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsPathsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsPaths(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsPathsCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this front port. (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsPaths(Integer id) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsPathsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsPathsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsPathsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPathsAsync(Integer id, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsPathsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsRead
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsRead(Integer id) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsReadAsync(Integer id, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsUpdate
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsUpdateCall(Integer id, WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsUpdateValidateBeforeCall(Integer id, WritableFrontPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimFrontPortsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimFrontPortsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsUpdate(Integer id, WritableFrontPort data) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsUpdateWithHttpInfo(Integer id, WritableFrontPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsUpdateAsync(Integer id, WritableFrontPort data, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfaceTemplatesBulkDelete() throws ApiException {
        dcimInterfaceTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfaceTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkPartialUpdateCall(WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesBulkPartialUpdateValidateBeforeCall(WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfaceTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesBulkPartialUpdate(WritableInterfaceTemplate data) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesBulkPartialUpdateWithHttpInfo(WritableInterfaceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkPartialUpdateAsync(WritableInterfaceTemplate data, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkUpdateCall(WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesBulkUpdateValidateBeforeCall(WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfaceTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesBulkUpdate(WritableInterfaceTemplate data) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesBulkUpdateWithHttpInfo(WritableInterfaceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkUpdateAsync(WritableInterfaceTemplate data, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateCall(WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesCreateValidateBeforeCall(WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfaceTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesCreate(WritableInterfaceTemplate data) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesCreateWithHttpInfo(WritableInterfaceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateAsync(WritableInterfaceTemplate data, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesDelete
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfaceTemplatesDelete(Integer id) throws ApiException {
        dcimInterfaceTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfaceTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListCall(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (poeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode", poeMode));
        }

        if (poeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type", poeType));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (poeModeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode__n", poeModeN));
        }

        if (poeTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type__n", poeTypeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesListValidateBeforeCall(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesListCall(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfaceTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfaceTemplatesList200Response dcimInterfaceTemplatesList(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfaceTemplatesList200Response> localVarResp = dcimInterfaceTemplatesListWithHttpInfo(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfaceTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfaceTemplatesList200Response> dcimInterfaceTemplatesListWithHttpInfo(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListAsync(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInterfaceTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesPartialUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateCall(Integer id, WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesPartialUpdate(Integer id, WritableInterfaceTemplate data) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateAsync(Integer id, WritableInterfaceTemplate data, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesRead
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesRead(Integer id) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadAsync(Integer id, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateCall(Integer id, WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfaceTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesUpdate(Integer id, WritableInterfaceTemplate data) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateAsync(Integer id, WritableInterfaceTemplate data, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInterfacesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfacesBulkDelete() throws ApiException {
        dcimInterfacesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfacesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkPartialUpdateCall(WritableInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesBulkPartialUpdateValidateBeforeCall(WritableInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfacesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesBulkPartialUpdate(WritableInterface data) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesBulkPartialUpdateWithHttpInfo(WritableInterface data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkPartialUpdateAsync(WritableInterface data, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkUpdateCall(WritableInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesBulkUpdateValidateBeforeCall(WritableInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfacesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesBulkUpdate(WritableInterface data) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesBulkUpdateWithHttpInfo(WritableInterface data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkUpdateAsync(WritableInterface data, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateCall(WritableInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesCreateValidateBeforeCall(WritableInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfacesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesCreate(WritableInterface data) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesCreateWithHttpInfo(WritableInterface data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateAsync(WritableInterface data, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesDelete
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfacesDelete(Integer id) throws ApiException {
        dcimInterfacesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfacesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListCall(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (mtu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu", mtu));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (poeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode", poeMode));
        }

        if (poeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type", poeType));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (rfRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_role", rfRole));
        }

        if (rfChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel", rfChannel));
        }

        if (rfChannelFrequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency", rfChannelFrequency));
        }

        if (rfChannelWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width", rfChannelWidth));
        }

        if (txPower != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power", txPower));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (bridgeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_id", bridgeId));
        }

        if (lagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lag_id", lagId));
        }

        if (speed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed", speed));
        }

        if (duplex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplex", duplex));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (wwn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn", wwn));
        }

        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }

        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (mtuN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__n", mtuN));
        }

        if (mtuLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lte", mtuLte));
        }

        if (mtuLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lt", mtuLt));
        }

        if (mtuGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gte", mtuGte));
        }

        if (mtuGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gt", mtuGt));
        }

        if (poeModeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode__n", poeModeN));
        }

        if (poeTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type__n", poeTypeN));
        }

        if (modeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode__n", modeN));
        }

        if (rfRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_role__n", rfRoleN));
        }

        if (rfChannelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel__n", rfChannelN));
        }

        if (rfChannelFrequencyN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__n", rfChannelFrequencyN));
        }

        if (rfChannelFrequencyLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__lte", rfChannelFrequencyLte));
        }

        if (rfChannelFrequencyLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__lt", rfChannelFrequencyLt));
        }

        if (rfChannelFrequencyGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__gte", rfChannelFrequencyGte));
        }

        if (rfChannelFrequencyGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__gt", rfChannelFrequencyGt));
        }

        if (rfChannelWidthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__n", rfChannelWidthN));
        }

        if (rfChannelWidthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__lte", rfChannelWidthLte));
        }

        if (rfChannelWidthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__lt", rfChannelWidthLt));
        }

        if (rfChannelWidthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__gte", rfChannelWidthGte));
        }

        if (rfChannelWidthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__gt", rfChannelWidthGt));
        }

        if (txPowerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__n", txPowerN));
        }

        if (txPowerLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__lte", txPowerLte));
        }

        if (txPowerLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__lt", txPowerLt));
        }

        if (txPowerGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__gte", txPowerGte));
        }

        if (txPowerGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__gt", txPowerGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (bridgeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_id__n", bridgeIdN));
        }

        if (lagIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lag_id__n", lagIdN));
        }

        if (speedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__n", speedN));
        }

        if (speedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__lte", speedLte));
        }

        if (speedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__lt", speedLt));
        }

        if (speedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__gte", speedGte));
        }

        if (speedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__gt", speedGt));
        }

        if (duplexN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplex__n", duplexN));
        }

        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }

        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }

        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }

        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }

        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }

        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }

        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }

        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }

        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }

        if (wwnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__n", wwnN));
        }

        if (wwnIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__ic", wwnIc));
        }

        if (wwnNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__nic", wwnNic));
        }

        if (wwnIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__iew", wwnIew));
        }

        if (wwnNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__niew", wwnNiew));
        }

        if (wwnIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__isw", wwnIsw));
        }

        if (wwnNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__nisw", wwnNisw));
        }

        if (wwnIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__ie", wwnIe));
        }

        if (wwnNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__nie", wwnNie));
        }

        if (vrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id__n", vrfIdN));
        }

        if (vrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf__n", vrfN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesListValidateBeforeCall(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInterfacesListCall(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfacesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfacesList200Response dcimInterfacesList(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfacesList200Response> localVarResp = dcimInterfacesListWithHttpInfo(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfacesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfacesList200Response> dcimInterfacesListWithHttpInfo(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListAsync(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInterfacesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesPartialUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateCall(Integer id, WritableInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesPartialUpdateValidateBeforeCall(Integer id, WritableInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfacesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesPartialUpdate(Integer id, WritableInterface data) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesPartialUpdateWithHttpInfo(Integer id, WritableInterface data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateAsync(Integer id, WritableInterface data, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesRead
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesRead(Integer id) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadAsync(Integer id, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesTraceRead
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesTraceReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/trace/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesTraceReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesTraceRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesTraceReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesTraceRead(Integer id) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesTraceReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesTraceReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesTraceReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesTraceReadAsync(Integer id, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesTraceReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateCall(Integer id, WritableInterface data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesUpdateValidateBeforeCall(Integer id, WritableInterface data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInterfacesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInterfacesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesUpdate(Integer id, WritableInterface data) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesUpdateWithHttpInfo(Integer id, WritableInterface data) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateAsync(Integer id, WritableInterface data, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemRolesBulkDelete() throws ApiException {
        dcimInventoryItemRolesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkPartialUpdateCall(InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesBulkPartialUpdateValidateBeforeCall(InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemRolesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesBulkPartialUpdate(InventoryItemRole data) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesBulkPartialUpdateWithHttpInfo(InventoryItemRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkPartialUpdateAsync(InventoryItemRole data, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkUpdateCall(InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesBulkUpdateValidateBeforeCall(InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemRolesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesBulkUpdate(InventoryItemRole data) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesBulkUpdateWithHttpInfo(InventoryItemRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkUpdateAsync(InventoryItemRole data, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesCreateCall(InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesCreateValidateBeforeCall(InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemRolesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesCreate(InventoryItemRole data) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesCreateWithHttpInfo(InventoryItemRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesCreateAsync(InventoryItemRole data, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesDelete
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemRolesDelete(Integer id) throws ApiException {
        dcimInventoryItemRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesListCall(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesListValidateBeforeCall(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesListCall(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemRolesList200Response dcimInventoryItemRolesList(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemRolesList200Response> localVarResp = dcimInventoryItemRolesListWithHttpInfo(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemRolesList200Response> dcimInventoryItemRolesListWithHttpInfo(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesListValidateBeforeCall(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesListAsync(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesListValidateBeforeCall(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesPartialUpdate
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesPartialUpdateCall(Integer id, InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesPartialUpdateValidateBeforeCall(Integer id, InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemRolesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesPartialUpdate(Integer id, InventoryItemRole data) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesPartialUpdateWithHttpInfo(Integer id, InventoryItemRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesPartialUpdateAsync(Integer id, InventoryItemRole data, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesRead
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesRead(Integer id) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesReadAsync(Integer id, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesUpdate
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesUpdateCall(Integer id, InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesUpdateValidateBeforeCall(Integer id, InventoryItemRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemRolesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemRolesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesUpdate(Integer id, InventoryItemRole data) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesUpdateWithHttpInfo(Integer id, InventoryItemRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesUpdateAsync(Integer id, InventoryItemRole data, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemTemplatesBulkDelete() throws ApiException {
        dcimInventoryItemTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkPartialUpdateCall(WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesBulkPartialUpdateValidateBeforeCall(WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesBulkPartialUpdate(WritableInventoryItemTemplate data) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesBulkPartialUpdateWithHttpInfo(WritableInventoryItemTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkPartialUpdateAsync(WritableInventoryItemTemplate data, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkUpdateCall(WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesBulkUpdateValidateBeforeCall(WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesBulkUpdate(WritableInventoryItemTemplate data) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesBulkUpdateWithHttpInfo(WritableInventoryItemTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkUpdateAsync(WritableInventoryItemTemplate data, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesCreateCall(WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesCreateValidateBeforeCall(WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesCreate(WritableInventoryItemTemplate data) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesCreateWithHttpInfo(WritableInventoryItemTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesCreateAsync(WritableInventoryItemTemplate data, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesDelete
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemTemplatesDelete(Integer id) throws ApiException {
        dcimInventoryItemTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesListCall(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (partId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id", partId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (componentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type", componentType));
        }

        if (componentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id", componentId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (partIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__n", partIdN));
        }

        if (partIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ic", partIdIc));
        }

        if (partIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nic", partIdNic));
        }

        if (partIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__iew", partIdIew));
        }

        if (partIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__niew", partIdNiew));
        }

        if (partIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__isw", partIdIsw));
        }

        if (partIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nisw", partIdNisw));
        }

        if (partIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ie", partIdIe));
        }

        if (partIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nie", partIdNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (componentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type__n", componentTypeN));
        }

        if (componentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__n", componentIdN));
        }

        if (componentIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lte", componentIdLte));
        }

        if (componentIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lt", componentIdLt));
        }

        if (componentIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gte", componentIdGte));
        }

        if (componentIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gt", componentIdGt));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesListValidateBeforeCall(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesListCall(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemTemplatesList200Response dcimInventoryItemTemplatesList(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemTemplatesList200Response> localVarResp = dcimInventoryItemTemplatesListWithHttpInfo(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemTemplatesList200Response> dcimInventoryItemTemplatesListWithHttpInfo(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesListValidateBeforeCall(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesListAsync(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesListValidateBeforeCall(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesPartialUpdate
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesPartialUpdateCall(Integer id, WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesPartialUpdate(Integer id, WritableInventoryItemTemplate data) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInventoryItemTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesPartialUpdateAsync(Integer id, WritableInventoryItemTemplate data, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesRead
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesRead(Integer id) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesReadAsync(Integer id, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesUpdate
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesUpdateCall(Integer id, WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesUpdateValidateBeforeCall(Integer id, WritableInventoryItemTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesUpdate(Integer id, WritableInventoryItemTemplate data) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesUpdateWithHttpInfo(Integer id, WritableInventoryItemTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesUpdateAsync(Integer id, WritableInventoryItemTemplate data, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInventoryItemsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemsBulkDelete() throws ApiException {
        dcimInventoryItemsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkPartialUpdateCall(WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsBulkPartialUpdateValidateBeforeCall(WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsBulkPartialUpdate(WritableInventoryItem data) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsBulkPartialUpdateWithHttpInfo(WritableInventoryItem data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkPartialUpdateAsync(WritableInventoryItem data, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkUpdateCall(WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsBulkUpdateValidateBeforeCall(WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsBulkUpdate(WritableInventoryItem data) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsBulkUpdateWithHttpInfo(WritableInventoryItem data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkUpdateAsync(WritableInventoryItem data, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateCall(WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsCreateValidateBeforeCall(WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsCreate(WritableInventoryItem data) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsCreateWithHttpInfo(WritableInventoryItem data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateAsync(WritableInventoryItem data, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsDelete
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemsDelete(Integer id) throws ApiException {
        dcimInventoryItemsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListCall(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (partId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id", partId));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (discovered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("discovered", discovered));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (componentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type", componentType));
        }

        if (componentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id", componentId));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (partIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__n", partIdN));
        }

        if (partIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ic", partIdIc));
        }

        if (partIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nic", partIdNic));
        }

        if (partIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__iew", partIdIew));
        }

        if (partIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__niew", partIdNiew));
        }

        if (partIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__isw", partIdIsw));
        }

        if (partIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nisw", partIdNisw));
        }

        if (partIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ie", partIdIe));
        }

        if (partIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nie", partIdNie));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (componentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type__n", componentTypeN));
        }

        if (componentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__n", componentIdN));
        }

        if (componentIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lte", componentIdLte));
        }

        if (componentIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lt", componentIdLt));
        }

        if (componentIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gte", componentIdGte));
        }

        if (componentIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gt", componentIdGt));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsListValidateBeforeCall(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimInventoryItemsListCall(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemsList200Response dcimInventoryItemsList(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemsList200Response> localVarResp = dcimInventoryItemsListWithHttpInfo(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemsList200Response> dcimInventoryItemsListWithHttpInfo(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListAsync(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsPartialUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateCall(Integer id, WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsPartialUpdateValidateBeforeCall(Integer id, WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsPartialUpdate(Integer id, WritableInventoryItem data) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsPartialUpdateWithHttpInfo(Integer id, WritableInventoryItem data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateAsync(Integer id, WritableInventoryItem data, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsRead
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsRead(Integer id) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadAsync(Integer id, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateCall(Integer id, WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsUpdateValidateBeforeCall(Integer id, WritableInventoryItem data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimInventoryItemsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimInventoryItemsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsUpdate(Integer id, WritableInventoryItem data) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsUpdateWithHttpInfo(Integer id, WritableInventoryItem data) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateAsync(Integer id, WritableInventoryItem data, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimLocationsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimLocationsBulkDelete() throws ApiException {
        dcimLocationsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimLocationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkPartialUpdateCall(WritableLocation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsBulkPartialUpdateValidateBeforeCall(WritableLocation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimLocationsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimLocationsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsBulkPartialUpdate(WritableLocation data) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsBulkPartialUpdateWithHttpInfo(WritableLocation data) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkPartialUpdateAsync(WritableLocation data, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkUpdateCall(WritableLocation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsBulkUpdateValidateBeforeCall(WritableLocation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimLocationsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimLocationsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsBulkUpdate(WritableLocation data) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsBulkUpdateWithHttpInfo(WritableLocation data) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkUpdateAsync(WritableLocation data, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsCreateCall(WritableLocation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsCreateValidateBeforeCall(WritableLocation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimLocationsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimLocationsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsCreate(WritableLocation data) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsCreateWithHttpInfo(WritableLocation data) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsCreateAsync(WritableLocation data, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsDelete
     * @param id A unique integer value identifying this location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimLocationsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimLocationsDelete(Integer id) throws ApiException {
        dcimLocationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimLocationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsListCall(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsListValidateBeforeCall(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimLocationsListCall(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimLocationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimLocationsList200Response dcimLocationsList(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimLocationsList200Response> localVarResp = dcimLocationsListWithHttpInfo(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimLocationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimLocationsList200Response> dcimLocationsListWithHttpInfo(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsListValidateBeforeCall(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimLocationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsListAsync(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimLocationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsListValidateBeforeCall(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimLocationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsPartialUpdate
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsPartialUpdateCall(Integer id, WritableLocation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsPartialUpdateValidateBeforeCall(Integer id, WritableLocation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimLocationsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimLocationsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsPartialUpdate(Integer id, WritableLocation data) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsPartialUpdateWithHttpInfo(Integer id, WritableLocation data) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsPartialUpdateAsync(Integer id, WritableLocation data, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsRead
     * @param id A unique integer value identifying this location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimLocationsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsRead(Integer id) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsReadAsync(Integer id, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsUpdate
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsUpdateCall(Integer id, WritableLocation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsUpdateValidateBeforeCall(Integer id, WritableLocation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimLocationsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimLocationsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsUpdate(Integer id, WritableLocation data) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsUpdateWithHttpInfo(Integer id, WritableLocation data) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsUpdateAsync(Integer id, WritableLocation data, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimManufacturersBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimManufacturersBulkDelete() throws ApiException {
        dcimManufacturersBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimManufacturersBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkPartialUpdateCall(Manufacturer data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersBulkPartialUpdateValidateBeforeCall(Manufacturer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimManufacturersBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimManufacturersBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersBulkPartialUpdate(Manufacturer data) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersBulkPartialUpdateWithHttpInfo(Manufacturer data) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkPartialUpdateAsync(Manufacturer data, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkUpdateCall(Manufacturer data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersBulkUpdateValidateBeforeCall(Manufacturer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimManufacturersBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimManufacturersBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersBulkUpdate(Manufacturer data) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersBulkUpdateWithHttpInfo(Manufacturer data) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkUpdateAsync(Manufacturer data, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateCall(Manufacturer data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersCreateValidateBeforeCall(Manufacturer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimManufacturersCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimManufacturersCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersCreate(Manufacturer data) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersCreateWithHttpInfo(Manufacturer data) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateAsync(Manufacturer data, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersDelete
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimManufacturersDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimManufacturersDelete(Integer id) throws ApiException {
        dcimManufacturersDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimManufacturersDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimManufacturersListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimManufacturersList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimManufacturersList200Response dcimManufacturersList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimManufacturersList200Response> localVarResp = dcimManufacturersListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimManufacturersList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimManufacturersList200Response> dcimManufacturersListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimManufacturersList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersPartialUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateCall(Integer id, Manufacturer data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersPartialUpdateValidateBeforeCall(Integer id, Manufacturer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimManufacturersPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersPartialUpdate(Integer id, Manufacturer data) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersPartialUpdateWithHttpInfo(Integer id, Manufacturer data) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateAsync(Integer id, Manufacturer data, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersRead
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimManufacturersReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersRead(Integer id) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadAsync(Integer id, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateCall(Integer id, Manufacturer data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersUpdateValidateBeforeCall(Integer id, Manufacturer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimManufacturersUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimManufacturersUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersUpdate(Integer id, Manufacturer data) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersUpdateWithHttpInfo(Integer id, Manufacturer data) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateAsync(Integer id, Manufacturer data, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBayTemplatesBulkDelete() throws ApiException {
        dcimModuleBayTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBayTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkPartialUpdateCall(WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesBulkPartialUpdateValidateBeforeCall(WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBayTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesBulkPartialUpdate(WritableModuleBayTemplate data) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesBulkPartialUpdateWithHttpInfo(WritableModuleBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkPartialUpdateAsync(WritableModuleBayTemplate data, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkUpdateCall(WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesBulkUpdateValidateBeforeCall(WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBayTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesBulkUpdate(WritableModuleBayTemplate data) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesBulkUpdateWithHttpInfo(WritableModuleBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkUpdateAsync(WritableModuleBayTemplate data, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesCreateCall(WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesCreateValidateBeforeCall(WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBayTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesCreate(WritableModuleBayTemplate data) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesCreateWithHttpInfo(WritableModuleBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesCreateAsync(WritableModuleBayTemplate data, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesDelete
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBayTemplatesDelete(Integer id) throws ApiException {
        dcimModuleBayTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesListCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesListValidateBeforeCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesListCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModuleBayTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModuleBayTemplatesList200Response dcimModuleBayTemplatesList(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModuleBayTemplatesList200Response> localVarResp = dcimModuleBayTemplatesListWithHttpInfo(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModuleBayTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModuleBayTemplatesList200Response> dcimModuleBayTemplatesListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModuleBayTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesListAsync(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModuleBayTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModuleBayTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesPartialUpdate
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesPartialUpdateCall(Integer id, WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBayTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesPartialUpdate(Integer id, WritableModuleBayTemplate data) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableModuleBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesPartialUpdateAsync(Integer id, WritableModuleBayTemplate data, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesRead
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesReadAsync(Integer id, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesUpdate
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesUpdateCall(Integer id, WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesUpdateValidateBeforeCall(Integer id, WritableModuleBayTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBayTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBayTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesUpdate(Integer id, WritableModuleBayTemplate data) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesUpdateWithHttpInfo(Integer id, WritableModuleBayTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesUpdateAsync(Integer id, WritableModuleBayTemplate data, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModuleBaysBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBaysBulkDelete() throws ApiException {
        dcimModuleBaysBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBaysBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkPartialUpdateCall(WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysBulkPartialUpdateValidateBeforeCall(WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBaysBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBaysBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysBulkPartialUpdate(WritableModuleBay data) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysBulkPartialUpdateWithHttpInfo(WritableModuleBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkPartialUpdateAsync(WritableModuleBay data, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkUpdateCall(WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysBulkUpdateValidateBeforeCall(WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBaysBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBaysBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysBulkUpdate(WritableModuleBay data) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysBulkUpdateWithHttpInfo(WritableModuleBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkUpdateAsync(WritableModuleBay data, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysCreateCall(WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysCreateValidateBeforeCall(WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBaysCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBaysCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysCreate(WritableModuleBay data) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysCreateWithHttpInfo(WritableModuleBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysCreateAsync(WritableModuleBay data, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysDelete
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBaysDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBaysDelete(Integer id) throws ApiException {
        dcimModuleBaysDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBaysDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysListCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysListValidateBeforeCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModuleBaysListCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModuleBaysList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModuleBaysList200Response dcimModuleBaysList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModuleBaysList200Response> localVarResp = dcimModuleBaysListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModuleBaysList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModuleBaysList200Response> dcimModuleBaysListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModuleBaysList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysListAsync(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModuleBaysList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModuleBaysList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysPartialUpdate
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysPartialUpdateCall(Integer id, WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysPartialUpdateValidateBeforeCall(Integer id, WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBaysPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBaysPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysPartialUpdate(Integer id, WritableModuleBay data) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysPartialUpdateWithHttpInfo(Integer id, WritableModuleBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysPartialUpdateAsync(Integer id, WritableModuleBay data, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysRead
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBaysReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysRead(Integer id) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysReadAsync(Integer id, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysUpdate
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysUpdateCall(Integer id, WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysUpdateValidateBeforeCall(Integer id, WritableModuleBay data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleBaysUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleBaysUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysUpdate(Integer id, WritableModuleBay data) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysUpdateWithHttpInfo(Integer id, WritableModuleBay data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysUpdateAsync(Integer id, WritableModuleBay data, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModuleTypesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleTypesBulkDelete() throws ApiException {
        dcimModuleTypesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleTypesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkPartialUpdateCall(WritableModuleType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesBulkPartialUpdateValidateBeforeCall(WritableModuleType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleTypesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleTypesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesBulkPartialUpdate(WritableModuleType data) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesBulkPartialUpdateWithHttpInfo(WritableModuleType data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkPartialUpdateAsync(WritableModuleType data, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkUpdateCall(WritableModuleType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesBulkUpdateValidateBeforeCall(WritableModuleType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleTypesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleTypesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesBulkUpdate(WritableModuleType data) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesBulkUpdateWithHttpInfo(WritableModuleType data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkUpdateAsync(WritableModuleType data, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesCreateCall(WritableModuleType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesCreateValidateBeforeCall(WritableModuleType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleTypesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleTypesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesCreate(WritableModuleType data) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesCreateWithHttpInfo(WritableModuleType data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesCreateAsync(WritableModuleType data, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesDelete
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleTypesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleTypesDelete(Integer id) throws ApiException {
        dcimModuleTypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesList
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesListCall(String id, String model, String partNumber, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number", partNumber));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (modelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ic", modelIc));
        }

        if (modelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nic", modelNic));
        }

        if (modelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__iew", modelIew));
        }

        if (modelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__niew", modelNiew));
        }

        if (modelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__isw", modelIsw));
        }

        if (modelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nisw", modelNisw));
        }

        if (modelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ie", modelIe));
        }

        if (modelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nie", modelNie));
        }

        if (partNumberN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__n", partNumberN));
        }

        if (partNumberIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ic", partNumberIc));
        }

        if (partNumberNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nic", partNumberNic));
        }

        if (partNumberIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__iew", partNumberIew));
        }

        if (partNumberNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__niew", partNumberNiew));
        }

        if (partNumberIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__isw", partNumberIsw));
        }

        if (partNumberNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nisw", partNumberNisw));
        }

        if (partNumberIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ie", partNumberIe));
        }

        if (partNumberNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nie", partNumberNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesListValidateBeforeCall(String id, String model, String partNumber, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModuleTypesListCall(id, model, partNumber, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModuleTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModuleTypesList200Response dcimModuleTypesList(String id, String model, String partNumber, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModuleTypesList200Response> localVarResp = dcimModuleTypesListWithHttpInfo(id, model, partNumber, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModuleTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModuleTypesList200Response> dcimModuleTypesListWithHttpInfo(String id, String model, String partNumber, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesListValidateBeforeCall(id, model, partNumber, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModuleTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesListAsync(String id, String model, String partNumber, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModuleTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesListValidateBeforeCall(id, model, partNumber, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModuleTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesPartialUpdate
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesPartialUpdateCall(Integer id, WritableModuleType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesPartialUpdateValidateBeforeCall(Integer id, WritableModuleType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleTypesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleTypesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesPartialUpdate(Integer id, WritableModuleType data) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesPartialUpdateWithHttpInfo(Integer id, WritableModuleType data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesPartialUpdateAsync(Integer id, WritableModuleType data, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesRead
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleTypesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesRead(Integer id) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesReadAsync(Integer id, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesUpdate
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesUpdateCall(Integer id, WritableModuleType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesUpdateValidateBeforeCall(Integer id, WritableModuleType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModuleTypesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModuleTypesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesUpdate(Integer id, WritableModuleType data) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesUpdateWithHttpInfo(Integer id, WritableModuleType data) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesUpdateAsync(Integer id, WritableModuleType data, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModulesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModulesBulkDelete() throws ApiException {
        dcimModulesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModulesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModulesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkPartialUpdateCall(WritableModule data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesBulkPartialUpdateValidateBeforeCall(WritableModule data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModulesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModulesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesBulkPartialUpdate(WritableModule data) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesBulkPartialUpdateWithHttpInfo(WritableModule data) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkPartialUpdateAsync(WritableModule data, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkUpdateCall(WritableModule data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesBulkUpdateValidateBeforeCall(WritableModule data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModulesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModulesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesBulkUpdate(WritableModule data) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesBulkUpdateWithHttpInfo(WritableModule data) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkUpdateAsync(WritableModule data, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesCreateCall(WritableModule data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesCreateValidateBeforeCall(WritableModule data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModulesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModulesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesCreate(WritableModule data) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesCreateWithHttpInfo(WritableModule data) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesCreateAsync(WritableModule data, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesDelete
     * @param id A unique integer value identifying this module. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModulesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModulesDelete(Integer id) throws ApiException {
        dcimModulesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModulesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesList
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesListCall(String id, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (moduleTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type_id", moduleTypeId));
        }

        if (moduleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type", moduleType));
        }

        if (moduleBayId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bay_id", moduleBayId));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (moduleTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type_id__n", moduleTypeIdN));
        }

        if (moduleTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type__n", moduleTypeN));
        }

        if (moduleBayIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bay_id__n", moduleBayIdN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesListValidateBeforeCall(String id, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimModulesListCall(id, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModulesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModulesList200Response dcimModulesList(String id, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModulesList200Response> localVarResp = dcimModulesListWithHttpInfo(id, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModulesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModulesList200Response> dcimModulesListWithHttpInfo(String id, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesListValidateBeforeCall(id, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModulesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesListAsync(String id, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModulesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesListValidateBeforeCall(id, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModulesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesPartialUpdate
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesPartialUpdateCall(Integer id, WritableModule data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesPartialUpdateValidateBeforeCall(Integer id, WritableModule data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModulesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModulesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesPartialUpdate(Integer id, WritableModule data) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesPartialUpdateWithHttpInfo(Integer id, WritableModule data) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesPartialUpdateAsync(Integer id, WritableModule data, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesRead
     * @param id A unique integer value identifying this module. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModulesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesRead(Integer id) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesReadAsync(Integer id, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesUpdate
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesUpdateCall(Integer id, WritableModule data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesUpdateValidateBeforeCall(Integer id, WritableModule data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimModulesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimModulesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesUpdate(Integer id, WritableModule data) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesUpdateWithHttpInfo(Integer id, WritableModule data) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesUpdateAsync(Integer id, WritableModule data, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPlatformsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPlatformsBulkDelete() throws ApiException {
        dcimPlatformsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPlatformsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkPartialUpdateCall(WritablePlatform data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsBulkPartialUpdateValidateBeforeCall(WritablePlatform data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPlatformsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPlatformsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsBulkPartialUpdate(WritablePlatform data) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsBulkPartialUpdateWithHttpInfo(WritablePlatform data) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkPartialUpdateAsync(WritablePlatform data, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkUpdateCall(WritablePlatform data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsBulkUpdateValidateBeforeCall(WritablePlatform data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPlatformsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPlatformsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsBulkUpdate(WritablePlatform data) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsBulkUpdateWithHttpInfo(WritablePlatform data) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkUpdateAsync(WritablePlatform data, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateCall(WritablePlatform data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsCreateValidateBeforeCall(WritablePlatform data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPlatformsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPlatformsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsCreate(WritablePlatform data) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsCreateWithHttpInfo(WritablePlatform data) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateAsync(WritablePlatform data, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsDelete
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPlatformsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPlatformsDelete(Integer id) throws ApiException {
        dcimPlatformsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPlatformsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListCall(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (napalmDriver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver", napalmDriver));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (napalmDriverN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__n", napalmDriverN));
        }

        if (napalmDriverIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__ic", napalmDriverIc));
        }

        if (napalmDriverNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nic", napalmDriverNic));
        }

        if (napalmDriverIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__iew", napalmDriverIew));
        }

        if (napalmDriverNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__niew", napalmDriverNiew));
        }

        if (napalmDriverIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__isw", napalmDriverIsw));
        }

        if (napalmDriverNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nisw", napalmDriverNisw));
        }

        if (napalmDriverIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__ie", napalmDriverIe));
        }

        if (napalmDriverNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nie", napalmDriverNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsListValidateBeforeCall(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPlatformsListCall(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPlatformsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPlatformsList200Response dcimPlatformsList(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPlatformsList200Response> localVarResp = dcimPlatformsListWithHttpInfo(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPlatformsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPlatformsList200Response> dcimPlatformsListWithHttpInfo(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListAsync(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPlatformsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsPartialUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateCall(Integer id, WritablePlatform data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsPartialUpdateValidateBeforeCall(Integer id, WritablePlatform data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPlatformsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsPartialUpdate(Integer id, WritablePlatform data) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsPartialUpdateWithHttpInfo(Integer id, WritablePlatform data) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateAsync(Integer id, WritablePlatform data, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsRead
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPlatformsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsRead(Integer id) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadAsync(Integer id, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateCall(Integer id, WritablePlatform data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsUpdateValidateBeforeCall(Integer id, WritablePlatform data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPlatformsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPlatformsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsUpdate(Integer id, WritablePlatform data) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsUpdateWithHttpInfo(Integer id, WritablePlatform data) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateAsync(Integer id, WritablePlatform data, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerFeedsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerFeedsBulkDelete() throws ApiException {
        dcimPowerFeedsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerFeedsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkPartialUpdateCall(WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsBulkPartialUpdateValidateBeforeCall(WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerFeedsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsBulkPartialUpdate(WritablePowerFeed data) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsBulkPartialUpdateWithHttpInfo(WritablePowerFeed data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkPartialUpdateAsync(WritablePowerFeed data, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkUpdateCall(WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsBulkUpdateValidateBeforeCall(WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerFeedsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsBulkUpdate(WritablePowerFeed data) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsBulkUpdateWithHttpInfo(WritablePowerFeed data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkUpdateAsync(WritablePowerFeed data, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsCreateCall(WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsCreateValidateBeforeCall(WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerFeedsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsCreate(WritablePowerFeed data) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsCreateWithHttpInfo(WritablePowerFeed data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsCreateAsync(WritablePowerFeed data, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsDelete
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerFeedsDelete(Integer id) throws ApiException {
        dcimPowerFeedsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerFeedsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsList
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsListCall(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (supply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supply", supply));
        }

        if (phase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phase", phase));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (amperage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage", amperage));
        }

        if (maxUtilization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization", maxUtilization));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (powerPanelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_panel_id", powerPanelId));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (supplyN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supply__n", supplyN));
        }

        if (phaseN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phase__n", phaseN));
        }

        if (voltageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__n", voltageN));
        }

        if (voltageLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__lte", voltageLte));
        }

        if (voltageLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__lt", voltageLt));
        }

        if (voltageGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__gte", voltageGte));
        }

        if (voltageGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__gt", voltageGt));
        }

        if (amperageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__n", amperageN));
        }

        if (amperageLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__lte", amperageLte));
        }

        if (amperageLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__lt", amperageLt));
        }

        if (amperageGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__gte", amperageGte));
        }

        if (amperageGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__gt", amperageGt));
        }

        if (maxUtilizationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__n", maxUtilizationN));
        }

        if (maxUtilizationLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__lte", maxUtilizationLte));
        }

        if (maxUtilizationLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__lt", maxUtilizationLt));
        }

        if (maxUtilizationGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__gte", maxUtilizationGte));
        }

        if (maxUtilizationGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__gt", maxUtilizationGt));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (powerPanelIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_panel_id__n", powerPanelIdN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsListValidateBeforeCall(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerFeedsListCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerFeedsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerFeedsList200Response dcimPowerFeedsList(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerFeedsList200Response> localVarResp = dcimPowerFeedsListWithHttpInfo(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerFeedsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerFeedsList200Response> dcimPowerFeedsListWithHttpInfo(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsListValidateBeforeCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerFeedsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsListAsync(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerFeedsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsListValidateBeforeCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerFeedsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsPartialUpdate
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsPartialUpdateCall(Integer id, WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsPartialUpdateValidateBeforeCall(Integer id, WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerFeedsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsPartialUpdate(Integer id, WritablePowerFeed data) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsPartialUpdateWithHttpInfo(Integer id, WritablePowerFeed data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsPartialUpdateAsync(Integer id, WritablePowerFeed data, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsRead
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsRead(Integer id) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsReadAsync(Integer id, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsTrace
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/trace/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsTrace(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsTraceCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power feed. (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsTrace(Integer id) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsTraceAsync(Integer id, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsUpdate
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsUpdateCall(Integer id, WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsUpdateValidateBeforeCall(Integer id, WritablePowerFeed data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerFeedsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerFeedsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsUpdate(Integer id, WritablePowerFeed data) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsUpdateWithHttpInfo(Integer id, WritablePowerFeed data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsUpdateAsync(Integer id, WritablePowerFeed data, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletTemplatesBulkDelete() throws ApiException {
        dcimPowerOutletTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkPartialUpdateCall(WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesBulkPartialUpdateValidateBeforeCall(WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesBulkPartialUpdate(WritablePowerOutletTemplate data) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesBulkPartialUpdateWithHttpInfo(WritablePowerOutletTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkPartialUpdateAsync(WritablePowerOutletTemplate data, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkUpdateCall(WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesBulkUpdateValidateBeforeCall(WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesBulkUpdate(WritablePowerOutletTemplate data) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesBulkUpdateWithHttpInfo(WritablePowerOutletTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkUpdateAsync(WritablePowerOutletTemplate data, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateCall(WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesCreateValidateBeforeCall(WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesCreate(WritablePowerOutletTemplate data) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesCreateWithHttpInfo(WritablePowerOutletTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateAsync(WritablePowerOutletTemplate data, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesDelete
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletTemplatesDelete(Integer id) throws ApiException {
        dcimPowerOutletTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListCall(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (feedLeg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg", feedLeg));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (feedLegN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg__n", feedLegN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesListValidateBeforeCall(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListCall(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletTemplatesList200Response dcimPowerOutletTemplatesList(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletTemplatesList200Response> localVarResp = dcimPowerOutletTemplatesListWithHttpInfo(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletTemplatesList200Response> dcimPowerOutletTemplatesListWithHttpInfo(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListAsync(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesPartialUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateCall(Integer id, WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesPartialUpdate(Integer id, WritablePowerOutletTemplate data) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateAsync(Integer id, WritablePowerOutletTemplate data, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesRead
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadAsync(Integer id, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateCall(Integer id, WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesUpdate(Integer id, WritablePowerOutletTemplate data) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateAsync(Integer id, WritablePowerOutletTemplate data, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerOutletsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletsBulkDelete() throws ApiException {
        dcimPowerOutletsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkPartialUpdateCall(WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsBulkPartialUpdateValidateBeforeCall(WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsBulkPartialUpdate(WritablePowerOutlet data) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsBulkPartialUpdateWithHttpInfo(WritablePowerOutlet data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkPartialUpdateAsync(WritablePowerOutlet data, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkUpdateCall(WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsBulkUpdateValidateBeforeCall(WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsBulkUpdate(WritablePowerOutlet data) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsBulkUpdateWithHttpInfo(WritablePowerOutlet data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkUpdateAsync(WritablePowerOutlet data, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateCall(WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsCreateValidateBeforeCall(WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsCreate(WritablePowerOutlet data) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsCreateWithHttpInfo(WritablePowerOutlet data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateAsync(WritablePowerOutlet data, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsDelete
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletsDelete(Integer id) throws ApiException {
        dcimPowerOutletsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListCall(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (feedLeg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg", feedLeg));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (feedLegN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg__n", feedLegN));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsListValidateBeforeCall(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerOutletsListCall(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletsList200Response dcimPowerOutletsList(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletsList200Response> localVarResp = dcimPowerOutletsListWithHttpInfo(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletsList200Response> dcimPowerOutletsListWithHttpInfo(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListAsync(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsPartialUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateCall(Integer id, WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsPartialUpdate(Integer id, WritablePowerOutlet data) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsPartialUpdateWithHttpInfo(Integer id, WritablePowerOutlet data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateAsync(Integer id, WritablePowerOutlet data, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsRead
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsRead(Integer id) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadAsync(Integer id, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsTrace
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/trace/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsTrace(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsTraceCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsTrace(Integer id) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsTraceAsync(Integer id, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateCall(Integer id, WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsUpdateValidateBeforeCall(Integer id, WritablePowerOutlet data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerOutletsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerOutletsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsUpdate(Integer id, WritablePowerOutlet data) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsUpdateWithHttpInfo(Integer id, WritablePowerOutlet data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateAsync(Integer id, WritablePowerOutlet data, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerPanelsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPanelsBulkDelete() throws ApiException {
        dcimPowerPanelsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPanelsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkPartialUpdateCall(WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsBulkPartialUpdateValidateBeforeCall(WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPanelsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPanelsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsBulkPartialUpdate(WritablePowerPanel data) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsBulkPartialUpdateWithHttpInfo(WritablePowerPanel data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkPartialUpdateAsync(WritablePowerPanel data, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkUpdateCall(WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsBulkUpdateValidateBeforeCall(WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPanelsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPanelsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsBulkUpdate(WritablePowerPanel data) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsBulkUpdateWithHttpInfo(WritablePowerPanel data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkUpdateAsync(WritablePowerPanel data, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsCreateCall(WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsCreateValidateBeforeCall(WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPanelsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPanelsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsCreate(WritablePowerPanel data) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsCreateWithHttpInfo(WritablePowerPanel data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsCreateAsync(WritablePowerPanel data, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsDelete
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPanelsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPanelsDelete(Integer id) throws ApiException {
        dcimPowerPanelsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPanelsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsList
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsListCall(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsListValidateBeforeCall(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerPanelsListCall(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPanelsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPanelsList200Response dcimPowerPanelsList(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPanelsList200Response> localVarResp = dcimPowerPanelsListWithHttpInfo(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPanelsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPanelsList200Response> dcimPowerPanelsListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsListValidateBeforeCall(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPanelsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsListAsync(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerPanelsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsListValidateBeforeCall(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPanelsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsPartialUpdate
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsPartialUpdateCall(Integer id, WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsPartialUpdateValidateBeforeCall(Integer id, WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPanelsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPanelsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsPartialUpdate(Integer id, WritablePowerPanel data) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsPartialUpdateWithHttpInfo(Integer id, WritablePowerPanel data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsPartialUpdateAsync(Integer id, WritablePowerPanel data, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsRead
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPanelsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsRead(Integer id) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsReadAsync(Integer id, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsUpdate
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsUpdateCall(Integer id, WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsUpdateValidateBeforeCall(Integer id, WritablePowerPanel data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPanelsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPanelsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsUpdate(Integer id, WritablePowerPanel data) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsUpdateWithHttpInfo(Integer id, WritablePowerPanel data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsUpdateAsync(Integer id, WritablePowerPanel data, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortTemplatesBulkDelete() throws ApiException {
        dcimPowerPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkPartialUpdateCall(WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesBulkPartialUpdateValidateBeforeCall(WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesBulkPartialUpdate(WritablePowerPortTemplate data) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesBulkPartialUpdateWithHttpInfo(WritablePowerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkPartialUpdateAsync(WritablePowerPortTemplate data, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkUpdateCall(WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesBulkUpdateValidateBeforeCall(WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesBulkUpdate(WritablePowerPortTemplate data) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesBulkUpdateWithHttpInfo(WritablePowerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkUpdateAsync(WritablePowerPortTemplate data, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateCall(WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesCreateValidateBeforeCall(WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesCreate(WritablePowerPortTemplate data) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesCreateWithHttpInfo(WritablePowerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateAsync(WritablePowerPortTemplate data, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesDelete
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortTemplatesDelete(Integer id) throws ApiException {
        dcimPowerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListCall(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (maximumDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw", maximumDraw));
        }

        if (allocatedDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw", allocatedDraw));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (maximumDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__n", maximumDrawN));
        }

        if (maximumDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lte", maximumDrawLte));
        }

        if (maximumDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lt", maximumDrawLt));
        }

        if (maximumDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gte", maximumDrawGte));
        }

        if (maximumDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gt", maximumDrawGt));
        }

        if (allocatedDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__n", allocatedDrawN));
        }

        if (allocatedDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lte", allocatedDrawLte));
        }

        if (allocatedDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lt", allocatedDrawLt));
        }

        if (allocatedDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gte", allocatedDrawGte));
        }

        if (allocatedDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gt", allocatedDrawGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesListValidateBeforeCall(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesListCall(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPortTemplatesList200Response dcimPowerPortTemplatesList(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPortTemplatesList200Response> localVarResp = dcimPowerPortTemplatesListWithHttpInfo(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPortTemplatesList200Response> dcimPowerPortTemplatesListWithHttpInfo(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListAsync(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateCall(Integer id, WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesPartialUpdate(Integer id, WritablePowerPortTemplate data) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateAsync(Integer id, WritablePowerPortTemplate data, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesRead
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadAsync(Integer id, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateCall(Integer id, WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesUpdate(Integer id, WritablePowerPortTemplate data) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateAsync(Integer id, WritablePowerPortTemplate data, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerPortsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortsBulkDelete() throws ApiException {
        dcimPowerPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkPartialUpdateCall(WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsBulkPartialUpdateValidateBeforeCall(WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsBulkPartialUpdate(WritablePowerPort data) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsBulkPartialUpdateWithHttpInfo(WritablePowerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkPartialUpdateAsync(WritablePowerPort data, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkUpdateCall(WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsBulkUpdateValidateBeforeCall(WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsBulkUpdate(WritablePowerPort data) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsBulkUpdateWithHttpInfo(WritablePowerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkUpdateAsync(WritablePowerPort data, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateCall(WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsCreateValidateBeforeCall(WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsCreate(WritablePowerPort data) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsCreateWithHttpInfo(WritablePowerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateAsync(WritablePowerPort data, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsDelete
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortsDelete(Integer id) throws ApiException {
        dcimPowerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListCall(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (maximumDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw", maximumDraw));
        }

        if (allocatedDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw", allocatedDraw));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (maximumDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__n", maximumDrawN));
        }

        if (maximumDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lte", maximumDrawLte));
        }

        if (maximumDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lt", maximumDrawLt));
        }

        if (maximumDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gte", maximumDrawGte));
        }

        if (maximumDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gt", maximumDrawGt));
        }

        if (allocatedDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__n", allocatedDrawN));
        }

        if (allocatedDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lte", allocatedDrawLte));
        }

        if (allocatedDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lt", allocatedDrawLt));
        }

        if (allocatedDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gte", allocatedDrawGte));
        }

        if (allocatedDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gt", allocatedDrawGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsListValidateBeforeCall(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimPowerPortsListCall(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPortsList200Response dcimPowerPortsList(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPortsList200Response> localVarResp = dcimPowerPortsListWithHttpInfo(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPortsList200Response> dcimPowerPortsListWithHttpInfo(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListAsync(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsPartialUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateCall(Integer id, WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsPartialUpdateValidateBeforeCall(Integer id, WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsPartialUpdate(Integer id, WritablePowerPort data) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsPartialUpdateWithHttpInfo(Integer id, WritablePowerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateAsync(Integer id, WritablePowerPort data, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsRead
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsRead(Integer id) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadAsync(Integer id, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsTrace
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/trace/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsTrace(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsTraceCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsTrace(Integer id) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsTraceAsync(Integer id, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateCall(Integer id, WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsUpdateValidateBeforeCall(Integer id, WritablePowerPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimPowerPortsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimPowerPortsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsUpdate(Integer id, WritablePowerPort data) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsUpdateWithHttpInfo(Integer id, WritablePowerPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateAsync(Integer id, WritablePowerPort data, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRackReservationsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackReservationsBulkDelete() throws ApiException {
        dcimRackReservationsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackReservationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkPartialUpdateCall(WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsBulkPartialUpdateValidateBeforeCall(WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackReservationsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackReservationsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsBulkPartialUpdate(WritableRackReservation data) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsBulkPartialUpdateWithHttpInfo(WritableRackReservation data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkPartialUpdateAsync(WritableRackReservation data, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkUpdateCall(WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsBulkUpdateValidateBeforeCall(WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackReservationsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackReservationsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsBulkUpdate(WritableRackReservation data) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsBulkUpdateWithHttpInfo(WritableRackReservation data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkUpdateAsync(WritableRackReservation data, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateCall(WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsCreateValidateBeforeCall(WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackReservationsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackReservationsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsCreate(WritableRackReservation data) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsCreateWithHttpInfo(WritableRackReservation data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateAsync(WritableRackReservation data, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsDelete
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackReservationsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackReservationsDelete(Integer id) throws ApiException {
        dcimRackReservationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackReservationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsList
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListCall(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (userIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id__n", userIdN));
        }

        if (userN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__n", userN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsListValidateBeforeCall(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRackReservationsListCall(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackReservationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackReservationsList200Response dcimRackReservationsList(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackReservationsList200Response> localVarResp = dcimRackReservationsListWithHttpInfo(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackReservationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackReservationsList200Response> dcimRackReservationsListWithHttpInfo(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListAsync(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRackReservationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsPartialUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateCall(Integer id, WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsPartialUpdateValidateBeforeCall(Integer id, WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackReservationsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsPartialUpdate(Integer id, WritableRackReservation data) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsPartialUpdateWithHttpInfo(Integer id, WritableRackReservation data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateAsync(Integer id, WritableRackReservation data, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsRead
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackReservationsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsRead(Integer id) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadAsync(Integer id, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateCall(Integer id, WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsUpdateValidateBeforeCall(Integer id, WritableRackReservation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackReservationsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackReservationsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsUpdate(Integer id, WritableRackReservation data) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsUpdateWithHttpInfo(Integer id, WritableRackReservation data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateAsync(Integer id, WritableRackReservation data, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRackRolesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackRolesBulkDelete() throws ApiException {
        dcimRackRolesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkPartialUpdateCall(RackRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesBulkPartialUpdateValidateBeforeCall(RackRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackRolesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackRolesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesBulkPartialUpdate(RackRole data) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesBulkPartialUpdateWithHttpInfo(RackRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkPartialUpdateAsync(RackRole data, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkUpdateCall(RackRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesBulkUpdateValidateBeforeCall(RackRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackRolesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackRolesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesBulkUpdate(RackRole data) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesBulkUpdateWithHttpInfo(RackRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkUpdateAsync(RackRole data, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateCall(RackRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesCreateValidateBeforeCall(RackRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackRolesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackRolesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesCreate(RackRole data) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesCreateWithHttpInfo(RackRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateAsync(RackRole data, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesDelete
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackRolesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackRolesDelete(Integer id) throws ApiException {
        dcimRackRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListCall(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesListValidateBeforeCall(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRackRolesListCall(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackRolesList200Response dcimRackRolesList(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackRolesList200Response> localVarResp = dcimRackRolesListWithHttpInfo(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackRolesList200Response> dcimRackRolesListWithHttpInfo(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListAsync(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRackRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesPartialUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateCall(Integer id, RackRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesPartialUpdateValidateBeforeCall(Integer id, RackRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackRolesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesPartialUpdate(Integer id, RackRole data) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesPartialUpdateWithHttpInfo(Integer id, RackRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateAsync(Integer id, RackRole data, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesRead
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackRolesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesRead(Integer id) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadAsync(Integer id, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateCall(Integer id, RackRole data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesUpdateValidateBeforeCall(Integer id, RackRole data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRackRolesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRackRolesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesUpdate(Integer id, RackRole data) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesUpdateWithHttpInfo(Integer id, RackRole data) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateAsync(Integer id, RackRole data, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRacksBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRacksBulkDelete() throws ApiException {
        dcimRacksBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRacksBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRacksBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkPartialUpdateCall(WritableRack data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksBulkPartialUpdateValidateBeforeCall(WritableRack data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRacksBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksBulkPartialUpdate(WritableRack data) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksBulkPartialUpdateWithHttpInfo(WritableRack data) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkPartialUpdateAsync(WritableRack data, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkUpdateCall(WritableRack data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksBulkUpdateValidateBeforeCall(WritableRack data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRacksBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksBulkUpdate(WritableRack data) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksBulkUpdateWithHttpInfo(WritableRack data) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkUpdateAsync(WritableRack data, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateCall(WritableRack data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksCreateValidateBeforeCall(WritableRack data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRacksCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksCreate(WritableRack data) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksCreateWithHttpInfo(WritableRack data) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateAsync(WritableRack data, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksDelete
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRacksDelete(Integer id) throws ApiException {
        dcimRacksDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRacksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksElevationRead
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksElevationReadCall(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/elevation/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (face != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face", face));
        }

        if (render != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("render", render));
        }

        if (unitWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit_width", unitWidth));
        }

        if (unitHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit_height", unitHeight));
        }

        if (legendWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("legend_width", legendWidth));
        }

        if (marginWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("margin_width", marginWidth));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (expandDevices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand_devices", expandDevices));
        }

        if (includeImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_images", includeImages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksElevationReadValidateBeforeCall(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksElevationRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksElevationReadCall(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages, _callback);
        return localVarCall;

    }

    /**
     * 
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @return List&lt;RackUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<RackUnit> dcimRacksElevationRead(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
        ApiResponse<List<RackUnit>> localVarResp = dcimRacksElevationReadWithHttpInfo(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages);
        return localVarResp.getData();
    }

    /**
     * 
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @return ApiResponse&lt;List&lt;RackUnit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RackUnit>> dcimRacksElevationReadWithHttpInfo(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksElevationReadValidateBeforeCall(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages, null);
        Type localVarReturnType = new TypeToken<List<RackUnit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksElevationReadAsync(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback<List<RackUnit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksElevationReadValidateBeforeCall(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages, _callback);
        Type localVarReturnType = new TypeToken<List<RackUnit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksList
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListCall(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (facilityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id", facilityId));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (descUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc_units", descUnits));
        }

        if (outerWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width", outerWidth));
        }

        if (outerDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth", outerDepth));
        }

        if (outerUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_unit", outerUnit));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (facilityIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__n", facilityIdN));
        }

        if (facilityIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__ic", facilityIdIc));
        }

        if (facilityIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nic", facilityIdNic));
        }

        if (facilityIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__iew", facilityIdIew));
        }

        if (facilityIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__niew", facilityIdNiew));
        }

        if (facilityIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__isw", facilityIdIsw));
        }

        if (facilityIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nisw", facilityIdNisw));
        }

        if (facilityIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__ie", facilityIdIe));
        }

        if (facilityIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nie", facilityIdNie));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (uHeightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__n", uHeightN));
        }

        if (uHeightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lte", uHeightLte));
        }

        if (uHeightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lt", uHeightLt));
        }

        if (uHeightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gte", uHeightGte));
        }

        if (uHeightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gt", uHeightGt));
        }

        if (outerWidthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__n", outerWidthN));
        }

        if (outerWidthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__lte", outerWidthLte));
        }

        if (outerWidthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__lt", outerWidthLt));
        }

        if (outerWidthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__gte", outerWidthGte));
        }

        if (outerWidthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__gt", outerWidthGt));
        }

        if (outerDepthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__n", outerDepthN));
        }

        if (outerDepthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__lte", outerDepthLte));
        }

        if (outerDepthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__lt", outerDepthLt));
        }

        if (outerDepthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__gte", outerDepthGte));
        }

        if (outerDepthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__gt", outerDepthGt));
        }

        if (outerUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_unit__n", outerUnitN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (widthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width__n", widthN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksListValidateBeforeCall(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRacksListCall(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRacksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRacksList200Response dcimRacksList(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRacksList200Response> localVarResp = dcimRacksListWithHttpInfo(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRacksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRacksList200Response> dcimRacksListWithHttpInfo(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListAsync(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRacksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksPartialUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateCall(Integer id, WritableRack data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksPartialUpdateValidateBeforeCall(Integer id, WritableRack data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRacksPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksPartialUpdate(Integer id, WritableRack data) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksPartialUpdateWithHttpInfo(Integer id, WritableRack data) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateAsync(Integer id, WritableRack data, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksRead
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksRead(Integer id) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadAsync(Integer id, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateCall(Integer id, WritableRack data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksUpdateValidateBeforeCall(Integer id, WritableRack data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRacksUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRacksUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksUpdate(Integer id, WritableRack data) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksUpdateWithHttpInfo(Integer id, WritableRack data) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateAsync(Integer id, WritableRack data, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortTemplatesBulkDelete() throws ApiException {
        dcimRearPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkPartialUpdateCall(WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesBulkPartialUpdateValidateBeforeCall(WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortTemplatesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesBulkPartialUpdate(WritableRearPortTemplate data) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesBulkPartialUpdateWithHttpInfo(WritableRearPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkPartialUpdateAsync(WritableRearPortTemplate data, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkUpdateCall(WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesBulkUpdateValidateBeforeCall(WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortTemplatesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesBulkUpdate(WritableRearPortTemplate data) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesBulkUpdateWithHttpInfo(WritableRearPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkUpdateAsync(WritableRearPortTemplate data, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesCreateCall(WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesCreateValidateBeforeCall(WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortTemplatesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesCreate(WritableRearPortTemplate data) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesCreateWithHttpInfo(WritableRearPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesCreateAsync(WritableRearPortTemplate data, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesDelete
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortTemplatesDelete(Integer id) throws ApiException {
        dcimRearPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesListCall(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (positions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions", positions));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (positionsN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__n", positionsN));
        }

        if (positionsLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lte", positionsLte));
        }

        if (positionsLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lt", positionsLt));
        }

        if (positionsGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gte", positionsGte));
        }

        if (positionsGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gt", positionsGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesListValidateBeforeCall(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesListCall(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRearPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRearPortTemplatesList200Response dcimRearPortTemplatesList(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRearPortTemplatesList200Response> localVarResp = dcimRearPortTemplatesListWithHttpInfo(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRearPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRearPortTemplatesList200Response> dcimRearPortTemplatesListWithHttpInfo(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesListValidateBeforeCall(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRearPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesListAsync(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRearPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesListValidateBeforeCall(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRearPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesPartialUpdateCall(Integer id, WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortTemplatesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesPartialUpdate(Integer id, WritableRearPortTemplate data) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableRearPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesPartialUpdateAsync(Integer id, WritableRearPortTemplate data, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesRead
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesReadAsync(Integer id, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesUpdate
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesUpdateCall(Integer id, WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesUpdateValidateBeforeCall(Integer id, WritableRearPortTemplate data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortTemplatesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortTemplatesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesUpdate(Integer id, WritableRearPortTemplate data) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesUpdateWithHttpInfo(Integer id, WritableRearPortTemplate data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesUpdateAsync(Integer id, WritableRearPortTemplate data, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRearPortsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortsBulkDelete() throws ApiException {
        dcimRearPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkPartialUpdateCall(WritableRearPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsBulkPartialUpdateValidateBeforeCall(WritableRearPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsBulkPartialUpdate(WritableRearPort data) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsBulkPartialUpdateWithHttpInfo(WritableRearPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkPartialUpdateAsync(WritableRearPort data, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkUpdateCall(WritableRearPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsBulkUpdateValidateBeforeCall(WritableRearPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsBulkUpdate(WritableRearPort data) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsBulkUpdateWithHttpInfo(WritableRearPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkUpdateAsync(WritableRearPort data, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsCreateCall(WritableRearPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsCreateValidateBeforeCall(WritableRearPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsCreate(WritableRearPort data) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsCreateWithHttpInfo(WritableRearPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsCreateAsync(WritableRearPort data, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsDelete
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortsDelete(Integer id) throws ApiException {
        dcimRearPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsListCall(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (positions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions", positions));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (positionsN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__n", positionsN));
        }

        if (positionsLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lte", positionsLte));
        }

        if (positionsLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lt", positionsLt));
        }

        if (positionsGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gte", positionsGte));
        }

        if (positionsGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gt", positionsGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsListValidateBeforeCall(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRearPortsListCall(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRearPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRearPortsList200Response dcimRearPortsList(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRearPortsList200Response> localVarResp = dcimRearPortsListWithHttpInfo(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRearPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRearPortsList200Response> dcimRearPortsListWithHttpInfo(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsListValidateBeforeCall(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRearPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsListAsync(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRearPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsListValidateBeforeCall(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRearPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsPartialUpdate
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPartialUpdateCall(Integer id, WritableRearPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsPartialUpdateValidateBeforeCall(Integer id, WritableRearPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsPartialUpdate(Integer id, WritableRearPort data) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsPartialUpdateWithHttpInfo(Integer id, WritableRearPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPartialUpdateAsync(Integer id, WritableRearPort data, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsPaths
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPathsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/paths/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsPathsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsPaths(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsPathsCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this rear port. (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsPaths(Integer id) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsPathsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsPathsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsPathsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPathsAsync(Integer id, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsPathsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsRead
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsRead(Integer id) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsReadAsync(Integer id, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsUpdate
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsUpdateCall(Integer id, WritableRearPort data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsUpdateValidateBeforeCall(Integer id, WritableRearPort data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRearPortsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRearPortsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsUpdate(Integer id, WritableRearPort data) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsUpdateWithHttpInfo(Integer id, WritableRearPort data) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsUpdateAsync(Integer id, WritableRearPort data, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRegionsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRegionsBulkDelete() throws ApiException {
        dcimRegionsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRegionsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkPartialUpdateCall(WritableRegion data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsBulkPartialUpdateValidateBeforeCall(WritableRegion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRegionsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRegionsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsBulkPartialUpdate(WritableRegion data) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsBulkPartialUpdateWithHttpInfo(WritableRegion data) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkPartialUpdateAsync(WritableRegion data, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkUpdateCall(WritableRegion data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsBulkUpdateValidateBeforeCall(WritableRegion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRegionsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRegionsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsBulkUpdate(WritableRegion data) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsBulkUpdateWithHttpInfo(WritableRegion data) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkUpdateAsync(WritableRegion data, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateCall(WritableRegion data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsCreateValidateBeforeCall(WritableRegion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRegionsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRegionsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsCreate(WritableRegion data) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsCreateWithHttpInfo(WritableRegion data) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateAsync(WritableRegion data, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsDelete
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRegionsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRegionsDelete(Integer id) throws ApiException {
        dcimRegionsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRegionsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimRegionsListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRegionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRegionsList200Response dcimRegionsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRegionsList200Response> localVarResp = dcimRegionsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRegionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRegionsList200Response> dcimRegionsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRegionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsPartialUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateCall(Integer id, WritableRegion data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsPartialUpdateValidateBeforeCall(Integer id, WritableRegion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRegionsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRegionsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsPartialUpdate(Integer id, WritableRegion data) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsPartialUpdateWithHttpInfo(Integer id, WritableRegion data) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateAsync(Integer id, WritableRegion data, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsRead
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRegionsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsRead(Integer id) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadAsync(Integer id, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateCall(Integer id, WritableRegion data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsUpdateValidateBeforeCall(Integer id, WritableRegion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimRegionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimRegionsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsUpdate(Integer id, WritableRegion data) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsUpdateWithHttpInfo(Integer id, WritableRegion data) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateAsync(Integer id, WritableRegion data, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimSiteGroupsBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSiteGroupsBulkDelete() throws ApiException {
        dcimSiteGroupsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSiteGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkPartialUpdateCall(WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsBulkPartialUpdateValidateBeforeCall(WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSiteGroupsBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSiteGroupsBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsBulkPartialUpdate(WritableSiteGroup data) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsBulkPartialUpdateWithHttpInfo(WritableSiteGroup data) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkPartialUpdateAsync(WritableSiteGroup data, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkUpdateCall(WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsBulkUpdateValidateBeforeCall(WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSiteGroupsBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSiteGroupsBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsBulkUpdate(WritableSiteGroup data) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsBulkUpdateWithHttpInfo(WritableSiteGroup data) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkUpdateAsync(WritableSiteGroup data, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsCreateCall(WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsCreateValidateBeforeCall(WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSiteGroupsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSiteGroupsCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsCreate(WritableSiteGroup data) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsCreateWithHttpInfo(WritableSiteGroup data) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsCreateAsync(WritableSiteGroup data, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsDelete
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSiteGroupsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSiteGroupsDelete(Integer id) throws ApiException {
        dcimSiteGroupsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSiteGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimSiteGroupsListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimSiteGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimSiteGroupsList200Response dcimSiteGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimSiteGroupsList200Response> localVarResp = dcimSiteGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimSiteGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimSiteGroupsList200Response> dcimSiteGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimSiteGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimSiteGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimSiteGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsPartialUpdate
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsPartialUpdateCall(Integer id, WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsPartialUpdateValidateBeforeCall(Integer id, WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSiteGroupsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSiteGroupsPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsPartialUpdate(Integer id, WritableSiteGroup data) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsPartialUpdateWithHttpInfo(Integer id, WritableSiteGroup data) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsPartialUpdateAsync(Integer id, WritableSiteGroup data, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsRead
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSiteGroupsReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsRead(Integer id) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsReadAsync(Integer id, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsUpdate
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsUpdateCall(Integer id, WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsUpdateValidateBeforeCall(Integer id, WritableSiteGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSiteGroupsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSiteGroupsUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsUpdate(Integer id, WritableSiteGroup data) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsUpdateWithHttpInfo(Integer id, WritableSiteGroup data) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsUpdateAsync(Integer id, WritableSiteGroup data, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimSitesBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSitesBulkDelete() throws ApiException {
        dcimSitesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSitesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimSitesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkPartialUpdateCall(WritableSite data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesBulkPartialUpdateValidateBeforeCall(WritableSite data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSitesBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSitesBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesBulkPartialUpdate(WritableSite data) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesBulkPartialUpdateWithHttpInfo(WritableSite data) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkPartialUpdateAsync(WritableSite data, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkUpdateCall(WritableSite data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesBulkUpdateValidateBeforeCall(WritableSite data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSitesBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSitesBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesBulkUpdate(WritableSite data) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesBulkUpdateWithHttpInfo(WritableSite data) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkUpdateAsync(WritableSite data, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateCall(WritableSite data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesCreateValidateBeforeCall(WritableSite data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSitesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSitesCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesCreate(WritableSite data) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesCreateWithHttpInfo(WritableSite data) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateAsync(WritableSite data, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesDelete
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSitesDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSitesDelete(Integer id) throws ApiException {
        dcimSitesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSitesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListCall(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (facility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility", facility));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (asnId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn_id", asnId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (facilityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__n", facilityN));
        }

        if (facilityIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__ic", facilityIc));
        }

        if (facilityNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nic", facilityNic));
        }

        if (facilityIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__iew", facilityIew));
        }

        if (facilityNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__niew", facilityNiew));
        }

        if (facilityIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__isw", facilityIsw));
        }

        if (facilityNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nisw", facilityNisw));
        }

        if (facilityIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__ie", facilityIe));
        }

        if (facilityNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nie", facilityNie));
        }

        if (latitudeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__n", latitudeN));
        }

        if (latitudeLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__lte", latitudeLte));
        }

        if (latitudeLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__lt", latitudeLt));
        }

        if (latitudeGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__gte", latitudeGte));
        }

        if (latitudeGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__gt", latitudeGt));
        }

        if (longitudeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__n", longitudeN));
        }

        if (longitudeLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__lte", longitudeLte));
        }

        if (longitudeLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__lt", longitudeLt));
        }

        if (longitudeGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__gte", longitudeGte));
        }

        if (longitudeGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__gt", longitudeGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }

        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }

        if (asnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__n", asnN));
        }

        if (asnIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn_id__n", asnIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesListValidateBeforeCall(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimSitesListCall(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimSitesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimSitesList200Response dcimSitesList(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimSitesList200Response> localVarResp = dcimSitesListWithHttpInfo(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimSitesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimSitesList200Response> dcimSitesListWithHttpInfo(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListAsync(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimSitesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesPartialUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateCall(Integer id, WritableSite data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesPartialUpdateValidateBeforeCall(Integer id, WritableSite data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSitesPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSitesPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesPartialUpdate(Integer id, WritableSite data) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesPartialUpdateWithHttpInfo(Integer id, WritableSite data) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateAsync(Integer id, WritableSite data, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesRead
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSitesReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesRead(Integer id) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadAsync(Integer id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateCall(Integer id, WritableSite data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesUpdateValidateBeforeCall(Integer id, WritableSite data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimSitesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimSitesUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesUpdate(Integer id, WritableSite data) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesUpdateWithHttpInfo(Integer id, WritableSite data) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateAsync(Integer id, WritableSite data, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimVirtualChassisBulkDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualChassisBulkDelete() throws ApiException {
        dcimVirtualChassisBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualChassisBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisBulkPartialUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkPartialUpdateCall(WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisBulkPartialUpdateValidateBeforeCall(WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimVirtualChassisBulkPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimVirtualChassisBulkPartialUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisBulkPartialUpdate(WritableVirtualChassis data) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisBulkPartialUpdateWithHttpInfo(WritableVirtualChassis data) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkPartialUpdateAsync(WritableVirtualChassis data, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisBulkUpdate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkUpdateCall(WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisBulkUpdateValidateBeforeCall(WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimVirtualChassisBulkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimVirtualChassisBulkUpdateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisBulkUpdate(WritableVirtualChassis data) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisBulkUpdateWithHttpInfo(WritableVirtualChassis data) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkUpdateAsync(WritableVirtualChassis data, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateCall(WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisCreateValidateBeforeCall(WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimVirtualChassisCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimVirtualChassisCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param data  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisCreate(WritableVirtualChassis data) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param data  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisCreateWithHttpInfo(WritableVirtualChassis data) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateAsync(WritableVirtualChassis data, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisDelete
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dcimVirtualChassisDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualChassisDelete(Integer id) throws ApiException {
        dcimVirtualChassisDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualChassisDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisList
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListCall(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (masterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master_id", masterId));
        }

        if (master != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master", master));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (domainN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__n", domainN));
        }

        if (domainIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__ic", domainIc));
        }

        if (domainNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nic", domainNic));
        }

        if (domainIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__iew", domainIew));
        }

        if (domainNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__niew", domainNiew));
        }

        if (domainIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__isw", domainIsw));
        }

        if (domainNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nisw", domainNisw));
        }

        if (domainIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__ie", domainIe));
        }

        if (domainNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nie", domainNie));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (masterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master_id__n", masterIdN));
        }

        if (masterN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master__n", masterN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisListValidateBeforeCall(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dcimVirtualChassisListCall(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimVirtualChassisList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimVirtualChassisList200Response dcimVirtualChassisList(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimVirtualChassisList200Response> localVarResp = dcimVirtualChassisListWithHttpInfo(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimVirtualChassisList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimVirtualChassisList200Response> dcimVirtualChassisListWithHttpInfo(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListAsync(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimVirtualChassisList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisPartialUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateCall(Integer id, WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisPartialUpdateValidateBeforeCall(Integer id, WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimVirtualChassisPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisPartialUpdate(Integer id, WritableVirtualChassis data) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisPartialUpdateWithHttpInfo(Integer id, WritableVirtualChassis data) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateAsync(Integer id, WritableVirtualChassis data, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisRead
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisRead(Async)");
        }
        

        okhttp3.Call localVarCall = dcimVirtualChassisReadCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisRead(Integer id) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadAsync(Integer id, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateCall(Integer id, WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisUpdateValidateBeforeCall(Integer id, WritableVirtualChassis data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling dcimVirtualChassisUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = dcimVirtualChassisUpdateCall(id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisUpdate(Integer id, WritableVirtualChassis data) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisUpdateWithHttpInfo(Integer id, WritableVirtualChassis data) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateAsync(Integer id, WritableVirtualChassis data, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
