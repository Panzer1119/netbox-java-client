/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Pair;

import de.codemakers.netbox.client.model.Cable;
import de.codemakers.netbox.client.model.ConsolePort;
import de.codemakers.netbox.client.model.ConsolePortTemplate;
import de.codemakers.netbox.client.model.ConsoleServerPort;
import de.codemakers.netbox.client.model.ConsoleServerPortTemplate;
import de.codemakers.netbox.client.model.DcimCablesList200Response;
import de.codemakers.netbox.client.model.DcimConsolePortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimConsolePortsList200Response;
import de.codemakers.netbox.client.model.DcimConsoleServerPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimConsoleServerPortsList200Response;
import de.codemakers.netbox.client.model.DcimDeviceBayTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimDeviceBaysList200Response;
import de.codemakers.netbox.client.model.DcimDeviceRolesList200Response;
import de.codemakers.netbox.client.model.DcimDeviceTypesList200Response;
import de.codemakers.netbox.client.model.DcimDevicesList200Response;
import de.codemakers.netbox.client.model.DcimFrontPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimFrontPortsList200Response;
import de.codemakers.netbox.client.model.DcimInterfaceTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimInterfacesList200Response;
import de.codemakers.netbox.client.model.DcimInventoryItemRolesList200Response;
import de.codemakers.netbox.client.model.DcimInventoryItemTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimInventoryItemsList200Response;
import de.codemakers.netbox.client.model.DcimLocationsList200Response;
import de.codemakers.netbox.client.model.DcimManufacturersList200Response;
import de.codemakers.netbox.client.model.DcimModuleBayTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimModuleBaysList200Response;
import de.codemakers.netbox.client.model.DcimModuleTypesList200Response;
import de.codemakers.netbox.client.model.DcimModulesList200Response;
import de.codemakers.netbox.client.model.DcimPlatformsList200Response;
import de.codemakers.netbox.client.model.DcimPowerFeedsList200Response;
import de.codemakers.netbox.client.model.DcimPowerOutletTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimPowerOutletsList200Response;
import de.codemakers.netbox.client.model.DcimPowerPanelsList200Response;
import de.codemakers.netbox.client.model.DcimPowerPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimPowerPortsList200Response;
import de.codemakers.netbox.client.model.DcimRackReservationsList200Response;
import de.codemakers.netbox.client.model.DcimRackRolesList200Response;
import de.codemakers.netbox.client.model.DcimRacksList200Response;
import de.codemakers.netbox.client.model.DcimRearPortTemplatesList200Response;
import de.codemakers.netbox.client.model.DcimRearPortsList200Response;
import de.codemakers.netbox.client.model.DcimRegionsList200Response;
import de.codemakers.netbox.client.model.DcimSiteGroupsList200Response;
import de.codemakers.netbox.client.model.DcimSitesList200Response;
import de.codemakers.netbox.client.model.DcimVirtualChassisList200Response;
import de.codemakers.netbox.client.model.Device;
import de.codemakers.netbox.client.model.DeviceBay;
import de.codemakers.netbox.client.model.DeviceBayTemplate;
import de.codemakers.netbox.client.model.DeviceNAPALM;
import de.codemakers.netbox.client.model.DeviceRole;
import de.codemakers.netbox.client.model.DeviceType;
import de.codemakers.netbox.client.model.DeviceWithConfigContext;
import de.codemakers.netbox.client.model.FrontPort;
import de.codemakers.netbox.client.model.FrontPortTemplate;
import de.codemakers.netbox.client.model.InterfaceTemplate;
import de.codemakers.netbox.client.model.InventoryItem;
import de.codemakers.netbox.client.model.InventoryItemRole;
import de.codemakers.netbox.client.model.InventoryItemTemplate;
import de.codemakers.netbox.client.model.Location;
import de.codemakers.netbox.client.model.Manufacturer;
import de.codemakers.netbox.client.model.ModelInterface;
import de.codemakers.netbox.client.model.Module;
import de.codemakers.netbox.client.model.ModuleBay;
import de.codemakers.netbox.client.model.ModuleBayTemplate;
import de.codemakers.netbox.client.model.ModuleType;
import de.codemakers.netbox.client.model.Platform;
import de.codemakers.netbox.client.model.PowerFeed;
import de.codemakers.netbox.client.model.PowerOutlet;
import de.codemakers.netbox.client.model.PowerOutletTemplate;
import de.codemakers.netbox.client.model.PowerPanel;
import de.codemakers.netbox.client.model.PowerPort;
import de.codemakers.netbox.client.model.PowerPortTemplate;
import de.codemakers.netbox.client.model.Rack;
import de.codemakers.netbox.client.model.RackReservation;
import de.codemakers.netbox.client.model.RackRole;
import de.codemakers.netbox.client.model.RackUnit;
import de.codemakers.netbox.client.model.RearPort;
import de.codemakers.netbox.client.model.RearPortTemplate;
import de.codemakers.netbox.client.model.Region;
import de.codemakers.netbox.client.model.Site;
import de.codemakers.netbox.client.model.SiteGroup;
import de.codemakers.netbox.client.model.VirtualChassis;
import de.codemakers.netbox.client.model.WritableCable;
import de.codemakers.netbox.client.model.WritableConsolePort;
import de.codemakers.netbox.client.model.WritableConsolePortTemplate;
import de.codemakers.netbox.client.model.WritableConsoleServerPort;
import de.codemakers.netbox.client.model.WritableConsoleServerPortTemplate;
import de.codemakers.netbox.client.model.WritableDeviceBay;
import de.codemakers.netbox.client.model.WritableDeviceBayTemplate;
import de.codemakers.netbox.client.model.WritableDeviceType;
import de.codemakers.netbox.client.model.WritableDeviceWithConfigContext;
import de.codemakers.netbox.client.model.WritableFrontPort;
import de.codemakers.netbox.client.model.WritableFrontPortTemplate;
import de.codemakers.netbox.client.model.WritableInterface;
import de.codemakers.netbox.client.model.WritableInterfaceTemplate;
import de.codemakers.netbox.client.model.WritableInventoryItem;
import de.codemakers.netbox.client.model.WritableInventoryItemTemplate;
import de.codemakers.netbox.client.model.WritableLocation;
import de.codemakers.netbox.client.model.WritableModule;
import de.codemakers.netbox.client.model.WritableModuleBay;
import de.codemakers.netbox.client.model.WritableModuleBayTemplate;
import de.codemakers.netbox.client.model.WritableModuleType;
import de.codemakers.netbox.client.model.WritablePlatform;
import de.codemakers.netbox.client.model.WritablePowerFeed;
import de.codemakers.netbox.client.model.WritablePowerOutlet;
import de.codemakers.netbox.client.model.WritablePowerOutletTemplate;
import de.codemakers.netbox.client.model.WritablePowerPanel;
import de.codemakers.netbox.client.model.WritablePowerPort;
import de.codemakers.netbox.client.model.WritablePowerPortTemplate;
import de.codemakers.netbox.client.model.WritableRack;
import de.codemakers.netbox.client.model.WritableRackReservation;
import de.codemakers.netbox.client.model.WritableRearPort;
import de.codemakers.netbox.client.model.WritableRearPortTemplate;
import de.codemakers.netbox.client.model.WritableRegion;
import de.codemakers.netbox.client.model.WritableSite;
import de.codemakers.netbox.client.model.WritableSiteGroup;
import de.codemakers.netbox.client.model.WritableVirtualChassis;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T18:36:37.665487300+02:00[Europe/Berlin]")
public class DcimApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DcimApi() {
    this(new ApiClient());
  }

  public DcimApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimCablesBulkDelete() throws ApiException {
    dcimCablesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimCablesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Cable
   * @throws ApiException if fails to make API call
   */
  public Cable dcimCablesBulkPartialUpdate(WritableCable data) throws ApiException {
    ApiResponse<Cable> localVarResponse = dcimCablesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Cable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cable> dcimCablesBulkPartialUpdateWithHttpInfo(WritableCable data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Cable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cable>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesBulkPartialUpdateRequestBuilder(WritableCable data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimCablesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Cable
   * @throws ApiException if fails to make API call
   */
  public Cable dcimCablesBulkUpdate(WritableCable data) throws ApiException {
    ApiResponse<Cable> localVarResponse = dcimCablesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Cable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cable> dcimCablesBulkUpdateWithHttpInfo(WritableCable data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Cable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cable>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesBulkUpdateRequestBuilder(WritableCable data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimCablesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Cable
   * @throws ApiException if fails to make API call
   */
  public Cable dcimCablesCreate(WritableCable data) throws ApiException {
    ApiResponse<Cable> localVarResponse = dcimCablesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Cable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cable> dcimCablesCreateWithHttpInfo(WritableCable data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesCreate", localVarResponse);
        }
        return new ApiResponse<Cable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cable>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesCreateRequestBuilder(WritableCable data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimCablesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimCablesDelete(Integer id) throws ApiException {
    dcimCablesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimCablesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimCablesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param label  (optional)
   * @param length  (optional)
   * @param lengthUnit  (optional)
   * @param terminationAId  (optional)
   * @param terminationBId  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param terminationAType  (optional)
   * @param terminationBType  (optional)
   * @param type  (optional)
   * @param status  (optional)
   * @param color  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param rackId  (optional)
   * @param rack  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param lengthN  (optional)
   * @param lengthLte  (optional)
   * @param lengthLt  (optional)
   * @param lengthGte  (optional)
   * @param lengthGt  (optional)
   * @param lengthUnitN  (optional)
   * @param terminationAIdN  (optional)
   * @param terminationAIdLte  (optional)
   * @param terminationAIdLt  (optional)
   * @param terminationAIdGte  (optional)
   * @param terminationAIdGt  (optional)
   * @param terminationBIdN  (optional)
   * @param terminationBIdLte  (optional)
   * @param terminationBIdLt  (optional)
   * @param terminationBIdGte  (optional)
   * @param terminationBIdGt  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param tagN  (optional)
   * @param terminationATypeN  (optional)
   * @param terminationBTypeN  (optional)
   * @param typeN  (optional)
   * @param statusN  (optional)
   * @param colorN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimCablesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimCablesList200Response dcimCablesList(String id, String label, String length, String lengthUnit, String terminationAId, String terminationBId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String terminationAType, String terminationBType, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, String terminationATypeN, String terminationBTypeN, String typeN, String statusN, String colorN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimCablesList200Response> localVarResponse = dcimCablesListWithHttpInfo(id, label, length, lengthUnit, terminationAId, terminationBId, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, terminationAType, terminationBType, type, status, color, deviceId, device, rackId, rack, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, terminationATypeN, terminationBTypeN, typeN, statusN, colorN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param label  (optional)
   * @param length  (optional)
   * @param lengthUnit  (optional)
   * @param terminationAId  (optional)
   * @param terminationBId  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param terminationAType  (optional)
   * @param terminationBType  (optional)
   * @param type  (optional)
   * @param status  (optional)
   * @param color  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param rackId  (optional)
   * @param rack  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param lengthN  (optional)
   * @param lengthLte  (optional)
   * @param lengthLt  (optional)
   * @param lengthGte  (optional)
   * @param lengthGt  (optional)
   * @param lengthUnitN  (optional)
   * @param terminationAIdN  (optional)
   * @param terminationAIdLte  (optional)
   * @param terminationAIdLt  (optional)
   * @param terminationAIdGte  (optional)
   * @param terminationAIdGt  (optional)
   * @param terminationBIdN  (optional)
   * @param terminationBIdLte  (optional)
   * @param terminationBIdLt  (optional)
   * @param terminationBIdGte  (optional)
   * @param terminationBIdGt  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param tagN  (optional)
   * @param terminationATypeN  (optional)
   * @param terminationBTypeN  (optional)
   * @param typeN  (optional)
   * @param statusN  (optional)
   * @param colorN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimCablesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimCablesList200Response> dcimCablesListWithHttpInfo(String id, String label, String length, String lengthUnit, String terminationAId, String terminationBId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String terminationAType, String terminationBType, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, String terminationATypeN, String terminationBTypeN, String typeN, String statusN, String colorN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesListRequestBuilder(id, label, length, lengthUnit, terminationAId, terminationBId, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, terminationAType, terminationBType, type, status, color, deviceId, device, rackId, rack, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, terminationATypeN, terminationBTypeN, typeN, statusN, colorN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesList", localVarResponse);
        }
        return new ApiResponse<DcimCablesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimCablesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesListRequestBuilder(String id, String label, String length, String lengthUnit, String terminationAId, String terminationBId, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String terminationAType, String terminationBType, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String tagN, String terminationATypeN, String terminationBTypeN, String typeN, String statusN, String colorN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length", length));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length_unit", lengthUnit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_id", terminationAId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_id", terminationBId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_type", terminationAType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_type", terminationBType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack_id", rackId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack", rack));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length__n", lengthN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length__lte", lengthLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length__lt", lengthLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length__gte", lengthGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length__gt", lengthGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("length_unit__n", lengthUnitN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_id__n", terminationAIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_id__lte", terminationAIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_id__lt", terminationAIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_id__gte", terminationAIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_id__gt", terminationAIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_id__n", terminationBIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_id__lte", terminationBIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_id__lt", terminationBIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_id__gte", terminationBIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_id__gt", terminationBIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_a_type__n", terminationATypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_b_type__n", terminationBTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @param data  (required)
   * @return Cable
   * @throws ApiException if fails to make API call
   */
  public Cable dcimCablesPartialUpdate(Integer id, WritableCable data) throws ApiException {
    ApiResponse<Cable> localVarResponse = dcimCablesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Cable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cable> dcimCablesPartialUpdateWithHttpInfo(Integer id, WritableCable data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Cable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cable>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesPartialUpdateRequestBuilder(Integer id, WritableCable data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimCablesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimCablesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @return Cable
   * @throws ApiException if fails to make API call
   */
  public Cable dcimCablesRead(Integer id) throws ApiException {
    ApiResponse<Cable> localVarResponse = dcimCablesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @return ApiResponse&lt;Cable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cable> dcimCablesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesRead", localVarResponse);
        }
        return new ApiResponse<Cable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cable>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimCablesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @param data  (required)
   * @return Cable
   * @throws ApiException if fails to make API call
   */
  public Cable dcimCablesUpdate(Integer id, WritableCable data) throws ApiException {
    ApiResponse<Cable> localVarResponse = dcimCablesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this cable. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Cable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Cable> dcimCablesUpdateWithHttpInfo(Integer id, WritableCable data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimCablesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimCablesUpdate", localVarResponse);
        }
        return new ApiResponse<Cable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Cable>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimCablesUpdateRequestBuilder(Integer id, WritableCable data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimCablesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimCablesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/cables/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
   * @param peerDevice The name of the peer device (required)
   * @param peerInterface The name of the peer interface (required)
   * @return Device
   * @throws ApiException if fails to make API call
   */
  public Device dcimConnectedDeviceList(String peerDevice, String peerInterface) throws ApiException {
    ApiResponse<Device> localVarResponse = dcimConnectedDeviceListWithHttpInfo(peerDevice, peerInterface);
    return localVarResponse.getData();
  }

  /**
   * 
   * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
   * @param peerDevice The name of the peer device (required)
   * @param peerInterface The name of the peer interface (required)
   * @return ApiResponse&lt;Device&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Device> dcimConnectedDeviceListWithHttpInfo(String peerDevice, String peerInterface) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConnectedDeviceListRequestBuilder(peerDevice, peerInterface);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConnectedDeviceList", localVarResponse);
        }
        return new ApiResponse<Device>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Device>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConnectedDeviceListRequestBuilder(String peerDevice, String peerInterface) throws ApiException {
    // verify the required parameter 'peerDevice' is set
    if (peerDevice == null) {
      throw new ApiException(400, "Missing the required parameter 'peerDevice' when calling dcimConnectedDeviceList");
    }
    // verify the required parameter 'peerInterface' is set
    if (peerInterface == null) {
      throw new ApiException(400, "Missing the required parameter 'peerInterface' when calling dcimConnectedDeviceList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/connected-device/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("peer_device", peerDevice));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("peer_interface", peerInterface));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimConsolePortTemplatesBulkDelete() throws ApiException {
    dcimConsolePortTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsolePortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsolePortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsolePortTemplate dcimConsolePortTemplatesBulkPartialUpdate(WritableConsolePortTemplate data) throws ApiException {
    ApiResponse<ConsolePortTemplate> localVarResponse = dcimConsolePortTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesBulkPartialUpdateWithHttpInfo(WritableConsolePortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesBulkPartialUpdateRequestBuilder(WritableConsolePortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsolePortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsolePortTemplate dcimConsolePortTemplatesBulkUpdate(WritableConsolePortTemplate data) throws ApiException {
    ApiResponse<ConsolePortTemplate> localVarResponse = dcimConsolePortTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesBulkUpdateWithHttpInfo(WritableConsolePortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesBulkUpdateRequestBuilder(WritableConsolePortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsolePortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsolePortTemplate dcimConsolePortTemplatesCreate(WritableConsolePortTemplate data) throws ApiException {
    ApiResponse<ConsolePortTemplate> localVarResponse = dcimConsolePortTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesCreateWithHttpInfo(WritableConsolePortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<ConsolePortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesCreateRequestBuilder(WritableConsolePortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimConsolePortTemplatesDelete(Integer id) throws ApiException {
    dcimConsolePortTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsolePortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimConsolePortTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimConsolePortTemplatesList200Response dcimConsolePortTemplatesList(String id, String name, String type, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimConsolePortTemplatesList200Response> localVarResponse = dcimConsolePortTemplatesListWithHttpInfo(id, name, type, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, moduletypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimConsolePortTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimConsolePortTemplatesList200Response> dcimConsolePortTemplatesListWithHttpInfo(String id, String name, String type, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesListRequestBuilder(id, name, type, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, moduletypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimConsolePortTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimConsolePortTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesListRequestBuilder(String id, String name, String type, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id", moduletypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id__n", moduletypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @param data  (required)
   * @return ConsolePortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsolePortTemplate dcimConsolePortTemplatesPartialUpdate(Integer id, WritableConsolePortTemplate data) throws ApiException {
    ApiResponse<ConsolePortTemplate> localVarResponse = dcimConsolePortTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesPartialUpdateRequestBuilder(Integer id, WritableConsolePortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @return ConsolePortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsolePortTemplate dcimConsolePortTemplatesRead(Integer id) throws ApiException {
    ApiResponse<ConsolePortTemplate> localVarResponse = dcimConsolePortTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @return ApiResponse&lt;ConsolePortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesRead", localVarResponse);
        }
        return new ApiResponse<ConsolePortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @param data  (required)
   * @return ConsolePortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsolePortTemplate dcimConsolePortTemplatesUpdate(Integer id, WritableConsolePortTemplate data) throws ApiException {
    ApiResponse<ConsolePortTemplate> localVarResponse = dcimConsolePortTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortTemplatesUpdateRequestBuilder(Integer id, WritableConsolePortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimConsolePortsBulkDelete() throws ApiException {
    dcimConsolePortsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsolePortsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsolePort
   * @throws ApiException if fails to make API call
   */
  public ConsolePort dcimConsolePortsBulkPartialUpdate(WritableConsolePort data) throws ApiException {
    ApiResponse<ConsolePort> localVarResponse = dcimConsolePortsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePort> dcimConsolePortsBulkPartialUpdateWithHttpInfo(WritableConsolePort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsBulkPartialUpdateRequestBuilder(WritableConsolePort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsolePort
   * @throws ApiException if fails to make API call
   */
  public ConsolePort dcimConsolePortsBulkUpdate(WritableConsolePort data) throws ApiException {
    ApiResponse<ConsolePort> localVarResponse = dcimConsolePortsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePort> dcimConsolePortsBulkUpdateWithHttpInfo(WritableConsolePort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsBulkUpdateRequestBuilder(WritableConsolePort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsolePort
   * @throws ApiException if fails to make API call
   */
  public ConsolePort dcimConsolePortsCreate(WritableConsolePort data) throws ApiException {
    ApiResponse<ConsolePort> localVarResponse = dcimConsolePortsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePort> dcimConsolePortsCreateWithHttpInfo(WritableConsolePort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsCreate", localVarResponse);
        }
        return new ApiResponse<ConsolePort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsCreateRequestBuilder(WritableConsolePort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimConsolePortsDelete(Integer id) throws ApiException {
    dcimConsolePortsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsolePortsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimConsolePortsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimConsolePortsList200Response dcimConsolePortsList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimConsolePortsList200Response> localVarResponse = dcimConsolePortsListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimConsolePortsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimConsolePortsList200Response> dcimConsolePortsListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsListRequestBuilder(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsList", localVarResponse);
        }
        return new ApiResponse<DcimConsolePortsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimConsolePortsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsListRequestBuilder(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id", moduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connected", connected));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id__n", moduleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @param data  (required)
   * @return ConsolePort
   * @throws ApiException if fails to make API call
   */
  public ConsolePort dcimConsolePortsPartialUpdate(Integer id, WritableConsolePort data) throws ApiException {
    ApiResponse<ConsolePort> localVarResponse = dcimConsolePortsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePort> dcimConsolePortsPartialUpdateWithHttpInfo(Integer id, WritableConsolePort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsPartialUpdateRequestBuilder(Integer id, WritableConsolePort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @return ConsolePort
   * @throws ApiException if fails to make API call
   */
  public ConsolePort dcimConsolePortsRead(Integer id) throws ApiException {
    ApiResponse<ConsolePort> localVarResponse = dcimConsolePortsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @return ApiResponse&lt;ConsolePort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePort> dcimConsolePortsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsRead", localVarResponse);
        }
        return new ApiResponse<ConsolePort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this console port. (required)
   * @return ConsolePort
   * @throws ApiException if fails to make API call
   */
  public ConsolePort dcimConsolePortsTrace(Integer id) throws ApiException {
    ApiResponse<ConsolePort> localVarResponse = dcimConsolePortsTraceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this console port. (required)
   * @return ApiResponse&lt;ConsolePort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePort> dcimConsolePortsTraceWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsTraceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsTrace", localVarResponse);
        }
        return new ApiResponse<ConsolePort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsTraceRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortsTrace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/{id}/trace/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @param data  (required)
   * @return ConsolePort
   * @throws ApiException if fails to make API call
   */
  public ConsolePort dcimConsolePortsUpdate(Integer id, WritableConsolePort data) throws ApiException {
    ApiResponse<ConsolePort> localVarResponse = dcimConsolePortsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsolePort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsolePort> dcimConsolePortsUpdateWithHttpInfo(Integer id, WritableConsolePort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsolePortsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsolePortsUpdate", localVarResponse);
        }
        return new ApiResponse<ConsolePort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsolePort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsolePortsUpdateRequestBuilder(Integer id, WritableConsolePort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsolePortsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsolePortsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimConsoleServerPortTemplatesBulkDelete() throws ApiException {
    dcimConsoleServerPortTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsoleServerPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsoleServerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesBulkPartialUpdate(WritableConsoleServerPortTemplate data) throws ApiException {
    ApiResponse<ConsoleServerPortTemplate> localVarResponse = dcimConsoleServerPortTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesBulkPartialUpdateWithHttpInfo(WritableConsoleServerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesBulkPartialUpdateRequestBuilder(WritableConsoleServerPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsoleServerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesBulkUpdate(WritableConsoleServerPortTemplate data) throws ApiException {
    ApiResponse<ConsoleServerPortTemplate> localVarResponse = dcimConsoleServerPortTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesBulkUpdateWithHttpInfo(WritableConsoleServerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesBulkUpdateRequestBuilder(WritableConsoleServerPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsoleServerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesCreate(WritableConsoleServerPortTemplate data) throws ApiException {
    ApiResponse<ConsoleServerPortTemplate> localVarResponse = dcimConsoleServerPortTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesCreateWithHttpInfo(WritableConsoleServerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesCreateRequestBuilder(WritableConsoleServerPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimConsoleServerPortTemplatesDelete(Integer id) throws ApiException {
    dcimConsoleServerPortTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsoleServerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimConsoleServerPortTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimConsoleServerPortTemplatesList200Response dcimConsoleServerPortTemplatesList(String id, String name, String type, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimConsoleServerPortTemplatesList200Response> localVarResponse = dcimConsoleServerPortTemplatesListWithHttpInfo(id, name, type, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, moduletypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimConsoleServerPortTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimConsoleServerPortTemplatesList200Response> dcimConsoleServerPortTemplatesListWithHttpInfo(String id, String name, String type, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesListRequestBuilder(id, name, type, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, moduletypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimConsoleServerPortTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimConsoleServerPortTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesListRequestBuilder(String id, String name, String type, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id", moduletypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id__n", moduletypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @param data  (required)
   * @return ConsoleServerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesPartialUpdate(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
    ApiResponse<ConsoleServerPortTemplate> localVarResponse = dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesPartialUpdateRequestBuilder(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @return ConsoleServerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesRead(Integer id) throws ApiException {
    ApiResponse<ConsoleServerPortTemplate> localVarResponse = dcimConsoleServerPortTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesRead", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @param data  (required)
   * @return ConsoleServerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesUpdate(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
    ApiResponse<ConsoleServerPortTemplate> localVarResponse = dcimConsoleServerPortTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortTemplatesUpdateRequestBuilder(Integer id, WritableConsoleServerPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimConsoleServerPortsBulkDelete() throws ApiException {
    dcimConsoleServerPortsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsoleServerPortsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsoleServerPort
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPort dcimConsoleServerPortsBulkPartialUpdate(WritableConsoleServerPort data) throws ApiException {
    ApiResponse<ConsoleServerPort> localVarResponse = dcimConsoleServerPortsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsBulkPartialUpdateWithHttpInfo(WritableConsoleServerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsBulkPartialUpdateRequestBuilder(WritableConsoleServerPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsoleServerPort
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPort dcimConsoleServerPortsBulkUpdate(WritableConsoleServerPort data) throws ApiException {
    ApiResponse<ConsoleServerPort> localVarResponse = dcimConsoleServerPortsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsBulkUpdateWithHttpInfo(WritableConsoleServerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsBulkUpdateRequestBuilder(WritableConsoleServerPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ConsoleServerPort
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPort dcimConsoleServerPortsCreate(WritableConsoleServerPort data) throws ApiException {
    ApiResponse<ConsoleServerPort> localVarResponse = dcimConsoleServerPortsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsCreateWithHttpInfo(WritableConsoleServerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsCreate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsCreateRequestBuilder(WritableConsoleServerPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimConsoleServerPortsDelete(Integer id) throws ApiException {
    dcimConsoleServerPortsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimConsoleServerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimConsoleServerPortsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimConsoleServerPortsList200Response dcimConsoleServerPortsList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimConsoleServerPortsList200Response> localVarResponse = dcimConsoleServerPortsListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimConsoleServerPortsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimConsoleServerPortsList200Response> dcimConsoleServerPortsListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsListRequestBuilder(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsList", localVarResponse);
        }
        return new ApiResponse<DcimConsoleServerPortsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimConsoleServerPortsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsListRequestBuilder(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id", moduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connected", connected));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id__n", moduleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @param data  (required)
   * @return ConsoleServerPort
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPort dcimConsoleServerPortsPartialUpdate(Integer id, WritableConsoleServerPort data) throws ApiException {
    ApiResponse<ConsoleServerPort> localVarResponse = dcimConsoleServerPortsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsPartialUpdateRequestBuilder(Integer id, WritableConsoleServerPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @return ConsoleServerPort
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPort dcimConsoleServerPortsRead(Integer id) throws ApiException {
    ApiResponse<ConsoleServerPort> localVarResponse = dcimConsoleServerPortsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @return ApiResponse&lt;ConsoleServerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsRead", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this console server port. (required)
   * @return ConsoleServerPort
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPort dcimConsoleServerPortsTrace(Integer id) throws ApiException {
    ApiResponse<ConsoleServerPort> localVarResponse = dcimConsoleServerPortsTraceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this console server port. (required)
   * @return ApiResponse&lt;ConsoleServerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsTraceWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsTraceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsTrace", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsTraceRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortsTrace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/{id}/trace/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @param data  (required)
   * @return ConsoleServerPort
   * @throws ApiException if fails to make API call
   */
  public ConsoleServerPort dcimConsoleServerPortsUpdate(Integer id, WritableConsoleServerPort data) throws ApiException {
    ApiResponse<ConsoleServerPort> localVarResponse = dcimConsoleServerPortsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this console server port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ConsoleServerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsUpdateWithHttpInfo(Integer id, WritableConsoleServerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimConsoleServerPortsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimConsoleServerPortsUpdate", localVarResponse);
        }
        return new ApiResponse<ConsoleServerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConsoleServerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimConsoleServerPortsUpdateRequestBuilder(Integer id, WritableConsoleServerPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimConsoleServerPortsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimConsoleServerPortsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/console-server-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceBayTemplatesBulkDelete() throws ApiException {
    dcimDeviceBayTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceBayTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceBayTemplate
   * @throws ApiException if fails to make API call
   */
  public DeviceBayTemplate dcimDeviceBayTemplatesBulkPartialUpdate(WritableDeviceBayTemplate data) throws ApiException {
    ApiResponse<DeviceBayTemplate> localVarResponse = dcimDeviceBayTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesBulkPartialUpdateWithHttpInfo(WritableDeviceBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesBulkPartialUpdateRequestBuilder(WritableDeviceBayTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBayTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceBayTemplate
   * @throws ApiException if fails to make API call
   */
  public DeviceBayTemplate dcimDeviceBayTemplatesBulkUpdate(WritableDeviceBayTemplate data) throws ApiException {
    ApiResponse<DeviceBayTemplate> localVarResponse = dcimDeviceBayTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesBulkUpdateWithHttpInfo(WritableDeviceBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesBulkUpdateRequestBuilder(WritableDeviceBayTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBayTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceBayTemplate
   * @throws ApiException if fails to make API call
   */
  public DeviceBayTemplate dcimDeviceBayTemplatesCreate(WritableDeviceBayTemplate data) throws ApiException {
    ApiResponse<DeviceBayTemplate> localVarResponse = dcimDeviceBayTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesCreateWithHttpInfo(WritableDeviceBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<DeviceBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesCreateRequestBuilder(WritableDeviceBayTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBayTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceBayTemplatesDelete(Integer id) throws ApiException {
    dcimDeviceBayTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBayTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimDeviceBayTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimDeviceBayTemplatesList200Response dcimDeviceBayTemplatesList(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimDeviceBayTemplatesList200Response> localVarResponse = dcimDeviceBayTemplatesListWithHttpInfo(id, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimDeviceBayTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimDeviceBayTemplatesList200Response> dcimDeviceBayTemplatesListWithHttpInfo(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesListRequestBuilder(id, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimDeviceBayTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimDeviceBayTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesListRequestBuilder(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @param data  (required)
   * @return DeviceBayTemplate
   * @throws ApiException if fails to make API call
   */
  public DeviceBayTemplate dcimDeviceBayTemplatesPartialUpdate(Integer id, WritableDeviceBayTemplate data) throws ApiException {
    ApiResponse<DeviceBayTemplate> localVarResponse = dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesPartialUpdateRequestBuilder(Integer id, WritableDeviceBayTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBayTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBayTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @return DeviceBayTemplate
   * @throws ApiException if fails to make API call
   */
  public DeviceBayTemplate dcimDeviceBayTemplatesRead(Integer id) throws ApiException {
    ApiResponse<DeviceBayTemplate> localVarResponse = dcimDeviceBayTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @return ApiResponse&lt;DeviceBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesRead", localVarResponse);
        }
        return new ApiResponse<DeviceBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBayTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @param data  (required)
   * @return DeviceBayTemplate
   * @throws ApiException if fails to make API call
   */
  public DeviceBayTemplate dcimDeviceBayTemplatesUpdate(Integer id, WritableDeviceBayTemplate data) throws ApiException {
    ApiResponse<DeviceBayTemplate> localVarResponse = dcimDeviceBayTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBayTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBayTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBayTemplatesUpdateRequestBuilder(Integer id, WritableDeviceBayTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBayTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBayTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceBaysBulkDelete() throws ApiException {
    dcimDeviceBaysBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceBaysBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceBay
   * @throws ApiException if fails to make API call
   */
  public DeviceBay dcimDeviceBaysBulkPartialUpdate(WritableDeviceBay data) throws ApiException {
    ApiResponse<DeviceBay> localVarResponse = dcimDeviceBaysBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBay> dcimDeviceBaysBulkPartialUpdateWithHttpInfo(WritableDeviceBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysBulkPartialUpdateRequestBuilder(WritableDeviceBay data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBaysBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceBay
   * @throws ApiException if fails to make API call
   */
  public DeviceBay dcimDeviceBaysBulkUpdate(WritableDeviceBay data) throws ApiException {
    ApiResponse<DeviceBay> localVarResponse = dcimDeviceBaysBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBay> dcimDeviceBaysBulkUpdateWithHttpInfo(WritableDeviceBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysBulkUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysBulkUpdateRequestBuilder(WritableDeviceBay data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBaysBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceBay
   * @throws ApiException if fails to make API call
   */
  public DeviceBay dcimDeviceBaysCreate(WritableDeviceBay data) throws ApiException {
    ApiResponse<DeviceBay> localVarResponse = dcimDeviceBaysCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBay> dcimDeviceBaysCreateWithHttpInfo(WritableDeviceBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysCreate", localVarResponse);
        }
        return new ApiResponse<DeviceBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysCreateRequestBuilder(WritableDeviceBay data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBaysCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceBaysDelete(Integer id) throws ApiException {
    dcimDeviceBaysDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceBaysDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBaysDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimDeviceBaysList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimDeviceBaysList200Response dcimDeviceBaysList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimDeviceBaysList200Response> localVarResponse = dcimDeviceBaysListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimDeviceBaysList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimDeviceBaysList200Response> dcimDeviceBaysListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysListRequestBuilder(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysList", localVarResponse);
        }
        return new ApiResponse<DcimDeviceBaysList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimDeviceBaysList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysListRequestBuilder(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @param data  (required)
   * @return DeviceBay
   * @throws ApiException if fails to make API call
   */
  public DeviceBay dcimDeviceBaysPartialUpdate(Integer id, WritableDeviceBay data) throws ApiException {
    ApiResponse<DeviceBay> localVarResponse = dcimDeviceBaysPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBay> dcimDeviceBaysPartialUpdateWithHttpInfo(Integer id, WritableDeviceBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysPartialUpdateRequestBuilder(Integer id, WritableDeviceBay data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBaysPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBaysPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @return DeviceBay
   * @throws ApiException if fails to make API call
   */
  public DeviceBay dcimDeviceBaysRead(Integer id) throws ApiException {
    ApiResponse<DeviceBay> localVarResponse = dcimDeviceBaysReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @return ApiResponse&lt;DeviceBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBay> dcimDeviceBaysReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysRead", localVarResponse);
        }
        return new ApiResponse<DeviceBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBaysRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @param data  (required)
   * @return DeviceBay
   * @throws ApiException if fails to make API call
   */
  public DeviceBay dcimDeviceBaysUpdate(Integer id, WritableDeviceBay data) throws ApiException {
    ApiResponse<DeviceBay> localVarResponse = dcimDeviceBaysUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device bay. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceBay> dcimDeviceBaysUpdateWithHttpInfo(Integer id, WritableDeviceBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceBaysUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceBaysUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceBaysUpdateRequestBuilder(Integer id, WritableDeviceBay data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceBaysUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceBaysUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceRolesBulkDelete() throws ApiException {
    dcimDeviceRolesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceRolesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceRole
   * @throws ApiException if fails to make API call
   */
  public DeviceRole dcimDeviceRolesBulkPartialUpdate(DeviceRole data) throws ApiException {
    ApiResponse<DeviceRole> localVarResponse = dcimDeviceRolesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceRole> dcimDeviceRolesBulkPartialUpdateWithHttpInfo(DeviceRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesBulkPartialUpdateRequestBuilder(DeviceRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceRolesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceRole
   * @throws ApiException if fails to make API call
   */
  public DeviceRole dcimDeviceRolesBulkUpdate(DeviceRole data) throws ApiException {
    ApiResponse<DeviceRole> localVarResponse = dcimDeviceRolesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceRole> dcimDeviceRolesBulkUpdateWithHttpInfo(DeviceRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesBulkUpdateRequestBuilder(DeviceRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceRolesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceRole
   * @throws ApiException if fails to make API call
   */
  public DeviceRole dcimDeviceRolesCreate(DeviceRole data) throws ApiException {
    ApiResponse<DeviceRole> localVarResponse = dcimDeviceRolesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceRole> dcimDeviceRolesCreateWithHttpInfo(DeviceRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesCreate", localVarResponse);
        }
        return new ApiResponse<DeviceRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesCreateRequestBuilder(DeviceRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceRolesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceRolesDelete(Integer id) throws ApiException {
    dcimDeviceRolesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceRolesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceRolesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param vmRole  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimDeviceRolesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimDeviceRolesList200Response dcimDeviceRolesList(String id, String name, String slug, String color, String vmRole, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimDeviceRolesList200Response> localVarResponse = dcimDeviceRolesListWithHttpInfo(id, name, slug, color, vmRole, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param vmRole  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimDeviceRolesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimDeviceRolesList200Response> dcimDeviceRolesListWithHttpInfo(String id, String name, String slug, String color, String vmRole, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesListRequestBuilder(id, name, slug, color, vmRole, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesList", localVarResponse);
        }
        return new ApiResponse<DcimDeviceRolesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimDeviceRolesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesListRequestBuilder(String id, String name, String slug, String color, String vmRole, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vm_role", vmRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @param data  (required)
   * @return DeviceRole
   * @throws ApiException if fails to make API call
   */
  public DeviceRole dcimDeviceRolesPartialUpdate(Integer id, DeviceRole data) throws ApiException {
    ApiResponse<DeviceRole> localVarResponse = dcimDeviceRolesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceRole> dcimDeviceRolesPartialUpdateWithHttpInfo(Integer id, DeviceRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesPartialUpdateRequestBuilder(Integer id, DeviceRole data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceRolesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceRolesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @return DeviceRole
   * @throws ApiException if fails to make API call
   */
  public DeviceRole dcimDeviceRolesRead(Integer id) throws ApiException {
    ApiResponse<DeviceRole> localVarResponse = dcimDeviceRolesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @return ApiResponse&lt;DeviceRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceRole> dcimDeviceRolesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesRead", localVarResponse);
        }
        return new ApiResponse<DeviceRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceRolesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @param data  (required)
   * @return DeviceRole
   * @throws ApiException if fails to make API call
   */
  public DeviceRole dcimDeviceRolesUpdate(Integer id, DeviceRole data) throws ApiException {
    ApiResponse<DeviceRole> localVarResponse = dcimDeviceRolesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceRole> dcimDeviceRolesUpdateWithHttpInfo(Integer id, DeviceRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceRolesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceRolesUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceRolesUpdateRequestBuilder(Integer id, DeviceRole data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceRolesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceRolesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceTypesBulkDelete() throws ApiException {
    dcimDeviceTypesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceTypesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceType
   * @throws ApiException if fails to make API call
   */
  public DeviceType dcimDeviceTypesBulkPartialUpdate(WritableDeviceType data) throws ApiException {
    ApiResponse<DeviceType> localVarResponse = dcimDeviceTypesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceType> dcimDeviceTypesBulkPartialUpdateWithHttpInfo(WritableDeviceType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesBulkPartialUpdateRequestBuilder(WritableDeviceType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceTypesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceType
   * @throws ApiException if fails to make API call
   */
  public DeviceType dcimDeviceTypesBulkUpdate(WritableDeviceType data) throws ApiException {
    ApiResponse<DeviceType> localVarResponse = dcimDeviceTypesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceType> dcimDeviceTypesBulkUpdateWithHttpInfo(WritableDeviceType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesBulkUpdateRequestBuilder(WritableDeviceType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceTypesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceType
   * @throws ApiException if fails to make API call
   */
  public DeviceType dcimDeviceTypesCreate(WritableDeviceType data) throws ApiException {
    ApiResponse<DeviceType> localVarResponse = dcimDeviceTypesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceType> dcimDeviceTypesCreateWithHttpInfo(WritableDeviceType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesCreate", localVarResponse);
        }
        return new ApiResponse<DeviceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesCreateRequestBuilder(WritableDeviceType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceTypesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimDeviceTypesDelete(Integer id) throws ApiException {
    dcimDeviceTypesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDeviceTypesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceTypesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param model  (optional)
   * @param slug  (optional)
   * @param partNumber  (optional)
   * @param uHeight  (optional)
   * @param isFullDepth  (optional)
   * @param subdeviceRole  (optional)
   * @param airflow  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param consolePorts  (optional)
   * @param consoleServerPorts  (optional)
   * @param powerPorts  (optional)
   * @param powerOutlets  (optional)
   * @param interfaces  (optional)
   * @param passThroughPorts  (optional)
   * @param moduleBays  (optional)
   * @param deviceBays  (optional)
   * @param inventoryItems  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param modelN  (optional)
   * @param modelIc  (optional)
   * @param modelNic  (optional)
   * @param modelIew  (optional)
   * @param modelNiew  (optional)
   * @param modelIsw  (optional)
   * @param modelNisw  (optional)
   * @param modelIe  (optional)
   * @param modelNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param partNumberN  (optional)
   * @param partNumberIc  (optional)
   * @param partNumberNic  (optional)
   * @param partNumberIew  (optional)
   * @param partNumberNiew  (optional)
   * @param partNumberIsw  (optional)
   * @param partNumberNisw  (optional)
   * @param partNumberIe  (optional)
   * @param partNumberNie  (optional)
   * @param uHeightN  (optional)
   * @param uHeightLte  (optional)
   * @param uHeightLt  (optional)
   * @param uHeightGte  (optional)
   * @param uHeightGt  (optional)
   * @param subdeviceRoleN  (optional)
   * @param airflowN  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimDeviceTypesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimDeviceTypesList200Response dcimDeviceTypesList(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimDeviceTypesList200Response> localVarResponse = dcimDeviceTypesListWithHttpInfo(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, tagN, manufacturerIdN, manufacturerN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param model  (optional)
   * @param slug  (optional)
   * @param partNumber  (optional)
   * @param uHeight  (optional)
   * @param isFullDepth  (optional)
   * @param subdeviceRole  (optional)
   * @param airflow  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param consolePorts  (optional)
   * @param consoleServerPorts  (optional)
   * @param powerPorts  (optional)
   * @param powerOutlets  (optional)
   * @param interfaces  (optional)
   * @param passThroughPorts  (optional)
   * @param moduleBays  (optional)
   * @param deviceBays  (optional)
   * @param inventoryItems  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param modelN  (optional)
   * @param modelIc  (optional)
   * @param modelNic  (optional)
   * @param modelIew  (optional)
   * @param modelNiew  (optional)
   * @param modelIsw  (optional)
   * @param modelNisw  (optional)
   * @param modelIe  (optional)
   * @param modelNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param partNumberN  (optional)
   * @param partNumberIc  (optional)
   * @param partNumberNic  (optional)
   * @param partNumberIew  (optional)
   * @param partNumberNiew  (optional)
   * @param partNumberIsw  (optional)
   * @param partNumberNisw  (optional)
   * @param partNumberIe  (optional)
   * @param partNumberNie  (optional)
   * @param uHeightN  (optional)
   * @param uHeightLte  (optional)
   * @param uHeightLt  (optional)
   * @param uHeightGte  (optional)
   * @param uHeightGt  (optional)
   * @param subdeviceRoleN  (optional)
   * @param airflowN  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimDeviceTypesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimDeviceTypesList200Response> dcimDeviceTypesListWithHttpInfo(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesListRequestBuilder(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, tagN, manufacturerIdN, manufacturerN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesList", localVarResponse);
        }
        return new ApiResponse<DcimDeviceTypesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimDeviceTypesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesListRequestBuilder(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model", model));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number", partNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height", uHeight));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("is_full_depth", isFullDepth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subdevice_role", subdeviceRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("airflow", airflow));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id", manufacturerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer", manufacturer));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("console_ports", consolePorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("console_server_ports", consoleServerPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_ports", powerPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_outlets", powerOutlets));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interfaces", interfaces));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pass_through_ports", passThroughPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_bays", moduleBays));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_bays", deviceBays));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("inventory_items", inventoryItems));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__n", modelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__ic", modelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__nic", modelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__iew", modelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__niew", modelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__isw", modelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__nisw", modelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__ie", modelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__nie", modelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__n", partNumberN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__ic", partNumberIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__nic", partNumberNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__iew", partNumberIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__niew", partNumberNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__isw", partNumberIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__nisw", partNumberNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__ie", partNumberIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__nie", partNumberNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__n", uHeightN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__lte", uHeightLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__lt", uHeightLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__gte", uHeightGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__gt", uHeightGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subdevice_role__n", subdeviceRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("airflow__n", airflowN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id__n", manufacturerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer__n", manufacturerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @param data  (required)
   * @return DeviceType
   * @throws ApiException if fails to make API call
   */
  public DeviceType dcimDeviceTypesPartialUpdate(Integer id, WritableDeviceType data) throws ApiException {
    ApiResponse<DeviceType> localVarResponse = dcimDeviceTypesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceType> dcimDeviceTypesPartialUpdateWithHttpInfo(Integer id, WritableDeviceType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesPartialUpdateRequestBuilder(Integer id, WritableDeviceType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceTypesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceTypesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @return DeviceType
   * @throws ApiException if fails to make API call
   */
  public DeviceType dcimDeviceTypesRead(Integer id) throws ApiException {
    ApiResponse<DeviceType> localVarResponse = dcimDeviceTypesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @return ApiResponse&lt;DeviceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceType> dcimDeviceTypesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesRead", localVarResponse);
        }
        return new ApiResponse<DeviceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceTypesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @param data  (required)
   * @return DeviceType
   * @throws ApiException if fails to make API call
   */
  public DeviceType dcimDeviceTypesUpdate(Integer id, WritableDeviceType data) throws ApiException {
    ApiResponse<DeviceType> localVarResponse = dcimDeviceTypesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceType> dcimDeviceTypesUpdateWithHttpInfo(Integer id, WritableDeviceType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDeviceTypesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDeviceTypesUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDeviceTypesUpdateRequestBuilder(Integer id, WritableDeviceType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDeviceTypesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDeviceTypesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/device-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimDevicesBulkDelete() throws ApiException {
    dcimDevicesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDevicesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public DeviceWithConfigContext dcimDevicesBulkPartialUpdate(WritableDeviceWithConfigContext data) throws ApiException {
    ApiResponse<DeviceWithConfigContext> localVarResponse = dcimDevicesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceWithConfigContext> dcimDevicesBulkPartialUpdateWithHttpInfo(WritableDeviceWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesBulkPartialUpdateRequestBuilder(WritableDeviceWithConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDevicesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public DeviceWithConfigContext dcimDevicesBulkUpdate(WritableDeviceWithConfigContext data) throws ApiException {
    ApiResponse<DeviceWithConfigContext> localVarResponse = dcimDevicesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceWithConfigContext> dcimDevicesBulkUpdateWithHttpInfo(WritableDeviceWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesBulkUpdateRequestBuilder(WritableDeviceWithConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDevicesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return DeviceWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public DeviceWithConfigContext dcimDevicesCreate(WritableDeviceWithConfigContext data) throws ApiException {
    ApiResponse<DeviceWithConfigContext> localVarResponse = dcimDevicesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;DeviceWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceWithConfigContext> dcimDevicesCreateWithHttpInfo(WritableDeviceWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesCreate", localVarResponse);
        }
        return new ApiResponse<DeviceWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesCreateRequestBuilder(WritableDeviceWithConfigContext data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDevicesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimDevicesDelete(Integer id) throws ApiException {
    dcimDevicesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimDevicesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDevicesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param assetTag  (optional)
   * @param face  (optional)
   * @param position  (optional)
   * @param airflow  (optional)
   * @param vcPosition  (optional)
   * @param vcPriority  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param localContextData  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param deviceTypeId  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param parentDeviceId  (optional)
   * @param platformId  (optional)
   * @param platform  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param rackId  (optional)
   * @param clusterId  (optional)
   * @param model  (optional)
   * @param status  (optional)
   * @param isFullDepth  (optional)
   * @param macAddress  (optional)
   * @param serial  (optional)
   * @param hasPrimaryIp  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassisMember  (optional)
   * @param consolePorts  (optional)
   * @param consoleServerPorts  (optional)
   * @param powerPorts  (optional)
   * @param powerOutlets  (optional)
   * @param interfaces  (optional)
   * @param passThroughPorts  (optional)
   * @param moduleBays  (optional)
   * @param deviceBays  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param faceN  (optional)
   * @param positionN  (optional)
   * @param positionLte  (optional)
   * @param positionLt  (optional)
   * @param positionGte  (optional)
   * @param positionGt  (optional)
   * @param airflowN  (optional)
   * @param vcPositionN  (optional)
   * @param vcPositionLte  (optional)
   * @param vcPositionLt  (optional)
   * @param vcPositionGte  (optional)
   * @param vcPositionGt  (optional)
   * @param vcPriorityN  (optional)
   * @param vcPriorityLte  (optional)
   * @param vcPriorityLt  (optional)
   * @param vcPriorityGte  (optional)
   * @param vcPriorityGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param deviceTypeIdN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param parentDeviceIdN  (optional)
   * @param platformIdN  (optional)
   * @param platformN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param rackIdN  (optional)
   * @param clusterIdN  (optional)
   * @param modelN  (optional)
   * @param statusN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param virtualChassisIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimDevicesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimDevicesList200Response dcimDevicesList(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimDevicesList200Response> localVarResponse = dcimDevicesListWithHttpInfo(id, name, assetTag, face, position, airflow, vcPosition, vcPriority, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, virtualChassisIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param assetTag  (optional)
   * @param face  (optional)
   * @param position  (optional)
   * @param airflow  (optional)
   * @param vcPosition  (optional)
   * @param vcPriority  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param localContextData  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param deviceTypeId  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param parentDeviceId  (optional)
   * @param platformId  (optional)
   * @param platform  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param rackId  (optional)
   * @param clusterId  (optional)
   * @param model  (optional)
   * @param status  (optional)
   * @param isFullDepth  (optional)
   * @param macAddress  (optional)
   * @param serial  (optional)
   * @param hasPrimaryIp  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassisMember  (optional)
   * @param consolePorts  (optional)
   * @param consoleServerPorts  (optional)
   * @param powerPorts  (optional)
   * @param powerOutlets  (optional)
   * @param interfaces  (optional)
   * @param passThroughPorts  (optional)
   * @param moduleBays  (optional)
   * @param deviceBays  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param faceN  (optional)
   * @param positionN  (optional)
   * @param positionLte  (optional)
   * @param positionLt  (optional)
   * @param positionGte  (optional)
   * @param positionGt  (optional)
   * @param airflowN  (optional)
   * @param vcPositionN  (optional)
   * @param vcPositionLte  (optional)
   * @param vcPositionLt  (optional)
   * @param vcPositionGte  (optional)
   * @param vcPositionGt  (optional)
   * @param vcPriorityN  (optional)
   * @param vcPriorityLte  (optional)
   * @param vcPriorityLt  (optional)
   * @param vcPriorityGte  (optional)
   * @param vcPriorityGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param deviceTypeIdN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param parentDeviceIdN  (optional)
   * @param platformIdN  (optional)
   * @param platformN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param rackIdN  (optional)
   * @param clusterIdN  (optional)
   * @param modelN  (optional)
   * @param statusN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param virtualChassisIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimDevicesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimDevicesList200Response> dcimDevicesListWithHttpInfo(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesListRequestBuilder(id, name, assetTag, face, position, airflow, vcPosition, vcPriority, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, virtualChassisIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesList", localVarResponse);
        }
        return new ApiResponse<DcimDevicesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimDevicesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesListRequestBuilder(String id, String name, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String virtualChassisIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag", assetTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("face", face));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position", position));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("airflow", airflow));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_position", vcPosition));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_priority", vcPriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("local_context_data", localContextData));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id", manufacturerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer", manufacturer));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_type_id", deviceTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_device_id", parentDeviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform_id", platformId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform", platform));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack_id", rackId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id", clusterId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model", model));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("is_full_depth", isFullDepth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address", macAddress));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial", serial));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("has_primary_ip", hasPrimaryIp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_member", virtualChassisMember));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("console_ports", consolePorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("console_server_ports", consoleServerPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_ports", powerPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_outlets", powerOutlets));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interfaces", interfaces));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pass_through_ports", passThroughPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_bays", moduleBays));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_bays", deviceBays));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__n", assetTagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ic", assetTagIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nic", assetTagNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__iew", assetTagIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__niew", assetTagNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__isw", assetTagIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nisw", assetTagNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ie", assetTagIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nie", assetTagNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("face__n", faceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position__n", positionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position__lte", positionLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position__lt", positionLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position__gte", positionGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position__gt", positionGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("airflow__n", airflowN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_position__n", vcPositionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_position__lte", vcPositionLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_position__lt", vcPositionLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_position__gte", vcPositionGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_position__gt", vcPositionGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_priority__n", vcPriorityN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_priority__lte", vcPriorityLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_priority__lt", vcPriorityLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_priority__gte", vcPriorityGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vc_priority__gt", vcPriorityGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id__n", manufacturerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer__n", manufacturerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_type_id__n", deviceTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_device_id__n", parentDeviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform_id__n", platformIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platform__n", platformN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack_id__n", rackIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cluster_id__n", clusterIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__n", modelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__n", macAddressN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ic", macAddressIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nic", macAddressNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__iew", macAddressIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__niew", macAddressNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__isw", macAddressIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nisw", macAddressNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ie", macAddressIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nie", macAddressNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__n", serialN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ic", serialIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nic", serialNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__iew", serialIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__niew", serialNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__isw", serialIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nisw", serialNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ie", serialIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nie", serialNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Execute a NAPALM method on a Device
   * @param id A unique integer value identifying this device. (required)
   * @param method  (required)
   * @return DeviceNAPALM
   * @throws ApiException if fails to make API call
   */
  public DeviceNAPALM dcimDevicesNapalm(Integer id, String method) throws ApiException {
    ApiResponse<DeviceNAPALM> localVarResponse = dcimDevicesNapalmWithHttpInfo(id, method);
    return localVarResponse.getData();
  }

  /**
   * 
   * Execute a NAPALM method on a Device
   * @param id A unique integer value identifying this device. (required)
   * @param method  (required)
   * @return ApiResponse&lt;DeviceNAPALM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceNAPALM> dcimDevicesNapalmWithHttpInfo(Integer id, String method) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesNapalmRequestBuilder(id, method);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesNapalm", localVarResponse);
        }
        return new ApiResponse<DeviceNAPALM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceNAPALM>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesNapalmRequestBuilder(Integer id, String method) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDevicesNapalm");
    }
    // verify the required parameter 'method' is set
    if (method == null) {
      throw new ApiException(400, "Missing the required parameter 'method' when calling dcimDevicesNapalm");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/{id}/napalm/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("method", method));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @param data  (required)
   * @return DeviceWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public DeviceWithConfigContext dcimDevicesPartialUpdate(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
    ApiResponse<DeviceWithConfigContext> localVarResponse = dcimDevicesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceWithConfigContext> dcimDevicesPartialUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesPartialUpdateRequestBuilder(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDevicesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDevicesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @return DeviceWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public DeviceWithConfigContext dcimDevicesRead(Integer id) throws ApiException {
    ApiResponse<DeviceWithConfigContext> localVarResponse = dcimDevicesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @return ApiResponse&lt;DeviceWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceWithConfigContext> dcimDevicesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesRead", localVarResponse);
        }
        return new ApiResponse<DeviceWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDevicesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @param data  (required)
   * @return DeviceWithConfigContext
   * @throws ApiException if fails to make API call
   */
  public DeviceWithConfigContext dcimDevicesUpdate(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
    ApiResponse<DeviceWithConfigContext> localVarResponse = dcimDevicesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this device. (required)
   * @param data  (required)
   * @return ApiResponse&lt;DeviceWithConfigContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DeviceWithConfigContext> dcimDevicesUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimDevicesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimDevicesUpdate", localVarResponse);
        }
        return new ApiResponse<DeviceWithConfigContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeviceWithConfigContext>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimDevicesUpdateRequestBuilder(Integer id, WritableDeviceWithConfigContext data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimDevicesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimDevicesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/devices/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimFrontPortTemplatesBulkDelete() throws ApiException {
    dcimFrontPortTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimFrontPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FrontPortTemplate
   * @throws ApiException if fails to make API call
   */
  public FrontPortTemplate dcimFrontPortTemplatesBulkPartialUpdate(WritableFrontPortTemplate data) throws ApiException {
    ApiResponse<FrontPortTemplate> localVarResponse = dcimFrontPortTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FrontPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesBulkPartialUpdateWithHttpInfo(WritableFrontPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesBulkPartialUpdateRequestBuilder(WritableFrontPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FrontPortTemplate
   * @throws ApiException if fails to make API call
   */
  public FrontPortTemplate dcimFrontPortTemplatesBulkUpdate(WritableFrontPortTemplate data) throws ApiException {
    ApiResponse<FrontPortTemplate> localVarResponse = dcimFrontPortTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FrontPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesBulkUpdateWithHttpInfo(WritableFrontPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesBulkUpdateRequestBuilder(WritableFrontPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FrontPortTemplate
   * @throws ApiException if fails to make API call
   */
  public FrontPortTemplate dcimFrontPortTemplatesCreate(WritableFrontPortTemplate data) throws ApiException {
    ApiResponse<FrontPortTemplate> localVarResponse = dcimFrontPortTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FrontPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesCreateWithHttpInfo(WritableFrontPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<FrontPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesCreateRequestBuilder(WritableFrontPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimFrontPortTemplatesDelete(Integer id) throws ApiException {
    dcimFrontPortTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimFrontPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimFrontPortTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimFrontPortTemplatesList200Response dcimFrontPortTemplatesList(String id, String name, String type, String color, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimFrontPortTemplatesList200Response> localVarResponse = dcimFrontPortTemplatesListWithHttpInfo(id, name, type, color, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, devicetypeIdN, moduletypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimFrontPortTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimFrontPortTemplatesList200Response> dcimFrontPortTemplatesListWithHttpInfo(String id, String name, String type, String color, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesListRequestBuilder(id, name, type, color, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, devicetypeIdN, moduletypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimFrontPortTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimFrontPortTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesListRequestBuilder(String id, String name, String type, String color, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id", moduletypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id__n", moduletypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @param data  (required)
   * @return FrontPortTemplate
   * @throws ApiException if fails to make API call
   */
  public FrontPortTemplate dcimFrontPortTemplatesPartialUpdate(Integer id, WritableFrontPortTemplate data) throws ApiException {
    ApiResponse<FrontPortTemplate> localVarResponse = dcimFrontPortTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FrontPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesPartialUpdateRequestBuilder(Integer id, WritableFrontPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @return FrontPortTemplate
   * @throws ApiException if fails to make API call
   */
  public FrontPortTemplate dcimFrontPortTemplatesRead(Integer id) throws ApiException {
    ApiResponse<FrontPortTemplate> localVarResponse = dcimFrontPortTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @return ApiResponse&lt;FrontPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesRead", localVarResponse);
        }
        return new ApiResponse<FrontPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @param data  (required)
   * @return FrontPortTemplate
   * @throws ApiException if fails to make API call
   */
  public FrontPortTemplate dcimFrontPortTemplatesUpdate(Integer id, WritableFrontPortTemplate data) throws ApiException {
    ApiResponse<FrontPortTemplate> localVarResponse = dcimFrontPortTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FrontPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortTemplatesUpdateRequestBuilder(Integer id, WritableFrontPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimFrontPortsBulkDelete() throws ApiException {
    dcimFrontPortsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimFrontPortsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FrontPort
   * @throws ApiException if fails to make API call
   */
  public FrontPort dcimFrontPortsBulkPartialUpdate(WritableFrontPort data) throws ApiException {
    ApiResponse<FrontPort> localVarResponse = dcimFrontPortsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FrontPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPort> dcimFrontPortsBulkPartialUpdateWithHttpInfo(WritableFrontPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsBulkPartialUpdateRequestBuilder(WritableFrontPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FrontPort
   * @throws ApiException if fails to make API call
   */
  public FrontPort dcimFrontPortsBulkUpdate(WritableFrontPort data) throws ApiException {
    ApiResponse<FrontPort> localVarResponse = dcimFrontPortsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FrontPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPort> dcimFrontPortsBulkUpdateWithHttpInfo(WritableFrontPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsBulkUpdateRequestBuilder(WritableFrontPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return FrontPort
   * @throws ApiException if fails to make API call
   */
  public FrontPort dcimFrontPortsCreate(WritableFrontPort data) throws ApiException {
    ApiResponse<FrontPort> localVarResponse = dcimFrontPortsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;FrontPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPort> dcimFrontPortsCreateWithHttpInfo(WritableFrontPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsCreate", localVarResponse);
        }
        return new ApiResponse<FrontPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsCreateRequestBuilder(WritableFrontPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimFrontPortsDelete(Integer id) throws ApiException {
    dcimFrontPortsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimFrontPortsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimFrontPortsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimFrontPortsList200Response dcimFrontPortsList(String id, String name, String label, String type, String color, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimFrontPortsList200Response> localVarResponse = dcimFrontPortsListWithHttpInfo(id, name, label, type, color, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimFrontPortsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimFrontPortsList200Response> dcimFrontPortsListWithHttpInfo(String id, String name, String label, String type, String color, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsListRequestBuilder(id, name, label, type, color, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsList", localVarResponse);
        }
        return new ApiResponse<DcimFrontPortsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimFrontPortsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsListRequestBuilder(String id, String name, String label, String type, String color, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id", moduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id__n", moduleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @param data  (required)
   * @return FrontPort
   * @throws ApiException if fails to make API call
   */
  public FrontPort dcimFrontPortsPartialUpdate(Integer id, WritableFrontPort data) throws ApiException {
    ApiResponse<FrontPort> localVarResponse = dcimFrontPortsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FrontPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPort> dcimFrontPortsPartialUpdateWithHttpInfo(Integer id, WritableFrontPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsPartialUpdateRequestBuilder(Integer id, WritableFrontPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Return all CablePaths which traverse a given pass-through port.
   * @param id A unique integer value identifying this front port. (required)
   * @return FrontPort
   * @throws ApiException if fails to make API call
   */
  public FrontPort dcimFrontPortsPaths(Integer id) throws ApiException {
    ApiResponse<FrontPort> localVarResponse = dcimFrontPortsPathsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Return all CablePaths which traverse a given pass-through port.
   * @param id A unique integer value identifying this front port. (required)
   * @return ApiResponse&lt;FrontPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPort> dcimFrontPortsPathsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsPathsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsPaths", localVarResponse);
        }
        return new ApiResponse<FrontPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsPathsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortsPaths");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/{id}/paths/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @return FrontPort
   * @throws ApiException if fails to make API call
   */
  public FrontPort dcimFrontPortsRead(Integer id) throws ApiException {
    ApiResponse<FrontPort> localVarResponse = dcimFrontPortsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @return ApiResponse&lt;FrontPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPort> dcimFrontPortsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsRead", localVarResponse);
        }
        return new ApiResponse<FrontPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @param data  (required)
   * @return FrontPort
   * @throws ApiException if fails to make API call
   */
  public FrontPort dcimFrontPortsUpdate(Integer id, WritableFrontPort data) throws ApiException {
    ApiResponse<FrontPort> localVarResponse = dcimFrontPortsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this front port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;FrontPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FrontPort> dcimFrontPortsUpdateWithHttpInfo(Integer id, WritableFrontPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimFrontPortsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimFrontPortsUpdate", localVarResponse);
        }
        return new ApiResponse<FrontPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FrontPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimFrontPortsUpdateRequestBuilder(Integer id, WritableFrontPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimFrontPortsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimFrontPortsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/front-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimInterfaceTemplatesBulkDelete() throws ApiException {
    dcimInterfaceTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInterfaceTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InterfaceTemplate
   * @throws ApiException if fails to make API call
   */
  public InterfaceTemplate dcimInterfaceTemplatesBulkPartialUpdate(WritableInterfaceTemplate data) throws ApiException {
    ApiResponse<InterfaceTemplate> localVarResponse = dcimInterfaceTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InterfaceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesBulkPartialUpdateWithHttpInfo(WritableInterfaceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InterfaceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InterfaceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesBulkPartialUpdateRequestBuilder(WritableInterfaceTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfaceTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InterfaceTemplate
   * @throws ApiException if fails to make API call
   */
  public InterfaceTemplate dcimInterfaceTemplatesBulkUpdate(WritableInterfaceTemplate data) throws ApiException {
    ApiResponse<InterfaceTemplate> localVarResponse = dcimInterfaceTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InterfaceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesBulkUpdateWithHttpInfo(WritableInterfaceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<InterfaceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InterfaceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesBulkUpdateRequestBuilder(WritableInterfaceTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfaceTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InterfaceTemplate
   * @throws ApiException if fails to make API call
   */
  public InterfaceTemplate dcimInterfaceTemplatesCreate(WritableInterfaceTemplate data) throws ApiException {
    ApiResponse<InterfaceTemplate> localVarResponse = dcimInterfaceTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InterfaceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesCreateWithHttpInfo(WritableInterfaceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<InterfaceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InterfaceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesCreateRequestBuilder(WritableInterfaceTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfaceTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimInterfaceTemplatesDelete(Integer id) throws ApiException {
    dcimInterfaceTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInterfaceTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfaceTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param mgmtOnly  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimInterfaceTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimInterfaceTemplatesList200Response dcimInterfaceTemplatesList(String id, String name, String type, String mgmtOnly, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimInterfaceTemplatesList200Response> localVarResponse = dcimInterfaceTemplatesListWithHttpInfo(id, name, type, mgmtOnly, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, moduletypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param mgmtOnly  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimInterfaceTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimInterfaceTemplatesList200Response> dcimInterfaceTemplatesListWithHttpInfo(String id, String name, String type, String mgmtOnly, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesListRequestBuilder(id, name, type, mgmtOnly, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, moduletypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimInterfaceTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimInterfaceTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesListRequestBuilder(String id, String name, String type, String mgmtOnly, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mgmt_only", mgmtOnly));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id", moduletypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id__n", moduletypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @param data  (required)
   * @return InterfaceTemplate
   * @throws ApiException if fails to make API call
   */
  public InterfaceTemplate dcimInterfaceTemplatesPartialUpdate(Integer id, WritableInterfaceTemplate data) throws ApiException {
    ApiResponse<InterfaceTemplate> localVarResponse = dcimInterfaceTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InterfaceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InterfaceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InterfaceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesPartialUpdateRequestBuilder(Integer id, WritableInterfaceTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfaceTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfaceTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @return InterfaceTemplate
   * @throws ApiException if fails to make API call
   */
  public InterfaceTemplate dcimInterfaceTemplatesRead(Integer id) throws ApiException {
    ApiResponse<InterfaceTemplate> localVarResponse = dcimInterfaceTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @return ApiResponse&lt;InterfaceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesRead", localVarResponse);
        }
        return new ApiResponse<InterfaceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InterfaceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfaceTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @param data  (required)
   * @return InterfaceTemplate
   * @throws ApiException if fails to make API call
   */
  public InterfaceTemplate dcimInterfaceTemplatesUpdate(Integer id, WritableInterfaceTemplate data) throws ApiException {
    ApiResponse<InterfaceTemplate> localVarResponse = dcimInterfaceTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InterfaceTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfaceTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfaceTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<InterfaceTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InterfaceTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfaceTemplatesUpdateRequestBuilder(Integer id, WritableInterfaceTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfaceTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfaceTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interface-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimInterfacesBulkDelete() throws ApiException {
    dcimInterfacesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInterfacesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModelInterface
   * @throws ApiException if fails to make API call
   */
  public ModelInterface dcimInterfacesBulkPartialUpdate(WritableInterface data) throws ApiException {
    ApiResponse<ModelInterface> localVarResponse = dcimInterfacesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModelInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelInterface> dcimInterfacesBulkPartialUpdateWithHttpInfo(WritableInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModelInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesBulkPartialUpdateRequestBuilder(WritableInterface data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfacesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModelInterface
   * @throws ApiException if fails to make API call
   */
  public ModelInterface dcimInterfacesBulkUpdate(WritableInterface data) throws ApiException {
    ApiResponse<ModelInterface> localVarResponse = dcimInterfacesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModelInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelInterface> dcimInterfacesBulkUpdateWithHttpInfo(WritableInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ModelInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesBulkUpdateRequestBuilder(WritableInterface data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfacesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModelInterface
   * @throws ApiException if fails to make API call
   */
  public ModelInterface dcimInterfacesCreate(WritableInterface data) throws ApiException {
    ApiResponse<ModelInterface> localVarResponse = dcimInterfacesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModelInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelInterface> dcimInterfacesCreateWithHttpInfo(WritableInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesCreate", localVarResponse);
        }
        return new ApiResponse<ModelInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesCreateRequestBuilder(WritableInterface data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfacesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimInterfacesDelete(Integer id) throws ApiException {
    dcimInterfacesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInterfacesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfacesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param type  (optional)
   * @param enabled  (optional)
   * @param mtu  (optional)
   * @param mgmtOnly  (optional)
   * @param mode  (optional)
   * @param rfRole  (optional)
   * @param rfChannel  (optional)
   * @param rfChannelFrequency  (optional)
   * @param rfChannelWidth  (optional)
   * @param txPower  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param kind  (optional)
   * @param parentId  (optional)
   * @param bridgeId  (optional)
   * @param lagId  (optional)
   * @param speed  (optional)
   * @param duplex  (optional)
   * @param macAddress  (optional)
   * @param wwn  (optional)
   * @param vlanId  (optional)
   * @param vlan  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param typeN  (optional)
   * @param mtuN  (optional)
   * @param mtuLte  (optional)
   * @param mtuLt  (optional)
   * @param mtuGte  (optional)
   * @param mtuGt  (optional)
   * @param modeN  (optional)
   * @param rfRoleN  (optional)
   * @param rfChannelN  (optional)
   * @param rfChannelFrequencyN  (optional)
   * @param rfChannelFrequencyLte  (optional)
   * @param rfChannelFrequencyLt  (optional)
   * @param rfChannelFrequencyGte  (optional)
   * @param rfChannelFrequencyGt  (optional)
   * @param rfChannelWidthN  (optional)
   * @param rfChannelWidthLte  (optional)
   * @param rfChannelWidthLt  (optional)
   * @param rfChannelWidthGte  (optional)
   * @param rfChannelWidthGt  (optional)
   * @param txPowerN  (optional)
   * @param txPowerLte  (optional)
   * @param txPowerLt  (optional)
   * @param txPowerGte  (optional)
   * @param txPowerGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param parentIdN  (optional)
   * @param bridgeIdN  (optional)
   * @param lagIdN  (optional)
   * @param speedN  (optional)
   * @param speedLte  (optional)
   * @param speedLt  (optional)
   * @param speedGte  (optional)
   * @param speedGt  (optional)
   * @param duplexN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param wwnN  (optional)
   * @param wwnIc  (optional)
   * @param wwnNic  (optional)
   * @param wwnIew  (optional)
   * @param wwnNiew  (optional)
   * @param wwnIsw  (optional)
   * @param wwnNisw  (optional)
   * @param wwnIe  (optional)
   * @param wwnNie  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimInterfacesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimInterfacesList200Response dcimInterfacesList(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimInterfacesList200Response> localVarResponse = dcimInterfacesListWithHttpInfo(id, name, label, type, enabled, mtu, mgmtOnly, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param type  (optional)
   * @param enabled  (optional)
   * @param mtu  (optional)
   * @param mgmtOnly  (optional)
   * @param mode  (optional)
   * @param rfRole  (optional)
   * @param rfChannel  (optional)
   * @param rfChannelFrequency  (optional)
   * @param rfChannelWidth  (optional)
   * @param txPower  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param kind  (optional)
   * @param parentId  (optional)
   * @param bridgeId  (optional)
   * @param lagId  (optional)
   * @param speed  (optional)
   * @param duplex  (optional)
   * @param macAddress  (optional)
   * @param wwn  (optional)
   * @param vlanId  (optional)
   * @param vlan  (optional)
   * @param vrfId  (optional)
   * @param vrf  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param typeN  (optional)
   * @param mtuN  (optional)
   * @param mtuLte  (optional)
   * @param mtuLt  (optional)
   * @param mtuGte  (optional)
   * @param mtuGt  (optional)
   * @param modeN  (optional)
   * @param rfRoleN  (optional)
   * @param rfChannelN  (optional)
   * @param rfChannelFrequencyN  (optional)
   * @param rfChannelFrequencyLte  (optional)
   * @param rfChannelFrequencyLt  (optional)
   * @param rfChannelFrequencyGte  (optional)
   * @param rfChannelFrequencyGt  (optional)
   * @param rfChannelWidthN  (optional)
   * @param rfChannelWidthLte  (optional)
   * @param rfChannelWidthLt  (optional)
   * @param rfChannelWidthGte  (optional)
   * @param rfChannelWidthGt  (optional)
   * @param txPowerN  (optional)
   * @param txPowerLte  (optional)
   * @param txPowerLt  (optional)
   * @param txPowerGte  (optional)
   * @param txPowerGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param parentIdN  (optional)
   * @param bridgeIdN  (optional)
   * @param lagIdN  (optional)
   * @param speedN  (optional)
   * @param speedLte  (optional)
   * @param speedLt  (optional)
   * @param speedGte  (optional)
   * @param speedGt  (optional)
   * @param duplexN  (optional)
   * @param macAddressN  (optional)
   * @param macAddressIc  (optional)
   * @param macAddressNic  (optional)
   * @param macAddressIew  (optional)
   * @param macAddressNiew  (optional)
   * @param macAddressIsw  (optional)
   * @param macAddressNisw  (optional)
   * @param macAddressIe  (optional)
   * @param macAddressNie  (optional)
   * @param wwnN  (optional)
   * @param wwnIc  (optional)
   * @param wwnNic  (optional)
   * @param wwnIew  (optional)
   * @param wwnNiew  (optional)
   * @param wwnIsw  (optional)
   * @param wwnNisw  (optional)
   * @param wwnIe  (optional)
   * @param wwnNie  (optional)
   * @param vrfIdN  (optional)
   * @param vrfN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimInterfacesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimInterfacesList200Response> dcimInterfacesListWithHttpInfo(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesListRequestBuilder(id, name, label, type, enabled, mtu, mgmtOnly, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesList", localVarResponse);
        }
        return new ApiResponse<DcimInterfacesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimInterfacesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesListRequestBuilder(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabled", enabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu", mtu));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mgmt_only", mgmtOnly));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mode", mode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_role", rfRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel", rfChannel));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_frequency", rfChannelFrequency));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_width", rfChannelWidth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tx_power", txPower));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id", moduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connected", connected));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kind", kind));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bridge_id", bridgeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lag_id", lagId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("speed", speed));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("duplex", duplex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address", macAddress));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn", wwn));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan_id", vlanId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vlan", vlan));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id", vrfId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf", vrf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__n", mtuN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__lte", mtuLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__lt", mtuLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__gte", mtuGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mtu__gt", mtuGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mode__n", modeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_role__n", rfRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel__n", rfChannelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_frequency__n", rfChannelFrequencyN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_frequency__lte", rfChannelFrequencyLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_frequency__lt", rfChannelFrequencyLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_frequency__gte", rfChannelFrequencyGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_frequency__gt", rfChannelFrequencyGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_width__n", rfChannelWidthN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_width__lte", rfChannelWidthLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_width__lt", rfChannelWidthLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_width__gte", rfChannelWidthGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rf_channel_width__gt", rfChannelWidthGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tx_power__n", txPowerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tx_power__lte", txPowerLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tx_power__lt", txPowerLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tx_power__gte", txPowerGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tx_power__gt", txPowerGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id__n", moduleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bridge_id__n", bridgeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lag_id__n", lagIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("speed__n", speedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("speed__lte", speedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("speed__lt", speedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("speed__gte", speedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("speed__gt", speedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("duplex__n", duplexN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__n", macAddressN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ic", macAddressIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nic", macAddressNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__iew", macAddressIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__niew", macAddressNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__isw", macAddressIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nisw", macAddressNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__ie", macAddressIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mac_address__nie", macAddressNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__n", wwnN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__ic", wwnIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__nic", wwnNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__iew", wwnIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__niew", wwnNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__isw", wwnIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__nisw", wwnNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__ie", wwnIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("wwn__nie", wwnNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf_id__n", vrfIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vrf__n", vrfN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return ModelInterface
   * @throws ApiException if fails to make API call
   */
  public ModelInterface dcimInterfacesPartialUpdate(Integer id, WritableInterface data) throws ApiException {
    ApiResponse<ModelInterface> localVarResponse = dcimInterfacesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModelInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelInterface> dcimInterfacesPartialUpdateWithHttpInfo(Integer id, WritableInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModelInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesPartialUpdateRequestBuilder(Integer id, WritableInterface data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfacesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfacesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @return ModelInterface
   * @throws ApiException if fails to make API call
   */
  public ModelInterface dcimInterfacesRead(Integer id) throws ApiException {
    ApiResponse<ModelInterface> localVarResponse = dcimInterfacesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @return ApiResponse&lt;ModelInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelInterface> dcimInterfacesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesRead", localVarResponse);
        }
        return new ApiResponse<ModelInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfacesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this interface. (required)
   * @return ModelInterface
   * @throws ApiException if fails to make API call
   */
  public ModelInterface dcimInterfacesTrace(Integer id) throws ApiException {
    ApiResponse<ModelInterface> localVarResponse = dcimInterfacesTraceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this interface. (required)
   * @return ApiResponse&lt;ModelInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelInterface> dcimInterfacesTraceWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesTraceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesTrace", localVarResponse);
        }
        return new ApiResponse<ModelInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesTraceRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfacesTrace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/{id}/trace/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return ModelInterface
   * @throws ApiException if fails to make API call
   */
  public ModelInterface dcimInterfacesUpdate(Integer id, WritableInterface data) throws ApiException {
    ApiResponse<ModelInterface> localVarResponse = dcimInterfacesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this interface. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModelInterface&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelInterface> dcimInterfacesUpdateWithHttpInfo(Integer id, WritableInterface data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInterfacesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInterfacesUpdate", localVarResponse);
        }
        return new ApiResponse<ModelInterface>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelInterface>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInterfacesUpdateRequestBuilder(Integer id, WritableInterface data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInterfacesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInterfacesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/interfaces/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimInventoryItemRolesBulkDelete() throws ApiException {
    dcimInventoryItemRolesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInventoryItemRolesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItemRole
   * @throws ApiException if fails to make API call
   */
  public InventoryItemRole dcimInventoryItemRolesBulkPartialUpdate(InventoryItemRole data) throws ApiException {
    ApiResponse<InventoryItemRole> localVarResponse = dcimInventoryItemRolesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemRole> dcimInventoryItemRolesBulkPartialUpdateWithHttpInfo(InventoryItemRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesBulkPartialUpdateRequestBuilder(InventoryItemRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemRolesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItemRole
   * @throws ApiException if fails to make API call
   */
  public InventoryItemRole dcimInventoryItemRolesBulkUpdate(InventoryItemRole data) throws ApiException {
    ApiResponse<InventoryItemRole> localVarResponse = dcimInventoryItemRolesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemRole> dcimInventoryItemRolesBulkUpdateWithHttpInfo(InventoryItemRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesBulkUpdateRequestBuilder(InventoryItemRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemRolesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItemRole
   * @throws ApiException if fails to make API call
   */
  public InventoryItemRole dcimInventoryItemRolesCreate(InventoryItemRole data) throws ApiException {
    ApiResponse<InventoryItemRole> localVarResponse = dcimInventoryItemRolesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemRole> dcimInventoryItemRolesCreateWithHttpInfo(InventoryItemRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesCreate", localVarResponse);
        }
        return new ApiResponse<InventoryItemRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesCreateRequestBuilder(InventoryItemRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemRolesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimInventoryItemRolesDelete(Integer id) throws ApiException {
    dcimInventoryItemRolesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInventoryItemRolesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemRolesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimInventoryItemRolesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimInventoryItemRolesList200Response dcimInventoryItemRolesList(String id, String name, String slug, String color, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimInventoryItemRolesList200Response> localVarResponse = dcimInventoryItemRolesListWithHttpInfo(id, name, slug, color, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimInventoryItemRolesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimInventoryItemRolesList200Response> dcimInventoryItemRolesListWithHttpInfo(String id, String name, String slug, String color, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesListRequestBuilder(id, name, slug, color, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesList", localVarResponse);
        }
        return new ApiResponse<DcimInventoryItemRolesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimInventoryItemRolesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesListRequestBuilder(String id, String name, String slug, String color, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @param data  (required)
   * @return InventoryItemRole
   * @throws ApiException if fails to make API call
   */
  public InventoryItemRole dcimInventoryItemRolesPartialUpdate(Integer id, InventoryItemRole data) throws ApiException {
    ApiResponse<InventoryItemRole> localVarResponse = dcimInventoryItemRolesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemRole> dcimInventoryItemRolesPartialUpdateWithHttpInfo(Integer id, InventoryItemRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesPartialUpdateRequestBuilder(Integer id, InventoryItemRole data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemRolesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemRolesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @return InventoryItemRole
   * @throws ApiException if fails to make API call
   */
  public InventoryItemRole dcimInventoryItemRolesRead(Integer id) throws ApiException {
    ApiResponse<InventoryItemRole> localVarResponse = dcimInventoryItemRolesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @return ApiResponse&lt;InventoryItemRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemRole> dcimInventoryItemRolesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesRead", localVarResponse);
        }
        return new ApiResponse<InventoryItemRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemRolesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @param data  (required)
   * @return InventoryItemRole
   * @throws ApiException if fails to make API call
   */
  public InventoryItemRole dcimInventoryItemRolesUpdate(Integer id, InventoryItemRole data) throws ApiException {
    ApiResponse<InventoryItemRole> localVarResponse = dcimInventoryItemRolesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemRole> dcimInventoryItemRolesUpdateWithHttpInfo(Integer id, InventoryItemRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemRolesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemRolesUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemRolesUpdateRequestBuilder(Integer id, InventoryItemRole data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemRolesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemRolesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimInventoryItemTemplatesBulkDelete() throws ApiException {
    dcimInventoryItemTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInventoryItemTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItemTemplate
   * @throws ApiException if fails to make API call
   */
  public InventoryItemTemplate dcimInventoryItemTemplatesBulkPartialUpdate(WritableInventoryItemTemplate data) throws ApiException {
    ApiResponse<InventoryItemTemplate> localVarResponse = dcimInventoryItemTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesBulkPartialUpdateWithHttpInfo(WritableInventoryItemTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesBulkPartialUpdateRequestBuilder(WritableInventoryItemTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItemTemplate
   * @throws ApiException if fails to make API call
   */
  public InventoryItemTemplate dcimInventoryItemTemplatesBulkUpdate(WritableInventoryItemTemplate data) throws ApiException {
    ApiResponse<InventoryItemTemplate> localVarResponse = dcimInventoryItemTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesBulkUpdateWithHttpInfo(WritableInventoryItemTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesBulkUpdateRequestBuilder(WritableInventoryItemTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItemTemplate
   * @throws ApiException if fails to make API call
   */
  public InventoryItemTemplate dcimInventoryItemTemplatesCreate(WritableInventoryItemTemplate data) throws ApiException {
    ApiResponse<InventoryItemTemplate> localVarResponse = dcimInventoryItemTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesCreateWithHttpInfo(WritableInventoryItemTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<InventoryItemTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesCreateRequestBuilder(WritableInventoryItemTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimInventoryItemTemplatesDelete(Integer id) throws ApiException {
    dcimInventoryItemTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInventoryItemTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param partId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param parentId  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param componentType  (optional)
   * @param componentId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param partIdN  (optional)
   * @param partIdIc  (optional)
   * @param partIdNic  (optional)
   * @param partIdIew  (optional)
   * @param partIdNiew  (optional)
   * @param partIdIsw  (optional)
   * @param partIdNisw  (optional)
   * @param partIdIe  (optional)
   * @param partIdNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param parentIdN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param componentTypeN  (optional)
   * @param componentIdN  (optional)
   * @param componentIdLte  (optional)
   * @param componentIdLt  (optional)
   * @param componentIdGte  (optional)
   * @param componentIdGt  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimInventoryItemTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimInventoryItemTemplatesList200Response dcimInventoryItemTemplatesList(String id, String name, String label, String partId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimInventoryItemTemplatesList200Response> localVarResponse = dcimInventoryItemTemplatesListWithHttpInfo(id, name, label, partId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param partId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param parentId  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param componentType  (optional)
   * @param componentId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param partIdN  (optional)
   * @param partIdIc  (optional)
   * @param partIdNic  (optional)
   * @param partIdIew  (optional)
   * @param partIdNiew  (optional)
   * @param partIdIsw  (optional)
   * @param partIdNisw  (optional)
   * @param partIdIe  (optional)
   * @param partIdNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param parentIdN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param componentTypeN  (optional)
   * @param componentIdN  (optional)
   * @param componentIdLte  (optional)
   * @param componentIdLt  (optional)
   * @param componentIdGte  (optional)
   * @param componentIdGt  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimInventoryItemTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimInventoryItemTemplatesList200Response> dcimInventoryItemTemplatesListWithHttpInfo(String id, String name, String label, String partId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesListRequestBuilder(id, name, label, partId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimInventoryItemTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimInventoryItemTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesListRequestBuilder(String id, String name, String label, String partId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id", partId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id", manufacturerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer", manufacturer));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_type", componentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id", componentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__n", partIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__ic", partIdIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__nic", partIdNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__iew", partIdIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__niew", partIdNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__isw", partIdIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__nisw", partIdNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__ie", partIdIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__nie", partIdNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id__n", manufacturerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer__n", manufacturerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_type__n", componentTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__n", componentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__lte", componentIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__lt", componentIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__gte", componentIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__gt", componentIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @param data  (required)
   * @return InventoryItemTemplate
   * @throws ApiException if fails to make API call
   */
  public InventoryItemTemplate dcimInventoryItemTemplatesPartialUpdate(Integer id, WritableInventoryItemTemplate data) throws ApiException {
    ApiResponse<InventoryItemTemplate> localVarResponse = dcimInventoryItemTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInventoryItemTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesPartialUpdateRequestBuilder(Integer id, WritableInventoryItemTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @return InventoryItemTemplate
   * @throws ApiException if fails to make API call
   */
  public InventoryItemTemplate dcimInventoryItemTemplatesRead(Integer id) throws ApiException {
    ApiResponse<InventoryItemTemplate> localVarResponse = dcimInventoryItemTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @return ApiResponse&lt;InventoryItemTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesRead", localVarResponse);
        }
        return new ApiResponse<InventoryItemTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @param data  (required)
   * @return InventoryItemTemplate
   * @throws ApiException if fails to make API call
   */
  public InventoryItemTemplate dcimInventoryItemTemplatesUpdate(Integer id, WritableInventoryItemTemplate data) throws ApiException {
    ApiResponse<InventoryItemTemplate> localVarResponse = dcimInventoryItemTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItemTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesUpdateWithHttpInfo(Integer id, WritableInventoryItemTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItemTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItemTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemTemplatesUpdateRequestBuilder(Integer id, WritableInventoryItemTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-item-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimInventoryItemsBulkDelete() throws ApiException {
    dcimInventoryItemsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInventoryItemsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItem
   * @throws ApiException if fails to make API call
   */
  public InventoryItem dcimInventoryItemsBulkPartialUpdate(WritableInventoryItem data) throws ApiException {
    ApiResponse<InventoryItem> localVarResponse = dcimInventoryItemsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItem> dcimInventoryItemsBulkPartialUpdateWithHttpInfo(WritableInventoryItem data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItem>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsBulkPartialUpdateRequestBuilder(WritableInventoryItem data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItem
   * @throws ApiException if fails to make API call
   */
  public InventoryItem dcimInventoryItemsBulkUpdate(WritableInventoryItem data) throws ApiException {
    ApiResponse<InventoryItem> localVarResponse = dcimInventoryItemsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItem> dcimInventoryItemsBulkUpdateWithHttpInfo(WritableInventoryItem data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItem>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsBulkUpdateRequestBuilder(WritableInventoryItem data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return InventoryItem
   * @throws ApiException if fails to make API call
   */
  public InventoryItem dcimInventoryItemsCreate(WritableInventoryItem data) throws ApiException {
    ApiResponse<InventoryItem> localVarResponse = dcimInventoryItemsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItem> dcimInventoryItemsCreateWithHttpInfo(WritableInventoryItem data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsCreate", localVarResponse);
        }
        return new ApiResponse<InventoryItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItem>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsCreateRequestBuilder(WritableInventoryItem data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimInventoryItemsDelete(Integer id) throws ApiException {
    dcimInventoryItemsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimInventoryItemsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param partId  (optional)
   * @param assetTag  (optional)
   * @param discovered  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param parentId  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param componentType  (optional)
   * @param componentId  (optional)
   * @param serial  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param partIdN  (optional)
   * @param partIdIc  (optional)
   * @param partIdNic  (optional)
   * @param partIdIew  (optional)
   * @param partIdNiew  (optional)
   * @param partIdIsw  (optional)
   * @param partIdNisw  (optional)
   * @param partIdIe  (optional)
   * @param partIdNie  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param tagN  (optional)
   * @param parentIdN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param componentTypeN  (optional)
   * @param componentIdN  (optional)
   * @param componentIdLte  (optional)
   * @param componentIdLt  (optional)
   * @param componentIdGte  (optional)
   * @param componentIdGt  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimInventoryItemsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimInventoryItemsList200Response dcimInventoryItemsList(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimInventoryItemsList200Response> localVarResponse = dcimInventoryItemsListWithHttpInfo(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param partId  (optional)
   * @param assetTag  (optional)
   * @param discovered  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param parentId  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param componentType  (optional)
   * @param componentId  (optional)
   * @param serial  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param partIdN  (optional)
   * @param partIdIc  (optional)
   * @param partIdNic  (optional)
   * @param partIdIew  (optional)
   * @param partIdNiew  (optional)
   * @param partIdIsw  (optional)
   * @param partIdNisw  (optional)
   * @param partIdIe  (optional)
   * @param partIdNie  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param tagN  (optional)
   * @param parentIdN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param componentTypeN  (optional)
   * @param componentIdN  (optional)
   * @param componentIdLte  (optional)
   * @param componentIdLt  (optional)
   * @param componentIdGte  (optional)
   * @param componentIdGt  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimInventoryItemsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimInventoryItemsList200Response> dcimInventoryItemsListWithHttpInfo(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsListRequestBuilder(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsList", localVarResponse);
        }
        return new ApiResponse<DcimInventoryItemsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimInventoryItemsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsListRequestBuilder(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id", partId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag", assetTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("discovered", discovered));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id", manufacturerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer", manufacturer));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_type", componentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id", componentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial", serial));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__n", partIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__ic", partIdIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__nic", partIdNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__iew", partIdIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__niew", partIdNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__isw", partIdIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__nisw", partIdNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__ie", partIdIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_id__nie", partIdNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__n", assetTagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ic", assetTagIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nic", assetTagNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__iew", assetTagIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__niew", assetTagNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__isw", assetTagIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nisw", assetTagNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ie", assetTagIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nie", assetTagNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id__n", manufacturerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer__n", manufacturerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_type__n", componentTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__n", componentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__lte", componentIdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__lt", componentIdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__gte", componentIdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("component_id__gt", componentIdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__n", serialN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ic", serialIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nic", serialNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__iew", serialIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__niew", serialNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__isw", serialIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nisw", serialNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ie", serialIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nie", serialNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @param data  (required)
   * @return InventoryItem
   * @throws ApiException if fails to make API call
   */
  public InventoryItem dcimInventoryItemsPartialUpdate(Integer id, WritableInventoryItem data) throws ApiException {
    ApiResponse<InventoryItem> localVarResponse = dcimInventoryItemsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItem> dcimInventoryItemsPartialUpdateWithHttpInfo(Integer id, WritableInventoryItem data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItem>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsPartialUpdateRequestBuilder(Integer id, WritableInventoryItem data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @return InventoryItem
   * @throws ApiException if fails to make API call
   */
  public InventoryItem dcimInventoryItemsRead(Integer id) throws ApiException {
    ApiResponse<InventoryItem> localVarResponse = dcimInventoryItemsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @return ApiResponse&lt;InventoryItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItem> dcimInventoryItemsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsRead", localVarResponse);
        }
        return new ApiResponse<InventoryItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItem>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @param data  (required)
   * @return InventoryItem
   * @throws ApiException if fails to make API call
   */
  public InventoryItem dcimInventoryItemsUpdate(Integer id, WritableInventoryItem data) throws ApiException {
    ApiResponse<InventoryItem> localVarResponse = dcimInventoryItemsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this inventory item. (required)
   * @param data  (required)
   * @return ApiResponse&lt;InventoryItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InventoryItem> dcimInventoryItemsUpdateWithHttpInfo(Integer id, WritableInventoryItem data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimInventoryItemsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimInventoryItemsUpdate", localVarResponse);
        }
        return new ApiResponse<InventoryItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InventoryItem>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimInventoryItemsUpdateRequestBuilder(Integer id, WritableInventoryItem data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimInventoryItemsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimInventoryItemsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/inventory-items/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimLocationsBulkDelete() throws ApiException {
    dcimLocationsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimLocationsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Location
   * @throws ApiException if fails to make API call
   */
  public Location dcimLocationsBulkPartialUpdate(WritableLocation data) throws ApiException {
    ApiResponse<Location> localVarResponse = dcimLocationsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Location&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Location> dcimLocationsBulkPartialUpdateWithHttpInfo(WritableLocation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Location>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Location>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsBulkPartialUpdateRequestBuilder(WritableLocation data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimLocationsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Location
   * @throws ApiException if fails to make API call
   */
  public Location dcimLocationsBulkUpdate(WritableLocation data) throws ApiException {
    ApiResponse<Location> localVarResponse = dcimLocationsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Location&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Location> dcimLocationsBulkUpdateWithHttpInfo(WritableLocation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Location>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Location>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsBulkUpdateRequestBuilder(WritableLocation data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimLocationsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Location
   * @throws ApiException if fails to make API call
   */
  public Location dcimLocationsCreate(WritableLocation data) throws ApiException {
    ApiResponse<Location> localVarResponse = dcimLocationsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Location&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Location> dcimLocationsCreateWithHttpInfo(WritableLocation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsCreate", localVarResponse);
        }
        return new ApiResponse<Location>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Location>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsCreateRequestBuilder(WritableLocation data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimLocationsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimLocationsDelete(Integer id) throws ApiException {
    dcimLocationsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimLocationsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimLocationsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param tagN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimLocationsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimLocationsList200Response dcimLocationsList(String id, String name, String slug, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimLocationsList200Response> localVarResponse = dcimLocationsListWithHttpInfo(id, name, slug, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param tagN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimLocationsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimLocationsList200Response> dcimLocationsListWithHttpInfo(String id, String name, String slug, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsListRequestBuilder(id, name, slug, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsList", localVarResponse);
        }
        return new ApiResponse<DcimLocationsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimLocationsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsListRequestBuilder(String id, String name, String slug, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent", parent));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent__n", parentN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @param data  (required)
   * @return Location
   * @throws ApiException if fails to make API call
   */
  public Location dcimLocationsPartialUpdate(Integer id, WritableLocation data) throws ApiException {
    ApiResponse<Location> localVarResponse = dcimLocationsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Location&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Location> dcimLocationsPartialUpdateWithHttpInfo(Integer id, WritableLocation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Location>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Location>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsPartialUpdateRequestBuilder(Integer id, WritableLocation data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimLocationsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimLocationsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @return Location
   * @throws ApiException if fails to make API call
   */
  public Location dcimLocationsRead(Integer id) throws ApiException {
    ApiResponse<Location> localVarResponse = dcimLocationsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @return ApiResponse&lt;Location&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Location> dcimLocationsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsRead", localVarResponse);
        }
        return new ApiResponse<Location>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Location>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimLocationsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @param data  (required)
   * @return Location
   * @throws ApiException if fails to make API call
   */
  public Location dcimLocationsUpdate(Integer id, WritableLocation data) throws ApiException {
    ApiResponse<Location> localVarResponse = dcimLocationsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this location. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Location&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Location> dcimLocationsUpdateWithHttpInfo(Integer id, WritableLocation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimLocationsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimLocationsUpdate", localVarResponse);
        }
        return new ApiResponse<Location>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Location>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimLocationsUpdateRequestBuilder(Integer id, WritableLocation data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimLocationsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimLocationsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/locations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimManufacturersBulkDelete() throws ApiException {
    dcimManufacturersBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimManufacturersBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Manufacturer
   * @throws ApiException if fails to make API call
   */
  public Manufacturer dcimManufacturersBulkPartialUpdate(Manufacturer data) throws ApiException {
    ApiResponse<Manufacturer> localVarResponse = dcimManufacturersBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Manufacturer&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Manufacturer> dcimManufacturersBulkPartialUpdateWithHttpInfo(Manufacturer data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Manufacturer>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Manufacturer>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersBulkPartialUpdateRequestBuilder(Manufacturer data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimManufacturersBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Manufacturer
   * @throws ApiException if fails to make API call
   */
  public Manufacturer dcimManufacturersBulkUpdate(Manufacturer data) throws ApiException {
    ApiResponse<Manufacturer> localVarResponse = dcimManufacturersBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Manufacturer&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Manufacturer> dcimManufacturersBulkUpdateWithHttpInfo(Manufacturer data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Manufacturer>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Manufacturer>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersBulkUpdateRequestBuilder(Manufacturer data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimManufacturersBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Manufacturer
   * @throws ApiException if fails to make API call
   */
  public Manufacturer dcimManufacturersCreate(Manufacturer data) throws ApiException {
    ApiResponse<Manufacturer> localVarResponse = dcimManufacturersCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Manufacturer&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Manufacturer> dcimManufacturersCreateWithHttpInfo(Manufacturer data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersCreate", localVarResponse);
        }
        return new ApiResponse<Manufacturer>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Manufacturer>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersCreateRequestBuilder(Manufacturer data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimManufacturersCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimManufacturersDelete(Integer id) throws ApiException {
    dcimManufacturersDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimManufacturersDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimManufacturersDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimManufacturersList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimManufacturersList200Response dcimManufacturersList(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimManufacturersList200Response> localVarResponse = dcimManufacturersListWithHttpInfo(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, contactN, contactRoleN, contactGroupN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimManufacturersList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimManufacturersList200Response> dcimManufacturersListWithHttpInfo(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersListRequestBuilder(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, contactN, contactRoleN, contactGroupN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersList", localVarResponse);
        }
        return new ApiResponse<DcimManufacturersList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimManufacturersList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersListRequestBuilder(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @param data  (required)
   * @return Manufacturer
   * @throws ApiException if fails to make API call
   */
  public Manufacturer dcimManufacturersPartialUpdate(Integer id, Manufacturer data) throws ApiException {
    ApiResponse<Manufacturer> localVarResponse = dcimManufacturersPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Manufacturer&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Manufacturer> dcimManufacturersPartialUpdateWithHttpInfo(Integer id, Manufacturer data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Manufacturer>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Manufacturer>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersPartialUpdateRequestBuilder(Integer id, Manufacturer data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimManufacturersPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimManufacturersPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @return Manufacturer
   * @throws ApiException if fails to make API call
   */
  public Manufacturer dcimManufacturersRead(Integer id) throws ApiException {
    ApiResponse<Manufacturer> localVarResponse = dcimManufacturersReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @return ApiResponse&lt;Manufacturer&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Manufacturer> dcimManufacturersReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersRead", localVarResponse);
        }
        return new ApiResponse<Manufacturer>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Manufacturer>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimManufacturersRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @param data  (required)
   * @return Manufacturer
   * @throws ApiException if fails to make API call
   */
  public Manufacturer dcimManufacturersUpdate(Integer id, Manufacturer data) throws ApiException {
    ApiResponse<Manufacturer> localVarResponse = dcimManufacturersUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this manufacturer. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Manufacturer&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Manufacturer> dcimManufacturersUpdateWithHttpInfo(Integer id, Manufacturer data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimManufacturersUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimManufacturersUpdate", localVarResponse);
        }
        return new ApiResponse<Manufacturer>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Manufacturer>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimManufacturersUpdateRequestBuilder(Integer id, Manufacturer data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimManufacturersUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimManufacturersUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/manufacturers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimModuleBayTemplatesBulkDelete() throws ApiException {
    dcimModuleBayTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModuleBayTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleBayTemplate
   * @throws ApiException if fails to make API call
   */
  public ModuleBayTemplate dcimModuleBayTemplatesBulkPartialUpdate(WritableModuleBayTemplate data) throws ApiException {
    ApiResponse<ModuleBayTemplate> localVarResponse = dcimModuleBayTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesBulkPartialUpdateWithHttpInfo(WritableModuleBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesBulkPartialUpdateRequestBuilder(WritableModuleBayTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBayTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleBayTemplate
   * @throws ApiException if fails to make API call
   */
  public ModuleBayTemplate dcimModuleBayTemplatesBulkUpdate(WritableModuleBayTemplate data) throws ApiException {
    ApiResponse<ModuleBayTemplate> localVarResponse = dcimModuleBayTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesBulkUpdateWithHttpInfo(WritableModuleBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesBulkUpdateRequestBuilder(WritableModuleBayTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBayTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleBayTemplate
   * @throws ApiException if fails to make API call
   */
  public ModuleBayTemplate dcimModuleBayTemplatesCreate(WritableModuleBayTemplate data) throws ApiException {
    ApiResponse<ModuleBayTemplate> localVarResponse = dcimModuleBayTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesCreateWithHttpInfo(WritableModuleBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<ModuleBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesCreateRequestBuilder(WritableModuleBayTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBayTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimModuleBayTemplatesDelete(Integer id) throws ApiException {
    dcimModuleBayTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModuleBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBayTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimModuleBayTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimModuleBayTemplatesList200Response dcimModuleBayTemplatesList(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimModuleBayTemplatesList200Response> localVarResponse = dcimModuleBayTemplatesListWithHttpInfo(id, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param devicetypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimModuleBayTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimModuleBayTemplatesList200Response> dcimModuleBayTemplatesListWithHttpInfo(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesListRequestBuilder(id, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimModuleBayTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimModuleBayTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesListRequestBuilder(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @param data  (required)
   * @return ModuleBayTemplate
   * @throws ApiException if fails to make API call
   */
  public ModuleBayTemplate dcimModuleBayTemplatesPartialUpdate(Integer id, WritableModuleBayTemplate data) throws ApiException {
    ApiResponse<ModuleBayTemplate> localVarResponse = dcimModuleBayTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableModuleBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesPartialUpdateRequestBuilder(Integer id, WritableModuleBayTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBayTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBayTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @return ModuleBayTemplate
   * @throws ApiException if fails to make API call
   */
  public ModuleBayTemplate dcimModuleBayTemplatesRead(Integer id) throws ApiException {
    ApiResponse<ModuleBayTemplate> localVarResponse = dcimModuleBayTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @return ApiResponse&lt;ModuleBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesRead", localVarResponse);
        }
        return new ApiResponse<ModuleBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBayTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @param data  (required)
   * @return ModuleBayTemplate
   * @throws ApiException if fails to make API call
   */
  public ModuleBayTemplate dcimModuleBayTemplatesUpdate(Integer id, WritableModuleBayTemplate data) throws ApiException {
    ApiResponse<ModuleBayTemplate> localVarResponse = dcimModuleBayTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBayTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesUpdateWithHttpInfo(Integer id, WritableModuleBayTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBayTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBayTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBayTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBayTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBayTemplatesUpdateRequestBuilder(Integer id, WritableModuleBayTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBayTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBayTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bay-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimModuleBaysBulkDelete() throws ApiException {
    dcimModuleBaysBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModuleBaysBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleBay
   * @throws ApiException if fails to make API call
   */
  public ModuleBay dcimModuleBaysBulkPartialUpdate(WritableModuleBay data) throws ApiException {
    ApiResponse<ModuleBay> localVarResponse = dcimModuleBaysBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBay> dcimModuleBaysBulkPartialUpdateWithHttpInfo(WritableModuleBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysBulkPartialUpdateRequestBuilder(WritableModuleBay data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBaysBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleBay
   * @throws ApiException if fails to make API call
   */
  public ModuleBay dcimModuleBaysBulkUpdate(WritableModuleBay data) throws ApiException {
    ApiResponse<ModuleBay> localVarResponse = dcimModuleBaysBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBay> dcimModuleBaysBulkUpdateWithHttpInfo(WritableModuleBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysBulkUpdateRequestBuilder(WritableModuleBay data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBaysBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleBay
   * @throws ApiException if fails to make API call
   */
  public ModuleBay dcimModuleBaysCreate(WritableModuleBay data) throws ApiException {
    ApiResponse<ModuleBay> localVarResponse = dcimModuleBaysCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBay> dcimModuleBaysCreateWithHttpInfo(WritableModuleBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysCreate", localVarResponse);
        }
        return new ApiResponse<ModuleBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysCreateRequestBuilder(WritableModuleBay data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBaysCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimModuleBaysDelete(Integer id) throws ApiException {
    dcimModuleBaysDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModuleBaysDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBaysDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimModuleBaysList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimModuleBaysList200Response dcimModuleBaysList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimModuleBaysList200Response> localVarResponse = dcimModuleBaysListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimModuleBaysList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimModuleBaysList200Response> dcimModuleBaysListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysListRequestBuilder(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysList", localVarResponse);
        }
        return new ApiResponse<DcimModuleBaysList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimModuleBaysList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysListRequestBuilder(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @param data  (required)
   * @return ModuleBay
   * @throws ApiException if fails to make API call
   */
  public ModuleBay dcimModuleBaysPartialUpdate(Integer id, WritableModuleBay data) throws ApiException {
    ApiResponse<ModuleBay> localVarResponse = dcimModuleBaysPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBay> dcimModuleBaysPartialUpdateWithHttpInfo(Integer id, WritableModuleBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysPartialUpdateRequestBuilder(Integer id, WritableModuleBay data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBaysPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBaysPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @return ModuleBay
   * @throws ApiException if fails to make API call
   */
  public ModuleBay dcimModuleBaysRead(Integer id) throws ApiException {
    ApiResponse<ModuleBay> localVarResponse = dcimModuleBaysReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @return ApiResponse&lt;ModuleBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBay> dcimModuleBaysReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysRead", localVarResponse);
        }
        return new ApiResponse<ModuleBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBaysRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @param data  (required)
   * @return ModuleBay
   * @throws ApiException if fails to make API call
   */
  public ModuleBay dcimModuleBaysUpdate(Integer id, WritableModuleBay data) throws ApiException {
    ApiResponse<ModuleBay> localVarResponse = dcimModuleBaysUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module bay. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModuleBay&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleBay> dcimModuleBaysUpdateWithHttpInfo(Integer id, WritableModuleBay data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleBaysUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleBaysUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleBay>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleBay>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleBaysUpdateRequestBuilder(Integer id, WritableModuleBay data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleBaysUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleBaysUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-bays/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimModuleTypesBulkDelete() throws ApiException {
    dcimModuleTypesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModuleTypesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleType
   * @throws ApiException if fails to make API call
   */
  public ModuleType dcimModuleTypesBulkPartialUpdate(WritableModuleType data) throws ApiException {
    ApiResponse<ModuleType> localVarResponse = dcimModuleTypesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleType> dcimModuleTypesBulkPartialUpdateWithHttpInfo(WritableModuleType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesBulkPartialUpdateRequestBuilder(WritableModuleType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleTypesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleType
   * @throws ApiException if fails to make API call
   */
  public ModuleType dcimModuleTypesBulkUpdate(WritableModuleType data) throws ApiException {
    ApiResponse<ModuleType> localVarResponse = dcimModuleTypesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleType> dcimModuleTypesBulkUpdateWithHttpInfo(WritableModuleType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesBulkUpdateRequestBuilder(WritableModuleType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleTypesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ModuleType
   * @throws ApiException if fails to make API call
   */
  public ModuleType dcimModuleTypesCreate(WritableModuleType data) throws ApiException {
    ApiResponse<ModuleType> localVarResponse = dcimModuleTypesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ModuleType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleType> dcimModuleTypesCreateWithHttpInfo(WritableModuleType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesCreate", localVarResponse);
        }
        return new ApiResponse<ModuleType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesCreateRequestBuilder(WritableModuleType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleTypesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimModuleTypesDelete(Integer id) throws ApiException {
    dcimModuleTypesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModuleTypesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleTypesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param model  (optional)
   * @param partNumber  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param consolePorts  (optional)
   * @param consoleServerPorts  (optional)
   * @param powerPorts  (optional)
   * @param powerOutlets  (optional)
   * @param interfaces  (optional)
   * @param passThroughPorts  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param modelN  (optional)
   * @param modelIc  (optional)
   * @param modelNic  (optional)
   * @param modelIew  (optional)
   * @param modelNiew  (optional)
   * @param modelIsw  (optional)
   * @param modelNisw  (optional)
   * @param modelIe  (optional)
   * @param modelNie  (optional)
   * @param partNumberN  (optional)
   * @param partNumberIc  (optional)
   * @param partNumberNic  (optional)
   * @param partNumberIew  (optional)
   * @param partNumberNiew  (optional)
   * @param partNumberIsw  (optional)
   * @param partNumberNisw  (optional)
   * @param partNumberIe  (optional)
   * @param partNumberNie  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimModuleTypesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimModuleTypesList200Response dcimModuleTypesList(String id, String model, String partNumber, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimModuleTypesList200Response> localVarResponse = dcimModuleTypesListWithHttpInfo(id, model, partNumber, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, tagN, manufacturerIdN, manufacturerN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param model  (optional)
   * @param partNumber  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param consolePorts  (optional)
   * @param consoleServerPorts  (optional)
   * @param powerPorts  (optional)
   * @param powerOutlets  (optional)
   * @param interfaces  (optional)
   * @param passThroughPorts  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param modelN  (optional)
   * @param modelIc  (optional)
   * @param modelNic  (optional)
   * @param modelIew  (optional)
   * @param modelNiew  (optional)
   * @param modelIsw  (optional)
   * @param modelNisw  (optional)
   * @param modelIe  (optional)
   * @param modelNie  (optional)
   * @param partNumberN  (optional)
   * @param partNumberIc  (optional)
   * @param partNumberNic  (optional)
   * @param partNumberIew  (optional)
   * @param partNumberNiew  (optional)
   * @param partNumberIsw  (optional)
   * @param partNumberNisw  (optional)
   * @param partNumberIe  (optional)
   * @param partNumberNie  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimModuleTypesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimModuleTypesList200Response> dcimModuleTypesListWithHttpInfo(String id, String model, String partNumber, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesListRequestBuilder(id, model, partNumber, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, tagN, manufacturerIdN, manufacturerN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesList", localVarResponse);
        }
        return new ApiResponse<DcimModuleTypesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimModuleTypesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesListRequestBuilder(String id, String model, String partNumber, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model", model));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number", partNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id", manufacturerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer", manufacturer));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("console_ports", consolePorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("console_server_ports", consoleServerPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_ports", powerPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_outlets", powerOutlets));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interfaces", interfaces));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pass_through_ports", passThroughPorts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__n", modelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__ic", modelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__nic", modelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__iew", modelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__niew", modelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__isw", modelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__nisw", modelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__ie", modelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("model__nie", modelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__n", partNumberN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__ic", partNumberIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__nic", partNumberNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__iew", partNumberIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__niew", partNumberNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__isw", partNumberIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__nisw", partNumberNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__ie", partNumberIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("part_number__nie", partNumberNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id__n", manufacturerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer__n", manufacturerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @param data  (required)
   * @return ModuleType
   * @throws ApiException if fails to make API call
   */
  public ModuleType dcimModuleTypesPartialUpdate(Integer id, WritableModuleType data) throws ApiException {
    ApiResponse<ModuleType> localVarResponse = dcimModuleTypesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModuleType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleType> dcimModuleTypesPartialUpdateWithHttpInfo(Integer id, WritableModuleType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesPartialUpdateRequestBuilder(Integer id, WritableModuleType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleTypesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleTypesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @return ModuleType
   * @throws ApiException if fails to make API call
   */
  public ModuleType dcimModuleTypesRead(Integer id) throws ApiException {
    ApiResponse<ModuleType> localVarResponse = dcimModuleTypesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @return ApiResponse&lt;ModuleType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleType> dcimModuleTypesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesRead", localVarResponse);
        }
        return new ApiResponse<ModuleType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleTypesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @param data  (required)
   * @return ModuleType
   * @throws ApiException if fails to make API call
   */
  public ModuleType dcimModuleTypesUpdate(Integer id, WritableModuleType data) throws ApiException {
    ApiResponse<ModuleType> localVarResponse = dcimModuleTypesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ModuleType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModuleType> dcimModuleTypesUpdateWithHttpInfo(Integer id, WritableModuleType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModuleTypesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModuleTypesUpdate", localVarResponse);
        }
        return new ApiResponse<ModuleType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModuleType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModuleTypesUpdateRequestBuilder(Integer id, WritableModuleType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModuleTypesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModuleTypesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/module-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimModulesBulkDelete() throws ApiException {
    dcimModulesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModulesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Module
   * @throws ApiException if fails to make API call
   */
  public Module dcimModulesBulkPartialUpdate(WritableModule data) throws ApiException {
    ApiResponse<Module> localVarResponse = dcimModulesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Module&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Module> dcimModulesBulkPartialUpdateWithHttpInfo(WritableModule data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Module>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Module>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesBulkPartialUpdateRequestBuilder(WritableModule data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModulesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Module
   * @throws ApiException if fails to make API call
   */
  public Module dcimModulesBulkUpdate(WritableModule data) throws ApiException {
    ApiResponse<Module> localVarResponse = dcimModulesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Module&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Module> dcimModulesBulkUpdateWithHttpInfo(WritableModule data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Module>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Module>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesBulkUpdateRequestBuilder(WritableModule data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModulesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Module
   * @throws ApiException if fails to make API call
   */
  public Module dcimModulesCreate(WritableModule data) throws ApiException {
    ApiResponse<Module> localVarResponse = dcimModulesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Module&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Module> dcimModulesCreateWithHttpInfo(WritableModule data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesCreate", localVarResponse);
        }
        return new ApiResponse<Module>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Module>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesCreateRequestBuilder(WritableModule data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModulesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimModulesDelete(Integer id) throws ApiException {
    dcimModulesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimModulesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModulesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param assetTag  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param moduleTypeId  (optional)
   * @param moduleType  (optional)
   * @param moduleBayId  (optional)
   * @param deviceId  (optional)
   * @param serial  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param moduleTypeIdN  (optional)
   * @param moduleTypeN  (optional)
   * @param moduleBayIdN  (optional)
   * @param deviceIdN  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimModulesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimModulesList200Response dcimModulesList(String id, String assetTag, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimModulesList200Response> localVarResponse = dcimModulesListWithHttpInfo(id, assetTag, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param assetTag  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param moduleTypeId  (optional)
   * @param moduleType  (optional)
   * @param moduleBayId  (optional)
   * @param deviceId  (optional)
   * @param serial  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param moduleTypeIdN  (optional)
   * @param moduleTypeN  (optional)
   * @param moduleBayIdN  (optional)
   * @param deviceIdN  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimModulesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimModulesList200Response> dcimModulesListWithHttpInfo(String id, String assetTag, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesListRequestBuilder(id, assetTag, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesList", localVarResponse);
        }
        return new ApiResponse<DcimModulesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimModulesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesListRequestBuilder(String id, String assetTag, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag", assetTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id", manufacturerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer", manufacturer));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_type_id", moduleTypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_type", moduleType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_bay_id", moduleBayId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial", serial));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__n", assetTagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ic", assetTagIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nic", assetTagNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__iew", assetTagIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__niew", assetTagNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__isw", assetTagIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nisw", assetTagNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ie", assetTagIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nie", assetTagNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id__n", manufacturerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer__n", manufacturerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_type_id__n", moduleTypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_type__n", moduleTypeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_bay_id__n", moduleBayIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__n", serialN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ic", serialIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nic", serialNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__iew", serialIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__niew", serialNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__isw", serialIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nisw", serialNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ie", serialIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nie", serialNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @param data  (required)
   * @return Module
   * @throws ApiException if fails to make API call
   */
  public Module dcimModulesPartialUpdate(Integer id, WritableModule data) throws ApiException {
    ApiResponse<Module> localVarResponse = dcimModulesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Module&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Module> dcimModulesPartialUpdateWithHttpInfo(Integer id, WritableModule data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Module>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Module>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesPartialUpdateRequestBuilder(Integer id, WritableModule data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModulesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModulesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @return Module
   * @throws ApiException if fails to make API call
   */
  public Module dcimModulesRead(Integer id) throws ApiException {
    ApiResponse<Module> localVarResponse = dcimModulesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @return ApiResponse&lt;Module&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Module> dcimModulesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesRead", localVarResponse);
        }
        return new ApiResponse<Module>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Module>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModulesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @param data  (required)
   * @return Module
   * @throws ApiException if fails to make API call
   */
  public Module dcimModulesUpdate(Integer id, WritableModule data) throws ApiException {
    ApiResponse<Module> localVarResponse = dcimModulesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this module. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Module&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Module> dcimModulesUpdateWithHttpInfo(Integer id, WritableModule data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimModulesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimModulesUpdate", localVarResponse);
        }
        return new ApiResponse<Module>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Module>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimModulesUpdateRequestBuilder(Integer id, WritableModule data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimModulesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimModulesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/modules/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimPlatformsBulkDelete() throws ApiException {
    dcimPlatformsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPlatformsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Platform
   * @throws ApiException if fails to make API call
   */
  public Platform dcimPlatformsBulkPartialUpdate(WritablePlatform data) throws ApiException {
    ApiResponse<Platform> localVarResponse = dcimPlatformsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Platform&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Platform> dcimPlatformsBulkPartialUpdateWithHttpInfo(WritablePlatform data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Platform>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Platform>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsBulkPartialUpdateRequestBuilder(WritablePlatform data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPlatformsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Platform
   * @throws ApiException if fails to make API call
   */
  public Platform dcimPlatformsBulkUpdate(WritablePlatform data) throws ApiException {
    ApiResponse<Platform> localVarResponse = dcimPlatformsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Platform&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Platform> dcimPlatformsBulkUpdateWithHttpInfo(WritablePlatform data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Platform>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Platform>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsBulkUpdateRequestBuilder(WritablePlatform data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPlatformsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Platform
   * @throws ApiException if fails to make API call
   */
  public Platform dcimPlatformsCreate(WritablePlatform data) throws ApiException {
    ApiResponse<Platform> localVarResponse = dcimPlatformsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Platform&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Platform> dcimPlatformsCreateWithHttpInfo(WritablePlatform data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsCreate", localVarResponse);
        }
        return new ApiResponse<Platform>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Platform>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsCreateRequestBuilder(WritablePlatform data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPlatformsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimPlatformsDelete(Integer id) throws ApiException {
    dcimPlatformsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPlatformsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPlatformsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param napalmDriver  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param napalmDriverN  (optional)
   * @param napalmDriverIc  (optional)
   * @param napalmDriverNic  (optional)
   * @param napalmDriverIew  (optional)
   * @param napalmDriverNiew  (optional)
   * @param napalmDriverIsw  (optional)
   * @param napalmDriverNisw  (optional)
   * @param napalmDriverIe  (optional)
   * @param napalmDriverNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimPlatformsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimPlatformsList200Response dcimPlatformsList(String id, String name, String slug, String napalmDriver, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimPlatformsList200Response> localVarResponse = dcimPlatformsListWithHttpInfo(id, name, slug, napalmDriver, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, manufacturerIdN, manufacturerN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param napalmDriver  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param manufacturerId  (optional)
   * @param manufacturer  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param napalmDriverN  (optional)
   * @param napalmDriverIc  (optional)
   * @param napalmDriverNic  (optional)
   * @param napalmDriverIew  (optional)
   * @param napalmDriverNiew  (optional)
   * @param napalmDriverIsw  (optional)
   * @param napalmDriverNisw  (optional)
   * @param napalmDriverIe  (optional)
   * @param napalmDriverNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param manufacturerIdN  (optional)
   * @param manufacturerN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimPlatformsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimPlatformsList200Response> dcimPlatformsListWithHttpInfo(String id, String name, String slug, String napalmDriver, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsListRequestBuilder(id, name, slug, napalmDriver, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, manufacturerIdN, manufacturerN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsList", localVarResponse);
        }
        return new ApiResponse<DcimPlatformsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimPlatformsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsListRequestBuilder(String id, String name, String slug, String napalmDriver, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver", napalmDriver));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id", manufacturerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer", manufacturer));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__n", napalmDriverN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__ic", napalmDriverIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__nic", napalmDriverNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__iew", napalmDriverIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__niew", napalmDriverNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__isw", napalmDriverIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__nisw", napalmDriverNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__ie", napalmDriverIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("napalm_driver__nie", napalmDriverNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer_id__n", manufacturerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("manufacturer__n", manufacturerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @param data  (required)
   * @return Platform
   * @throws ApiException if fails to make API call
   */
  public Platform dcimPlatformsPartialUpdate(Integer id, WritablePlatform data) throws ApiException {
    ApiResponse<Platform> localVarResponse = dcimPlatformsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Platform&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Platform> dcimPlatformsPartialUpdateWithHttpInfo(Integer id, WritablePlatform data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Platform>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Platform>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsPartialUpdateRequestBuilder(Integer id, WritablePlatform data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPlatformsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPlatformsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @return Platform
   * @throws ApiException if fails to make API call
   */
  public Platform dcimPlatformsRead(Integer id) throws ApiException {
    ApiResponse<Platform> localVarResponse = dcimPlatformsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @return ApiResponse&lt;Platform&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Platform> dcimPlatformsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsRead", localVarResponse);
        }
        return new ApiResponse<Platform>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Platform>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPlatformsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @param data  (required)
   * @return Platform
   * @throws ApiException if fails to make API call
   */
  public Platform dcimPlatformsUpdate(Integer id, WritablePlatform data) throws ApiException {
    ApiResponse<Platform> localVarResponse = dcimPlatformsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this platform. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Platform&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Platform> dcimPlatformsUpdateWithHttpInfo(Integer id, WritablePlatform data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPlatformsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPlatformsUpdate", localVarResponse);
        }
        return new ApiResponse<Platform>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Platform>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPlatformsUpdateRequestBuilder(Integer id, WritablePlatform data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPlatformsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPlatformsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/platforms/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerFeedsBulkDelete() throws ApiException {
    dcimPowerFeedsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerFeedsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerFeed
   * @throws ApiException if fails to make API call
   */
  public PowerFeed dcimPowerFeedsBulkPartialUpdate(WritablePowerFeed data) throws ApiException {
    ApiResponse<PowerFeed> localVarResponse = dcimPowerFeedsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerFeed&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerFeed> dcimPowerFeedsBulkPartialUpdateWithHttpInfo(WritablePowerFeed data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerFeed>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerFeed>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsBulkPartialUpdateRequestBuilder(WritablePowerFeed data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerFeedsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerFeed
   * @throws ApiException if fails to make API call
   */
  public PowerFeed dcimPowerFeedsBulkUpdate(WritablePowerFeed data) throws ApiException {
    ApiResponse<PowerFeed> localVarResponse = dcimPowerFeedsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerFeed&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerFeed> dcimPowerFeedsBulkUpdateWithHttpInfo(WritablePowerFeed data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<PowerFeed>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerFeed>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsBulkUpdateRequestBuilder(WritablePowerFeed data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerFeedsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerFeed
   * @throws ApiException if fails to make API call
   */
  public PowerFeed dcimPowerFeedsCreate(WritablePowerFeed data) throws ApiException {
    ApiResponse<PowerFeed> localVarResponse = dcimPowerFeedsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerFeed&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerFeed> dcimPowerFeedsCreateWithHttpInfo(WritablePowerFeed data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsCreate", localVarResponse);
        }
        return new ApiResponse<PowerFeed>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerFeed>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsCreateRequestBuilder(WritablePowerFeed data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerFeedsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerFeedsDelete(Integer id) throws ApiException {
    dcimPowerFeedsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerFeedsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerFeedsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param status  (optional)
   * @param type  (optional)
   * @param supply  (optional)
   * @param phase  (optional)
   * @param voltage  (optional)
   * @param amperage  (optional)
   * @param maxUtilization  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param powerPanelId  (optional)
   * @param rackId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param statusN  (optional)
   * @param typeN  (optional)
   * @param supplyN  (optional)
   * @param phaseN  (optional)
   * @param voltageN  (optional)
   * @param voltageLte  (optional)
   * @param voltageLt  (optional)
   * @param voltageGte  (optional)
   * @param voltageGt  (optional)
   * @param amperageN  (optional)
   * @param amperageLte  (optional)
   * @param amperageLt  (optional)
   * @param amperageGte  (optional)
   * @param amperageGt  (optional)
   * @param maxUtilizationN  (optional)
   * @param maxUtilizationLte  (optional)
   * @param maxUtilizationLt  (optional)
   * @param maxUtilizationGte  (optional)
   * @param maxUtilizationGt  (optional)
   * @param tagN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param powerPanelIdN  (optional)
   * @param rackIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimPowerFeedsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimPowerFeedsList200Response dcimPowerFeedsList(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimPowerFeedsList200Response> localVarResponse = dcimPowerFeedsListWithHttpInfo(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, cabled, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param status  (optional)
   * @param type  (optional)
   * @param supply  (optional)
   * @param phase  (optional)
   * @param voltage  (optional)
   * @param amperage  (optional)
   * @param maxUtilization  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param powerPanelId  (optional)
   * @param rackId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param statusN  (optional)
   * @param typeN  (optional)
   * @param supplyN  (optional)
   * @param phaseN  (optional)
   * @param voltageN  (optional)
   * @param voltageLte  (optional)
   * @param voltageLt  (optional)
   * @param voltageGte  (optional)
   * @param voltageGt  (optional)
   * @param amperageN  (optional)
   * @param amperageLte  (optional)
   * @param amperageLt  (optional)
   * @param amperageGte  (optional)
   * @param amperageGt  (optional)
   * @param maxUtilizationN  (optional)
   * @param maxUtilizationLte  (optional)
   * @param maxUtilizationLt  (optional)
   * @param maxUtilizationGte  (optional)
   * @param maxUtilizationGt  (optional)
   * @param tagN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param powerPanelIdN  (optional)
   * @param rackIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimPowerFeedsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimPowerFeedsList200Response> dcimPowerFeedsListWithHttpInfo(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsListRequestBuilder(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, cabled, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsList", localVarResponse);
        }
        return new ApiResponse<DcimPowerFeedsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimPowerFeedsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsListRequestBuilder(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String cabled, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("supply", supply));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phase", phase));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("voltage", voltage));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("amperage", amperage));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_utilization", maxUtilization));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connected", connected));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_panel_id", powerPanelId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack_id", rackId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("supply__n", supplyN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phase__n", phaseN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("voltage__n", voltageN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("voltage__lte", voltageLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("voltage__lt", voltageLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("voltage__gte", voltageGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("voltage__gt", voltageGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("amperage__n", amperageN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("amperage__lte", amperageLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("amperage__lt", amperageLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("amperage__gte", amperageGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("amperage__gt", amperageGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_utilization__n", maxUtilizationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_utilization__lte", maxUtilizationLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_utilization__lt", maxUtilizationLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_utilization__gte", maxUtilizationGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_utilization__gt", maxUtilizationGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("power_panel_id__n", powerPanelIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack_id__n", rackIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @param data  (required)
   * @return PowerFeed
   * @throws ApiException if fails to make API call
   */
  public PowerFeed dcimPowerFeedsPartialUpdate(Integer id, WritablePowerFeed data) throws ApiException {
    ApiResponse<PowerFeed> localVarResponse = dcimPowerFeedsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerFeed&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerFeed> dcimPowerFeedsPartialUpdateWithHttpInfo(Integer id, WritablePowerFeed data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerFeed>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerFeed>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsPartialUpdateRequestBuilder(Integer id, WritablePowerFeed data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerFeedsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerFeedsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @return PowerFeed
   * @throws ApiException if fails to make API call
   */
  public PowerFeed dcimPowerFeedsRead(Integer id) throws ApiException {
    ApiResponse<PowerFeed> localVarResponse = dcimPowerFeedsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @return ApiResponse&lt;PowerFeed&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerFeed> dcimPowerFeedsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsRead", localVarResponse);
        }
        return new ApiResponse<PowerFeed>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerFeed>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerFeedsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this power feed. (required)
   * @return PowerFeed
   * @throws ApiException if fails to make API call
   */
  public PowerFeed dcimPowerFeedsTrace(Integer id) throws ApiException {
    ApiResponse<PowerFeed> localVarResponse = dcimPowerFeedsTraceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this power feed. (required)
   * @return ApiResponse&lt;PowerFeed&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerFeed> dcimPowerFeedsTraceWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsTraceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsTrace", localVarResponse);
        }
        return new ApiResponse<PowerFeed>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerFeed>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsTraceRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerFeedsTrace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/{id}/trace/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @param data  (required)
   * @return PowerFeed
   * @throws ApiException if fails to make API call
   */
  public PowerFeed dcimPowerFeedsUpdate(Integer id, WritablePowerFeed data) throws ApiException {
    ApiResponse<PowerFeed> localVarResponse = dcimPowerFeedsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power feed. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerFeed&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerFeed> dcimPowerFeedsUpdateWithHttpInfo(Integer id, WritablePowerFeed data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerFeedsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerFeedsUpdate", localVarResponse);
        }
        return new ApiResponse<PowerFeed>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerFeed>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerFeedsUpdateRequestBuilder(Integer id, WritablePowerFeed data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerFeedsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerFeedsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-feeds/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerOutletTemplatesBulkDelete() throws ApiException {
    dcimPowerOutletTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerOutletTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerOutletTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerOutletTemplate dcimPowerOutletTemplatesBulkPartialUpdate(WritablePowerOutletTemplate data) throws ApiException {
    ApiResponse<PowerOutletTemplate> localVarResponse = dcimPowerOutletTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutletTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesBulkPartialUpdateWithHttpInfo(WritablePowerOutletTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutletTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutletTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesBulkPartialUpdateRequestBuilder(WritablePowerOutletTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerOutletTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerOutletTemplate dcimPowerOutletTemplatesBulkUpdate(WritablePowerOutletTemplate data) throws ApiException {
    ApiResponse<PowerOutletTemplate> localVarResponse = dcimPowerOutletTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutletTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesBulkUpdateWithHttpInfo(WritablePowerOutletTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutletTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutletTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesBulkUpdateRequestBuilder(WritablePowerOutletTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerOutletTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerOutletTemplate dcimPowerOutletTemplatesCreate(WritablePowerOutletTemplate data) throws ApiException {
    ApiResponse<PowerOutletTemplate> localVarResponse = dcimPowerOutletTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutletTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesCreateWithHttpInfo(WritablePowerOutletTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<PowerOutletTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutletTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesCreateRequestBuilder(WritablePowerOutletTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerOutletTemplatesDelete(Integer id) throws ApiException {
    dcimPowerOutletTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerOutletTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param feedLeg  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param feedLegN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimPowerOutletTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimPowerOutletTemplatesList200Response dcimPowerOutletTemplatesList(String id, String name, String type, String feedLeg, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimPowerOutletTemplatesList200Response> localVarResponse = dcimPowerOutletTemplatesListWithHttpInfo(id, name, type, feedLeg, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, devicetypeIdN, moduletypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param feedLeg  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param feedLegN  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimPowerOutletTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimPowerOutletTemplatesList200Response> dcimPowerOutletTemplatesListWithHttpInfo(String id, String name, String type, String feedLeg, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesListRequestBuilder(id, name, type, feedLeg, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, devicetypeIdN, moduletypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimPowerOutletTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimPowerOutletTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesListRequestBuilder(String id, String name, String type, String feedLeg, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("feed_leg", feedLeg));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id", moduletypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("feed_leg__n", feedLegN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id__n", moduletypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @param data  (required)
   * @return PowerOutletTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerOutletTemplate dcimPowerOutletTemplatesPartialUpdate(Integer id, WritablePowerOutletTemplate data) throws ApiException {
    ApiResponse<PowerOutletTemplate> localVarResponse = dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutletTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutletTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutletTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesPartialUpdateRequestBuilder(Integer id, WritablePowerOutletTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @return PowerOutletTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerOutletTemplate dcimPowerOutletTemplatesRead(Integer id) throws ApiException {
    ApiResponse<PowerOutletTemplate> localVarResponse = dcimPowerOutletTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @return ApiResponse&lt;PowerOutletTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesRead", localVarResponse);
        }
        return new ApiResponse<PowerOutletTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutletTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @param data  (required)
   * @return PowerOutletTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerOutletTemplate dcimPowerOutletTemplatesUpdate(Integer id, WritablePowerOutletTemplate data) throws ApiException {
    ApiResponse<PowerOutletTemplate> localVarResponse = dcimPowerOutletTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutletTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutletTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutletTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletTemplatesUpdateRequestBuilder(Integer id, WritablePowerOutletTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlet-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerOutletsBulkDelete() throws ApiException {
    dcimPowerOutletsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerOutletsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerOutlet
   * @throws ApiException if fails to make API call
   */
  public PowerOutlet dcimPowerOutletsBulkPartialUpdate(WritablePowerOutlet data) throws ApiException {
    ApiResponse<PowerOutlet> localVarResponse = dcimPowerOutletsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutlet&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutlet> dcimPowerOutletsBulkPartialUpdateWithHttpInfo(WritablePowerOutlet data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutlet>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutlet>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsBulkPartialUpdateRequestBuilder(WritablePowerOutlet data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerOutlet
   * @throws ApiException if fails to make API call
   */
  public PowerOutlet dcimPowerOutletsBulkUpdate(WritablePowerOutlet data) throws ApiException {
    ApiResponse<PowerOutlet> localVarResponse = dcimPowerOutletsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutlet&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutlet> dcimPowerOutletsBulkUpdateWithHttpInfo(WritablePowerOutlet data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutlet>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutlet>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsBulkUpdateRequestBuilder(WritablePowerOutlet data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerOutlet
   * @throws ApiException if fails to make API call
   */
  public PowerOutlet dcimPowerOutletsCreate(WritablePowerOutlet data) throws ApiException {
    ApiResponse<PowerOutlet> localVarResponse = dcimPowerOutletsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutlet&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutlet> dcimPowerOutletsCreateWithHttpInfo(WritablePowerOutlet data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsCreate", localVarResponse);
        }
        return new ApiResponse<PowerOutlet>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutlet>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsCreateRequestBuilder(WritablePowerOutlet data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerOutletsDelete(Integer id) throws ApiException {
    dcimPowerOutletsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerOutletsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param feedLeg  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param feedLegN  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimPowerOutletsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimPowerOutletsList200Response dcimPowerOutletsList(String id, String name, String label, String feedLeg, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimPowerOutletsList200Response> localVarResponse = dcimPowerOutletsListWithHttpInfo(id, name, label, feedLeg, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param feedLeg  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param feedLegN  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimPowerOutletsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimPowerOutletsList200Response> dcimPowerOutletsListWithHttpInfo(String id, String name, String label, String feedLeg, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsListRequestBuilder(id, name, label, feedLeg, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsList", localVarResponse);
        }
        return new ApiResponse<DcimPowerOutletsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimPowerOutletsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsListRequestBuilder(String id, String name, String label, String feedLeg, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("feed_leg", feedLeg));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id", moduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connected", connected));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("feed_leg__n", feedLegN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id__n", moduleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @param data  (required)
   * @return PowerOutlet
   * @throws ApiException if fails to make API call
   */
  public PowerOutlet dcimPowerOutletsPartialUpdate(Integer id, WritablePowerOutlet data) throws ApiException {
    ApiResponse<PowerOutlet> localVarResponse = dcimPowerOutletsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutlet&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutlet> dcimPowerOutletsPartialUpdateWithHttpInfo(Integer id, WritablePowerOutlet data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutlet>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutlet>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsPartialUpdateRequestBuilder(Integer id, WritablePowerOutlet data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @return PowerOutlet
   * @throws ApiException if fails to make API call
   */
  public PowerOutlet dcimPowerOutletsRead(Integer id) throws ApiException {
    ApiResponse<PowerOutlet> localVarResponse = dcimPowerOutletsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @return ApiResponse&lt;PowerOutlet&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutlet> dcimPowerOutletsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsRead", localVarResponse);
        }
        return new ApiResponse<PowerOutlet>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutlet>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this power outlet. (required)
   * @return PowerOutlet
   * @throws ApiException if fails to make API call
   */
  public PowerOutlet dcimPowerOutletsTrace(Integer id) throws ApiException {
    ApiResponse<PowerOutlet> localVarResponse = dcimPowerOutletsTraceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this power outlet. (required)
   * @return ApiResponse&lt;PowerOutlet&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutlet> dcimPowerOutletsTraceWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsTraceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsTrace", localVarResponse);
        }
        return new ApiResponse<PowerOutlet>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutlet>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsTraceRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletsTrace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/{id}/trace/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @param data  (required)
   * @return PowerOutlet
   * @throws ApiException if fails to make API call
   */
  public PowerOutlet dcimPowerOutletsUpdate(Integer id, WritablePowerOutlet data) throws ApiException {
    ApiResponse<PowerOutlet> localVarResponse = dcimPowerOutletsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power outlet. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerOutlet&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerOutlet> dcimPowerOutletsUpdateWithHttpInfo(Integer id, WritablePowerOutlet data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerOutletsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerOutletsUpdate", localVarResponse);
        }
        return new ApiResponse<PowerOutlet>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerOutlet>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerOutletsUpdateRequestBuilder(Integer id, WritablePowerOutlet data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerOutletsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerOutletsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-outlets/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerPanelsBulkDelete() throws ApiException {
    dcimPowerPanelsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerPanelsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPanel
   * @throws ApiException if fails to make API call
   */
  public PowerPanel dcimPowerPanelsBulkPartialUpdate(WritablePowerPanel data) throws ApiException {
    ApiResponse<PowerPanel> localVarResponse = dcimPowerPanelsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPanel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPanel> dcimPowerPanelsBulkPartialUpdateWithHttpInfo(WritablePowerPanel data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPanel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPanel>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsBulkPartialUpdateRequestBuilder(WritablePowerPanel data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPanelsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPanel
   * @throws ApiException if fails to make API call
   */
  public PowerPanel dcimPowerPanelsBulkUpdate(WritablePowerPanel data) throws ApiException {
    ApiResponse<PowerPanel> localVarResponse = dcimPowerPanelsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPanel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPanel> dcimPowerPanelsBulkUpdateWithHttpInfo(WritablePowerPanel data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPanel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPanel>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsBulkUpdateRequestBuilder(WritablePowerPanel data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPanelsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPanel
   * @throws ApiException if fails to make API call
   */
  public PowerPanel dcimPowerPanelsCreate(WritablePowerPanel data) throws ApiException {
    ApiResponse<PowerPanel> localVarResponse = dcimPowerPanelsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPanel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPanel> dcimPowerPanelsCreateWithHttpInfo(WritablePowerPanel data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsCreate", localVarResponse);
        }
        return new ApiResponse<PowerPanel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPanel>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsCreateRequestBuilder(WritablePowerPanel data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPanelsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerPanelsDelete(Integer id) throws ApiException {
    dcimPowerPanelsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerPanelsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPanelsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimPowerPanelsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimPowerPanelsList200Response dcimPowerPanelsList(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimPowerPanelsList200Response> localVarResponse = dcimPowerPanelsListWithHttpInfo(id, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimPowerPanelsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimPowerPanelsList200Response> dcimPowerPanelsListWithHttpInfo(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsListRequestBuilder(id, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsList", localVarResponse);
        }
        return new ApiResponse<DcimPowerPanelsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimPowerPanelsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsListRequestBuilder(String id, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @param data  (required)
   * @return PowerPanel
   * @throws ApiException if fails to make API call
   */
  public PowerPanel dcimPowerPanelsPartialUpdate(Integer id, WritablePowerPanel data) throws ApiException {
    ApiResponse<PowerPanel> localVarResponse = dcimPowerPanelsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerPanel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPanel> dcimPowerPanelsPartialUpdateWithHttpInfo(Integer id, WritablePowerPanel data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPanel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPanel>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsPartialUpdateRequestBuilder(Integer id, WritablePowerPanel data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPanelsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPanelsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @return PowerPanel
   * @throws ApiException if fails to make API call
   */
  public PowerPanel dcimPowerPanelsRead(Integer id) throws ApiException {
    ApiResponse<PowerPanel> localVarResponse = dcimPowerPanelsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @return ApiResponse&lt;PowerPanel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPanel> dcimPowerPanelsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsRead", localVarResponse);
        }
        return new ApiResponse<PowerPanel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPanel>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPanelsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @param data  (required)
   * @return PowerPanel
   * @throws ApiException if fails to make API call
   */
  public PowerPanel dcimPowerPanelsUpdate(Integer id, WritablePowerPanel data) throws ApiException {
    ApiResponse<PowerPanel> localVarResponse = dcimPowerPanelsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power panel. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerPanel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPanel> dcimPowerPanelsUpdateWithHttpInfo(Integer id, WritablePowerPanel data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPanelsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPanelsUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPanel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPanel>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPanelsUpdateRequestBuilder(Integer id, WritablePowerPanel data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPanelsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPanelsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-panels/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerPortTemplatesBulkDelete() throws ApiException {
    dcimPowerPortTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerPortTemplate dcimPowerPortTemplatesBulkPartialUpdate(WritablePowerPortTemplate data) throws ApiException {
    ApiResponse<PowerPortTemplate> localVarResponse = dcimPowerPortTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesBulkPartialUpdateWithHttpInfo(WritablePowerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesBulkPartialUpdateRequestBuilder(WritablePowerPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerPortTemplate dcimPowerPortTemplatesBulkUpdate(WritablePowerPortTemplate data) throws ApiException {
    ApiResponse<PowerPortTemplate> localVarResponse = dcimPowerPortTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesBulkUpdateWithHttpInfo(WritablePowerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesBulkUpdateRequestBuilder(WritablePowerPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerPortTemplate dcimPowerPortTemplatesCreate(WritablePowerPortTemplate data) throws ApiException {
    ApiResponse<PowerPortTemplate> localVarResponse = dcimPowerPortTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesCreateWithHttpInfo(WritablePowerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<PowerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesCreateRequestBuilder(WritablePowerPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerPortTemplatesDelete(Integer id) throws ApiException {
    dcimPowerPortTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param maximumDraw  (optional)
   * @param allocatedDraw  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param maximumDrawN  (optional)
   * @param maximumDrawLte  (optional)
   * @param maximumDrawLt  (optional)
   * @param maximumDrawGte  (optional)
   * @param maximumDrawGt  (optional)
   * @param allocatedDrawN  (optional)
   * @param allocatedDrawLte  (optional)
   * @param allocatedDrawLt  (optional)
   * @param allocatedDrawGte  (optional)
   * @param allocatedDrawGt  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimPowerPortTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimPowerPortTemplatesList200Response dcimPowerPortTemplatesList(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimPowerPortTemplatesList200Response> localVarResponse = dcimPowerPortTemplatesListWithHttpInfo(id, name, type, maximumDraw, allocatedDraw, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, devicetypeIdN, moduletypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param maximumDraw  (optional)
   * @param allocatedDraw  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param maximumDrawN  (optional)
   * @param maximumDrawLte  (optional)
   * @param maximumDrawLt  (optional)
   * @param maximumDrawGte  (optional)
   * @param maximumDrawGt  (optional)
   * @param allocatedDrawN  (optional)
   * @param allocatedDrawLte  (optional)
   * @param allocatedDrawLt  (optional)
   * @param allocatedDrawGte  (optional)
   * @param allocatedDrawGt  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimPowerPortTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimPowerPortTemplatesList200Response> dcimPowerPortTemplatesListWithHttpInfo(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesListRequestBuilder(id, name, type, maximumDraw, allocatedDraw, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, devicetypeIdN, moduletypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimPowerPortTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimPowerPortTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesListRequestBuilder(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw", maximumDraw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw", allocatedDraw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id", moduletypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__n", maximumDrawN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__lte", maximumDrawLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__lt", maximumDrawLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__gte", maximumDrawGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__gt", maximumDrawGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__n", allocatedDrawN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__lte", allocatedDrawLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__lt", allocatedDrawLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__gte", allocatedDrawGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__gt", allocatedDrawGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id__n", moduletypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @param data  (required)
   * @return PowerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerPortTemplate dcimPowerPortTemplatesPartialUpdate(Integer id, WritablePowerPortTemplate data) throws ApiException {
    ApiResponse<PowerPortTemplate> localVarResponse = dcimPowerPortTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesPartialUpdateRequestBuilder(Integer id, WritablePowerPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @return PowerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerPortTemplate dcimPowerPortTemplatesRead(Integer id) throws ApiException {
    ApiResponse<PowerPortTemplate> localVarResponse = dcimPowerPortTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @return ApiResponse&lt;PowerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesRead", localVarResponse);
        }
        return new ApiResponse<PowerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @param data  (required)
   * @return PowerPortTemplate
   * @throws ApiException if fails to make API call
   */
  public PowerPortTemplate dcimPowerPortTemplatesUpdate(Integer id, WritablePowerPortTemplate data) throws ApiException {
    ApiResponse<PowerPortTemplate> localVarResponse = dcimPowerPortTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortTemplatesUpdateRequestBuilder(Integer id, WritablePowerPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerPortsBulkDelete() throws ApiException {
    dcimPowerPortsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerPortsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPort
   * @throws ApiException if fails to make API call
   */
  public List<PowerPort> dcimPowerPortsBulkPartialUpdate(List<WritablePowerPort> data) throws ApiException {
    ApiResponse<List<PowerPort>> localVarResponse = dcimPowerPortsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<PowerPort>> dcimPowerPortsBulkPartialUpdateWithHttpInfo(List<WritablePowerPort> data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<List<PowerPort>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<PowerPort>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsBulkPartialUpdateRequestBuilder(List<WritablePowerPort> data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPort
   * @throws ApiException if fails to make API call
   */
  public PowerPort dcimPowerPortsBulkUpdate(WritablePowerPort data) throws ApiException {
    ApiResponse<PowerPort> localVarResponse = dcimPowerPortsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPort> dcimPowerPortsBulkUpdateWithHttpInfo(WritablePowerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsBulkUpdateRequestBuilder(WritablePowerPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return PowerPort
   * @throws ApiException if fails to make API call
   */
  public PowerPort dcimPowerPortsCreate(WritablePowerPort data) throws ApiException {
    ApiResponse<PowerPort> localVarResponse = dcimPowerPortsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;PowerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPort> dcimPowerPortsCreateWithHttpInfo(WritablePowerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsCreate", localVarResponse);
        }
        return new ApiResponse<PowerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsCreateRequestBuilder(WritablePowerPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimPowerPortsDelete(Integer id) throws ApiException {
    dcimPowerPortsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimPowerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param maximumDraw  (optional)
   * @param allocatedDraw  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param maximumDrawN  (optional)
   * @param maximumDrawLte  (optional)
   * @param maximumDrawLt  (optional)
   * @param maximumDrawGte  (optional)
   * @param maximumDrawGt  (optional)
   * @param allocatedDrawN  (optional)
   * @param allocatedDrawLte  (optional)
   * @param allocatedDrawLt  (optional)
   * @param allocatedDrawGte  (optional)
   * @param allocatedDrawGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimPowerPortsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimPowerPortsList200Response dcimPowerPortsList(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimPowerPortsList200Response> localVarResponse = dcimPowerPortsListWithHttpInfo(id, name, label, maximumDraw, allocatedDraw, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param maximumDraw  (optional)
   * @param allocatedDraw  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param connected  (optional)
   * @param type  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param maximumDrawN  (optional)
   * @param maximumDrawLte  (optional)
   * @param maximumDrawLt  (optional)
   * @param maximumDrawGte  (optional)
   * @param maximumDrawGt  (optional)
   * @param allocatedDrawN  (optional)
   * @param allocatedDrawLte  (optional)
   * @param allocatedDrawLt  (optional)
   * @param allocatedDrawGte  (optional)
   * @param allocatedDrawGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param typeN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimPowerPortsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimPowerPortsList200Response> dcimPowerPortsListWithHttpInfo(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsListRequestBuilder(id, name, label, maximumDraw, allocatedDraw, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, typeN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsList", localVarResponse);
        }
        return new ApiResponse<DcimPowerPortsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimPowerPortsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsListRequestBuilder(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw", maximumDraw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw", allocatedDraw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id", moduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connected", connected));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__n", maximumDrawN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__lte", maximumDrawLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__lt", maximumDrawLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__gte", maximumDrawGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maximum_draw__gt", maximumDrawGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__n", allocatedDrawN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__lte", allocatedDrawLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__lt", allocatedDrawLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__gte", allocatedDrawGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allocated_draw__gt", allocatedDrawGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id__n", moduleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @param data  (required)
   * @return PowerPort
   * @throws ApiException if fails to make API call
   */
  public PowerPort dcimPowerPortsPartialUpdate(Integer id, WritablePowerPort data) throws ApiException {
    ApiResponse<PowerPort> localVarResponse = dcimPowerPortsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPort> dcimPowerPortsPartialUpdateWithHttpInfo(Integer id, WritablePowerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsPartialUpdateRequestBuilder(Integer id, WritablePowerPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @return PowerPort
   * @throws ApiException if fails to make API call
   */
  public PowerPort dcimPowerPortsRead(Integer id) throws ApiException {
    ApiResponse<PowerPort> localVarResponse = dcimPowerPortsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @return ApiResponse&lt;PowerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPort> dcimPowerPortsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsRead", localVarResponse);
        }
        return new ApiResponse<PowerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this power port. (required)
   * @return PowerPort
   * @throws ApiException if fails to make API call
   */
  public PowerPort dcimPowerPortsTrace(Integer id) throws ApiException {
    ApiResponse<PowerPort> localVarResponse = dcimPowerPortsTraceWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
   * @param id A unique integer value identifying this power port. (required)
   * @return ApiResponse&lt;PowerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPort> dcimPowerPortsTraceWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsTraceRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsTrace", localVarResponse);
        }
        return new ApiResponse<PowerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsTraceRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortsTrace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/{id}/trace/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @param data  (required)
   * @return PowerPort
   * @throws ApiException if fails to make API call
   */
  public PowerPort dcimPowerPortsUpdate(Integer id, WritablePowerPort data) throws ApiException {
    ApiResponse<PowerPort> localVarResponse = dcimPowerPortsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this power port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;PowerPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PowerPort> dcimPowerPortsUpdateWithHttpInfo(Integer id, WritablePowerPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimPowerPortsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimPowerPortsUpdate", localVarResponse);
        }
        return new ApiResponse<PowerPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PowerPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimPowerPortsUpdateRequestBuilder(Integer id, WritablePowerPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimPowerPortsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimPowerPortsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/power-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimRackReservationsBulkDelete() throws ApiException {
    dcimRackReservationsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRackReservationsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RackReservation
   * @throws ApiException if fails to make API call
   */
  public RackReservation dcimRackReservationsBulkPartialUpdate(WritableRackReservation data) throws ApiException {
    ApiResponse<RackReservation> localVarResponse = dcimRackReservationsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RackReservation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackReservation> dcimRackReservationsBulkPartialUpdateWithHttpInfo(WritableRackReservation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RackReservation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackReservation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsBulkPartialUpdateRequestBuilder(WritableRackReservation data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackReservationsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RackReservation
   * @throws ApiException if fails to make API call
   */
  public RackReservation dcimRackReservationsBulkUpdate(WritableRackReservation data) throws ApiException {
    ApiResponse<RackReservation> localVarResponse = dcimRackReservationsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RackReservation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackReservation> dcimRackReservationsBulkUpdateWithHttpInfo(WritableRackReservation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<RackReservation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackReservation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsBulkUpdateRequestBuilder(WritableRackReservation data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackReservationsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RackReservation
   * @throws ApiException if fails to make API call
   */
  public RackReservation dcimRackReservationsCreate(WritableRackReservation data) throws ApiException {
    ApiResponse<RackReservation> localVarResponse = dcimRackReservationsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RackReservation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackReservation> dcimRackReservationsCreateWithHttpInfo(WritableRackReservation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsCreate", localVarResponse);
        }
        return new ApiResponse<RackReservation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackReservation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsCreateRequestBuilder(WritableRackReservation data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackReservationsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimRackReservationsDelete(Integer id) throws ApiException {
    dcimRackReservationsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRackReservationsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackReservationsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param created  (optional)
   * @param description  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param rackId  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param userId  (optional)
   * @param user  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param rackIdN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param userIdN  (optional)
   * @param userN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimRackReservationsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimRackReservationsList200Response dcimRackReservationsList(String id, String created, String description, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimRackReservationsList200Response> localVarResponse = dcimRackReservationsListWithHttpInfo(id, created, description, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param created  (optional)
   * @param description  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param rackId  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param userId  (optional)
   * @param user  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param rackIdN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param userIdN  (optional)
   * @param userN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimRackReservationsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimRackReservationsList200Response> dcimRackReservationsListWithHttpInfo(String id, String created, String description, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsListRequestBuilder(id, created, description, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsList", localVarResponse);
        }
        return new ApiResponse<DcimRackReservationsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimRackReservationsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsListRequestBuilder(String id, String created, String description, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack_id", rackId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user", user));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rack_id__n", rackIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id__n", userIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user__n", userN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @param data  (required)
   * @return RackReservation
   * @throws ApiException if fails to make API call
   */
  public RackReservation dcimRackReservationsPartialUpdate(Integer id, WritableRackReservation data) throws ApiException {
    ApiResponse<RackReservation> localVarResponse = dcimRackReservationsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RackReservation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackReservation> dcimRackReservationsPartialUpdateWithHttpInfo(Integer id, WritableRackReservation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RackReservation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackReservation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsPartialUpdateRequestBuilder(Integer id, WritableRackReservation data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackReservationsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackReservationsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @return RackReservation
   * @throws ApiException if fails to make API call
   */
  public RackReservation dcimRackReservationsRead(Integer id) throws ApiException {
    ApiResponse<RackReservation> localVarResponse = dcimRackReservationsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @return ApiResponse&lt;RackReservation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackReservation> dcimRackReservationsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsRead", localVarResponse);
        }
        return new ApiResponse<RackReservation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackReservation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackReservationsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @param data  (required)
   * @return RackReservation
   * @throws ApiException if fails to make API call
   */
  public RackReservation dcimRackReservationsUpdate(Integer id, WritableRackReservation data) throws ApiException {
    ApiResponse<RackReservation> localVarResponse = dcimRackReservationsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack reservation. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RackReservation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackReservation> dcimRackReservationsUpdateWithHttpInfo(Integer id, WritableRackReservation data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackReservationsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackReservationsUpdate", localVarResponse);
        }
        return new ApiResponse<RackReservation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackReservation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackReservationsUpdateRequestBuilder(Integer id, WritableRackReservation data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackReservationsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackReservationsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-reservations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimRackRolesBulkDelete() throws ApiException {
    dcimRackRolesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRackRolesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RackRole
   * @throws ApiException if fails to make API call
   */
  public RackRole dcimRackRolesBulkPartialUpdate(RackRole data) throws ApiException {
    ApiResponse<RackRole> localVarResponse = dcimRackRolesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RackRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackRole> dcimRackRolesBulkPartialUpdateWithHttpInfo(RackRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RackRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesBulkPartialUpdateRequestBuilder(RackRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackRolesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RackRole
   * @throws ApiException if fails to make API call
   */
  public RackRole dcimRackRolesBulkUpdate(RackRole data) throws ApiException {
    ApiResponse<RackRole> localVarResponse = dcimRackRolesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RackRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackRole> dcimRackRolesBulkUpdateWithHttpInfo(RackRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<RackRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesBulkUpdateRequestBuilder(RackRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackRolesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RackRole
   * @throws ApiException if fails to make API call
   */
  public RackRole dcimRackRolesCreate(RackRole data) throws ApiException {
    ApiResponse<RackRole> localVarResponse = dcimRackRolesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RackRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackRole> dcimRackRolesCreateWithHttpInfo(RackRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesCreate", localVarResponse);
        }
        return new ApiResponse<RackRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesCreateRequestBuilder(RackRole data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackRolesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimRackRolesDelete(Integer id) throws ApiException {
    dcimRackRolesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRackRolesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackRolesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimRackRolesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimRackRolesList200Response dcimRackRolesList(String id, String name, String slug, String color, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimRackRolesList200Response> localVarResponse = dcimRackRolesListWithHttpInfo(id, name, slug, color, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param color  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimRackRolesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimRackRolesList200Response> dcimRackRolesListWithHttpInfo(String id, String name, String slug, String color, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesListRequestBuilder(id, name, slug, color, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesList", localVarResponse);
        }
        return new ApiResponse<DcimRackRolesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimRackRolesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesListRequestBuilder(String id, String name, String slug, String color, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @param data  (required)
   * @return RackRole
   * @throws ApiException if fails to make API call
   */
  public RackRole dcimRackRolesPartialUpdate(Integer id, RackRole data) throws ApiException {
    ApiResponse<RackRole> localVarResponse = dcimRackRolesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RackRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackRole> dcimRackRolesPartialUpdateWithHttpInfo(Integer id, RackRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RackRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesPartialUpdateRequestBuilder(Integer id, RackRole data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackRolesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackRolesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @return RackRole
   * @throws ApiException if fails to make API call
   */
  public RackRole dcimRackRolesRead(Integer id) throws ApiException {
    ApiResponse<RackRole> localVarResponse = dcimRackRolesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @return ApiResponse&lt;RackRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackRole> dcimRackRolesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesRead", localVarResponse);
        }
        return new ApiResponse<RackRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackRolesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @param data  (required)
   * @return RackRole
   * @throws ApiException if fails to make API call
   */
  public RackRole dcimRackRolesUpdate(Integer id, RackRole data) throws ApiException {
    ApiResponse<RackRole> localVarResponse = dcimRackRolesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack role. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RackRole&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RackRole> dcimRackRolesUpdateWithHttpInfo(Integer id, RackRole data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRackRolesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRackRolesUpdate", localVarResponse);
        }
        return new ApiResponse<RackRole>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RackRole>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRackRolesUpdateRequestBuilder(Integer id, RackRole data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRackRolesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRackRolesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rack-roles/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimRacksBulkDelete() throws ApiException {
    dcimRacksBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRacksBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Rack
   * @throws ApiException if fails to make API call
   */
  public Rack dcimRacksBulkPartialUpdate(WritableRack data) throws ApiException {
    ApiResponse<Rack> localVarResponse = dcimRacksBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Rack&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Rack> dcimRacksBulkPartialUpdateWithHttpInfo(WritableRack data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Rack>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Rack>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksBulkPartialUpdateRequestBuilder(WritableRack data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRacksBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Rack
   * @throws ApiException if fails to make API call
   */
  public Rack dcimRacksBulkUpdate(WritableRack data) throws ApiException {
    ApiResponse<Rack> localVarResponse = dcimRacksBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Rack&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Rack> dcimRacksBulkUpdateWithHttpInfo(WritableRack data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Rack>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Rack>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksBulkUpdateRequestBuilder(WritableRack data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRacksBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Rack
   * @throws ApiException if fails to make API call
   */
  public Rack dcimRacksCreate(WritableRack data) throws ApiException {
    ApiResponse<Rack> localVarResponse = dcimRacksCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Rack&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Rack> dcimRacksCreateWithHttpInfo(WritableRack data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksCreate", localVarResponse);
        }
        return new ApiResponse<Rack>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Rack>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksCreateRequestBuilder(WritableRack data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRacksCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimRacksDelete(Integer id) throws ApiException {
    dcimRacksDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRacksDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRacksDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
   * @param id A unique integer value identifying this rack. (required)
   * @param q  (optional)
   * @param face  (optional, default to front)
   * @param render  (optional, default to json)
   * @param unitWidth  (optional, default to 220)
   * @param unitHeight  (optional, default to 22)
   * @param legendWidth  (optional, default to 30)
   * @param exclude  (optional)
   * @param expandDevices  (optional, default to true)
   * @param includeImages  (optional, default to true)
   * @return List&lt;RackUnit&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RackUnit> dcimRacksElevation(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
    ApiResponse<List<RackUnit>> localVarResponse = dcimRacksElevationWithHttpInfo(id, q, face, render, unitWidth, unitHeight, legendWidth, exclude, expandDevices, includeImages);
    return localVarResponse.getData();
  }

  /**
   * 
   * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
   * @param id A unique integer value identifying this rack. (required)
   * @param q  (optional)
   * @param face  (optional, default to front)
   * @param render  (optional, default to json)
   * @param unitWidth  (optional, default to 220)
   * @param unitHeight  (optional, default to 22)
   * @param legendWidth  (optional, default to 30)
   * @param exclude  (optional)
   * @param expandDevices  (optional, default to true)
   * @param includeImages  (optional, default to true)
   * @return ApiResponse&lt;List&lt;RackUnit&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RackUnit>> dcimRacksElevationWithHttpInfo(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksElevationRequestBuilder(id, q, face, render, unitWidth, unitHeight, legendWidth, exclude, expandDevices, includeImages);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksElevation", localVarResponse);
        }
        return new ApiResponse<List<RackUnit>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RackUnit>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksElevationRequestBuilder(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRacksElevation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/{id}/elevation/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("face", face));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("render", render));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unit_width", unitWidth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unit_height", unitHeight));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("legend_width", legendWidth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("exclude", exclude));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand_devices", expandDevices));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("include_images", includeImages));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param facilityId  (optional)
   * @param assetTag  (optional)
   * @param uHeight  (optional)
   * @param descUnits  (optional)
   * @param outerWidth  (optional)
   * @param outerDepth  (optional)
   * @param outerUnit  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param status  (optional)
   * @param type  (optional)
   * @param width  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param serial  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param facilityIdN  (optional)
   * @param facilityIdIc  (optional)
   * @param facilityIdNic  (optional)
   * @param facilityIdIew  (optional)
   * @param facilityIdNiew  (optional)
   * @param facilityIdIsw  (optional)
   * @param facilityIdNisw  (optional)
   * @param facilityIdIe  (optional)
   * @param facilityIdNie  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param uHeightN  (optional)
   * @param uHeightLte  (optional)
   * @param uHeightLt  (optional)
   * @param uHeightGte  (optional)
   * @param uHeightGt  (optional)
   * @param outerWidthN  (optional)
   * @param outerWidthLte  (optional)
   * @param outerWidthLt  (optional)
   * @param outerWidthGte  (optional)
   * @param outerWidthGt  (optional)
   * @param outerDepthN  (optional)
   * @param outerDepthLte  (optional)
   * @param outerDepthLt  (optional)
   * @param outerDepthGte  (optional)
   * @param outerDepthGt  (optional)
   * @param outerUnitN  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param statusN  (optional)
   * @param typeN  (optional)
   * @param widthN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimRacksList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimRacksList200Response dcimRacksList(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimRacksList200Response> localVarResponse = dcimRacksListWithHttpInfo(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param facilityId  (optional)
   * @param assetTag  (optional)
   * @param uHeight  (optional)
   * @param descUnits  (optional)
   * @param outerWidth  (optional)
   * @param outerDepth  (optional)
   * @param outerUnit  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param status  (optional)
   * @param type  (optional)
   * @param width  (optional)
   * @param roleId  (optional)
   * @param role  (optional)
   * @param serial  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param facilityIdN  (optional)
   * @param facilityIdIc  (optional)
   * @param facilityIdNic  (optional)
   * @param facilityIdIew  (optional)
   * @param facilityIdNiew  (optional)
   * @param facilityIdIsw  (optional)
   * @param facilityIdNisw  (optional)
   * @param facilityIdIe  (optional)
   * @param facilityIdNie  (optional)
   * @param assetTagN  (optional)
   * @param assetTagIc  (optional)
   * @param assetTagNic  (optional)
   * @param assetTagIew  (optional)
   * @param assetTagNiew  (optional)
   * @param assetTagIsw  (optional)
   * @param assetTagNisw  (optional)
   * @param assetTagIe  (optional)
   * @param assetTagNie  (optional)
   * @param uHeightN  (optional)
   * @param uHeightLte  (optional)
   * @param uHeightLt  (optional)
   * @param uHeightGte  (optional)
   * @param uHeightGt  (optional)
   * @param outerWidthN  (optional)
   * @param outerWidthLte  (optional)
   * @param outerWidthLt  (optional)
   * @param outerWidthGte  (optional)
   * @param outerWidthGt  (optional)
   * @param outerDepthN  (optional)
   * @param outerDepthLte  (optional)
   * @param outerDepthLt  (optional)
   * @param outerDepthGte  (optional)
   * @param outerDepthGt  (optional)
   * @param outerUnitN  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param statusN  (optional)
   * @param typeN  (optional)
   * @param widthN  (optional)
   * @param roleIdN  (optional)
   * @param roleN  (optional)
   * @param serialN  (optional)
   * @param serialIc  (optional)
   * @param serialNic  (optional)
   * @param serialIew  (optional)
   * @param serialNiew  (optional)
   * @param serialIsw  (optional)
   * @param serialNisw  (optional)
   * @param serialIe  (optional)
   * @param serialNie  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimRacksList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimRacksList200Response> dcimRacksListWithHttpInfo(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksListRequestBuilder(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksList", localVarResponse);
        }
        return new ApiResponse<DcimRacksList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimRacksList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksListRequestBuilder(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id", facilityId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag", assetTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height", uHeight));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc_units", descUnits));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_width", outerWidth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_depth", outerDepth));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_unit", outerUnit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id", roleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role", role));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial", serial));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__n", facilityIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__ic", facilityIdIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__nic", facilityIdNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__iew", facilityIdIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__niew", facilityIdNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__isw", facilityIdIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__nisw", facilityIdNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__ie", facilityIdIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility_id__nie", facilityIdNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__n", assetTagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ic", assetTagIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nic", assetTagNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__iew", assetTagIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__niew", assetTagNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__isw", assetTagIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nisw", assetTagNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__ie", assetTagIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asset_tag__nie", assetTagNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__n", uHeightN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__lte", uHeightLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__lt", uHeightLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__gte", uHeightGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("u_height__gt", uHeightGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_width__n", outerWidthN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_width__lte", outerWidthLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_width__lt", outerWidthLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_width__gte", outerWidthGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_width__gt", outerWidthGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_depth__n", outerDepthN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_depth__lte", outerDepthLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_depth__lt", outerDepthLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_depth__gte", outerDepthGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_depth__gt", outerDepthGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("outer_unit__n", outerUnitN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width__n", widthN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role_id__n", roleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("role__n", roleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__n", serialN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ic", serialIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nic", serialNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__iew", serialIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__niew", serialNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__isw", serialIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nisw", serialNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__ie", serialIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serial__nie", serialNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @param data  (required)
   * @return Rack
   * @throws ApiException if fails to make API call
   */
  public Rack dcimRacksPartialUpdate(Integer id, WritableRack data) throws ApiException {
    ApiResponse<Rack> localVarResponse = dcimRacksPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Rack&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Rack> dcimRacksPartialUpdateWithHttpInfo(Integer id, WritableRack data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Rack>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Rack>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksPartialUpdateRequestBuilder(Integer id, WritableRack data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRacksPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRacksPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @return Rack
   * @throws ApiException if fails to make API call
   */
  public Rack dcimRacksRead(Integer id) throws ApiException {
    ApiResponse<Rack> localVarResponse = dcimRacksReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @return ApiResponse&lt;Rack&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Rack> dcimRacksReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksRead", localVarResponse);
        }
        return new ApiResponse<Rack>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Rack>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRacksRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @param data  (required)
   * @return Rack
   * @throws ApiException if fails to make API call
   */
  public Rack dcimRacksUpdate(Integer id, WritableRack data) throws ApiException {
    ApiResponse<Rack> localVarResponse = dcimRacksUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rack. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Rack&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Rack> dcimRacksUpdateWithHttpInfo(Integer id, WritableRack data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRacksUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRacksUpdate", localVarResponse);
        }
        return new ApiResponse<Rack>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Rack>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRacksUpdateRequestBuilder(Integer id, WritableRack data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRacksUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRacksUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/racks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimRearPortTemplatesBulkDelete() throws ApiException {
    dcimRearPortTemplatesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRearPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RearPortTemplate
   * @throws ApiException if fails to make API call
   */
  public RearPortTemplate dcimRearPortTemplatesBulkPartialUpdate(WritableRearPortTemplate data) throws ApiException {
    ApiResponse<RearPortTemplate> localVarResponse = dcimRearPortTemplatesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RearPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPortTemplate> dcimRearPortTemplatesBulkPartialUpdateWithHttpInfo(WritableRearPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RearPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesBulkPartialUpdateRequestBuilder(WritableRearPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortTemplatesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RearPortTemplate
   * @throws ApiException if fails to make API call
   */
  public RearPortTemplate dcimRearPortTemplatesBulkUpdate(WritableRearPortTemplate data) throws ApiException {
    ApiResponse<RearPortTemplate> localVarResponse = dcimRearPortTemplatesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RearPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPortTemplate> dcimRearPortTemplatesBulkUpdateWithHttpInfo(WritableRearPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<RearPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesBulkUpdateRequestBuilder(WritableRearPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortTemplatesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RearPortTemplate
   * @throws ApiException if fails to make API call
   */
  public RearPortTemplate dcimRearPortTemplatesCreate(WritableRearPortTemplate data) throws ApiException {
    ApiResponse<RearPortTemplate> localVarResponse = dcimRearPortTemplatesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RearPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPortTemplate> dcimRearPortTemplatesCreateWithHttpInfo(WritableRearPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesCreate", localVarResponse);
        }
        return new ApiResponse<RearPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesCreateRequestBuilder(WritableRearPortTemplate data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortTemplatesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimRearPortTemplatesDelete(Integer id) throws ApiException {
    dcimRearPortTemplatesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRearPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortTemplatesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param positions  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param positionsN  (optional)
   * @param positionsLte  (optional)
   * @param positionsLt  (optional)
   * @param positionsGte  (optional)
   * @param positionsGt  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimRearPortTemplatesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimRearPortTemplatesList200Response dcimRearPortTemplatesList(String id, String name, String type, String color, String positions, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimRearPortTemplatesList200Response> localVarResponse = dcimRearPortTemplatesListWithHttpInfo(id, name, type, color, positions, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, devicetypeIdN, moduletypeIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param positions  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param devicetypeId  (optional)
   * @param moduletypeId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param positionsN  (optional)
   * @param positionsLte  (optional)
   * @param positionsLt  (optional)
   * @param positionsGte  (optional)
   * @param positionsGt  (optional)
   * @param devicetypeIdN  (optional)
   * @param moduletypeIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimRearPortTemplatesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimRearPortTemplatesList200Response> dcimRearPortTemplatesListWithHttpInfo(String id, String name, String type, String color, String positions, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesListRequestBuilder(id, name, type, color, positions, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, devicetypeIdN, moduletypeIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesList", localVarResponse);
        }
        return new ApiResponse<DcimRearPortTemplatesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimRearPortTemplatesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesListRequestBuilder(String id, String name, String type, String color, String positions, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, String moduletypeIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions", positions));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id", devicetypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id", moduletypeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__n", positionsN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__lte", positionsLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__lt", positionsLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__gte", positionsGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__gt", positionsGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("devicetype_id__n", devicetypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("moduletype_id__n", moduletypeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @param data  (required)
   * @return RearPortTemplate
   * @throws ApiException if fails to make API call
   */
  public RearPortTemplate dcimRearPortTemplatesPartialUpdate(Integer id, WritableRearPortTemplate data) throws ApiException {
    ApiResponse<RearPortTemplate> localVarResponse = dcimRearPortTemplatesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RearPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPortTemplate> dcimRearPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableRearPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RearPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesPartialUpdateRequestBuilder(Integer id, WritableRearPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortTemplatesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortTemplatesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @return RearPortTemplate
   * @throws ApiException if fails to make API call
   */
  public RearPortTemplate dcimRearPortTemplatesRead(Integer id) throws ApiException {
    ApiResponse<RearPortTemplate> localVarResponse = dcimRearPortTemplatesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @return ApiResponse&lt;RearPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPortTemplate> dcimRearPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesRead", localVarResponse);
        }
        return new ApiResponse<RearPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortTemplatesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @param data  (required)
   * @return RearPortTemplate
   * @throws ApiException if fails to make API call
   */
  public RearPortTemplate dcimRearPortTemplatesUpdate(Integer id, WritableRearPortTemplate data) throws ApiException {
    ApiResponse<RearPortTemplate> localVarResponse = dcimRearPortTemplatesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port template. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RearPortTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPortTemplate> dcimRearPortTemplatesUpdateWithHttpInfo(Integer id, WritableRearPortTemplate data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortTemplatesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortTemplatesUpdate", localVarResponse);
        }
        return new ApiResponse<RearPortTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPortTemplate>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortTemplatesUpdateRequestBuilder(Integer id, WritableRearPortTemplate data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortTemplatesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortTemplatesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-port-templates/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimRearPortsBulkDelete() throws ApiException {
    dcimRearPortsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRearPortsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RearPort
   * @throws ApiException if fails to make API call
   */
  public RearPort dcimRearPortsBulkPartialUpdate(WritableRearPort data) throws ApiException {
    ApiResponse<RearPort> localVarResponse = dcimRearPortsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RearPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPort> dcimRearPortsBulkPartialUpdateWithHttpInfo(WritableRearPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RearPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsBulkPartialUpdateRequestBuilder(WritableRearPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RearPort
   * @throws ApiException if fails to make API call
   */
  public RearPort dcimRearPortsBulkUpdate(WritableRearPort data) throws ApiException {
    ApiResponse<RearPort> localVarResponse = dcimRearPortsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RearPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPort> dcimRearPortsBulkUpdateWithHttpInfo(WritableRearPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<RearPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsBulkUpdateRequestBuilder(WritableRearPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return RearPort
   * @throws ApiException if fails to make API call
   */
  public RearPort dcimRearPortsCreate(WritableRearPort data) throws ApiException {
    ApiResponse<RearPort> localVarResponse = dcimRearPortsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;RearPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPort> dcimRearPortsCreateWithHttpInfo(WritableRearPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsCreate", localVarResponse);
        }
        return new ApiResponse<RearPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsCreateRequestBuilder(WritableRearPort data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimRearPortsDelete(Integer id) throws ApiException {
    dcimRearPortsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRearPortsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param positions  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param positionsN  (optional)
   * @param positionsLte  (optional)
   * @param positionsLt  (optional)
   * @param positionsGte  (optional)
   * @param positionsGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimRearPortsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimRearPortsList200Response dcimRearPortsList(String id, String name, String label, String type, String color, String positions, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimRearPortsList200Response> localVarResponse = dcimRearPortsListWithHttpInfo(id, name, label, type, color, positions, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param label  (optional)
   * @param type  (optional)
   * @param color  (optional)
   * @param positions  (optional)
   * @param description  (optional)
   * @param q  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param locationId  (optional)
   * @param location  (optional)
   * @param deviceId  (optional)
   * @param device  (optional)
   * @param virtualChassisId  (optional)
   * @param virtualChassis  (optional)
   * @param moduleId  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param labelN  (optional)
   * @param labelIc  (optional)
   * @param labelNic  (optional)
   * @param labelIew  (optional)
   * @param labelNiew  (optional)
   * @param labelIsw  (optional)
   * @param labelNisw  (optional)
   * @param labelIe  (optional)
   * @param labelNie  (optional)
   * @param typeN  (optional)
   * @param colorN  (optional)
   * @param colorIc  (optional)
   * @param colorNic  (optional)
   * @param colorIew  (optional)
   * @param colorNiew  (optional)
   * @param colorIsw  (optional)
   * @param colorNisw  (optional)
   * @param colorIe  (optional)
   * @param colorNie  (optional)
   * @param positionsN  (optional)
   * @param positionsLte  (optional)
   * @param positionsLt  (optional)
   * @param positionsGte  (optional)
   * @param positionsGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param locationIdN  (optional)
   * @param locationN  (optional)
   * @param deviceIdN  (optional)
   * @param deviceN  (optional)
   * @param virtualChassisIdN  (optional)
   * @param virtualChassisN  (optional)
   * @param moduleIdN  (optional)
   * @param tagN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimRearPortsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimRearPortsList200Response> dcimRearPortsListWithHttpInfo(String id, String name, String label, String type, String color, String positions, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsListRequestBuilder(id, name, label, type, color, positions, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, tagN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsList", localVarResponse);
        }
        return new ApiResponse<DcimRearPortsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimRearPortsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsListRequestBuilder(String id, String name, String label, String type, String color, String positions, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String tagN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color", color));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions", positions));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id", deviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device", device));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id", virtualChassisId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis", virtualChassis));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id", moduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__n", labelN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ic", labelIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nic", labelNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__iew", labelIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__niew", labelNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__isw", labelIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nisw", labelNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__ie", labelIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label__nie", labelNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__n", colorN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ic", colorIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nic", colorNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__iew", colorIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__niew", colorNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__isw", colorIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nisw", colorNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__ie", colorIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("color__nie", colorNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__n", positionsN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__lte", positionsLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__lt", positionsLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__gte", positionsGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positions__gt", positionsGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id__n", locationIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location__n", locationN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device_id__n", deviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("device__n", deviceN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis_id__n", virtualChassisIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("virtual_chassis__n", virtualChassisN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("module_id__n", moduleIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @param data  (required)
   * @return RearPort
   * @throws ApiException if fails to make API call
   */
  public RearPort dcimRearPortsPartialUpdate(Integer id, WritableRearPort data) throws ApiException {
    ApiResponse<RearPort> localVarResponse = dcimRearPortsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RearPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPort> dcimRearPortsPartialUpdateWithHttpInfo(Integer id, WritableRearPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<RearPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsPartialUpdateRequestBuilder(Integer id, WritableRearPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Return all CablePaths which traverse a given pass-through port.
   * @param id A unique integer value identifying this rear port. (required)
   * @return RearPort
   * @throws ApiException if fails to make API call
   */
  public RearPort dcimRearPortsPaths(Integer id) throws ApiException {
    ApiResponse<RearPort> localVarResponse = dcimRearPortsPathsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Return all CablePaths which traverse a given pass-through port.
   * @param id A unique integer value identifying this rear port. (required)
   * @return ApiResponse&lt;RearPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPort> dcimRearPortsPathsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsPathsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsPaths", localVarResponse);
        }
        return new ApiResponse<RearPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsPathsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortsPaths");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/{id}/paths/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @return RearPort
   * @throws ApiException if fails to make API call
   */
  public RearPort dcimRearPortsRead(Integer id) throws ApiException {
    ApiResponse<RearPort> localVarResponse = dcimRearPortsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @return ApiResponse&lt;RearPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPort> dcimRearPortsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsRead", localVarResponse);
        }
        return new ApiResponse<RearPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @param data  (required)
   * @return RearPort
   * @throws ApiException if fails to make API call
   */
  public RearPort dcimRearPortsUpdate(Integer id, WritableRearPort data) throws ApiException {
    ApiResponse<RearPort> localVarResponse = dcimRearPortsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this rear port. (required)
   * @param data  (required)
   * @return ApiResponse&lt;RearPort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RearPort> dcimRearPortsUpdateWithHttpInfo(Integer id, WritableRearPort data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRearPortsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRearPortsUpdate", localVarResponse);
        }
        return new ApiResponse<RearPort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RearPort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRearPortsUpdateRequestBuilder(Integer id, WritableRearPort data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRearPortsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRearPortsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/rear-ports/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimRegionsBulkDelete() throws ApiException {
    dcimRegionsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRegionsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Region
   * @throws ApiException if fails to make API call
   */
  public Region dcimRegionsBulkPartialUpdate(WritableRegion data) throws ApiException {
    ApiResponse<Region> localVarResponse = dcimRegionsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Region&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Region> dcimRegionsBulkPartialUpdateWithHttpInfo(WritableRegion data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Region>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Region>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsBulkPartialUpdateRequestBuilder(WritableRegion data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRegionsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Region
   * @throws ApiException if fails to make API call
   */
  public Region dcimRegionsBulkUpdate(WritableRegion data) throws ApiException {
    ApiResponse<Region> localVarResponse = dcimRegionsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Region&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Region> dcimRegionsBulkUpdateWithHttpInfo(WritableRegion data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Region>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Region>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsBulkUpdateRequestBuilder(WritableRegion data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRegionsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Region
   * @throws ApiException if fails to make API call
   */
  public Region dcimRegionsCreate(WritableRegion data) throws ApiException {
    ApiResponse<Region> localVarResponse = dcimRegionsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Region&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Region> dcimRegionsCreateWithHttpInfo(WritableRegion data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsCreate", localVarResponse);
        }
        return new ApiResponse<Region>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Region>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsCreateRequestBuilder(WritableRegion data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRegionsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimRegionsDelete(Integer id) throws ApiException {
    dcimRegionsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimRegionsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRegionsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimRegionsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimRegionsList200Response dcimRegionsList(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimRegionsList200Response> localVarResponse = dcimRegionsListWithHttpInfo(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimRegionsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimRegionsList200Response> dcimRegionsListWithHttpInfo(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsListRequestBuilder(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsList", localVarResponse);
        }
        return new ApiResponse<DcimRegionsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimRegionsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsListRequestBuilder(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent", parent));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent__n", parentN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @param data  (required)
   * @return Region
   * @throws ApiException if fails to make API call
   */
  public Region dcimRegionsPartialUpdate(Integer id, WritableRegion data) throws ApiException {
    ApiResponse<Region> localVarResponse = dcimRegionsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Region&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Region> dcimRegionsPartialUpdateWithHttpInfo(Integer id, WritableRegion data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Region>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Region>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsPartialUpdateRequestBuilder(Integer id, WritableRegion data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRegionsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRegionsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @return Region
   * @throws ApiException if fails to make API call
   */
  public Region dcimRegionsRead(Integer id) throws ApiException {
    ApiResponse<Region> localVarResponse = dcimRegionsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @return ApiResponse&lt;Region&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Region> dcimRegionsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsRead", localVarResponse);
        }
        return new ApiResponse<Region>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Region>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRegionsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @param data  (required)
   * @return Region
   * @throws ApiException if fails to make API call
   */
  public Region dcimRegionsUpdate(Integer id, WritableRegion data) throws ApiException {
    ApiResponse<Region> localVarResponse = dcimRegionsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this region. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Region&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Region> dcimRegionsUpdateWithHttpInfo(Integer id, WritableRegion data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimRegionsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimRegionsUpdate", localVarResponse);
        }
        return new ApiResponse<Region>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Region>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimRegionsUpdateRequestBuilder(Integer id, WritableRegion data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimRegionsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimRegionsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/regions/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimSiteGroupsBulkDelete() throws ApiException {
    dcimSiteGroupsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimSiteGroupsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return SiteGroup
   * @throws ApiException if fails to make API call
   */
  public SiteGroup dcimSiteGroupsBulkPartialUpdate(WritableSiteGroup data) throws ApiException {
    ApiResponse<SiteGroup> localVarResponse = dcimSiteGroupsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;SiteGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SiteGroup> dcimSiteGroupsBulkPartialUpdateWithHttpInfo(WritableSiteGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<SiteGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SiteGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsBulkPartialUpdateRequestBuilder(WritableSiteGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSiteGroupsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return SiteGroup
   * @throws ApiException if fails to make API call
   */
  public SiteGroup dcimSiteGroupsBulkUpdate(WritableSiteGroup data) throws ApiException {
    ApiResponse<SiteGroup> localVarResponse = dcimSiteGroupsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;SiteGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SiteGroup> dcimSiteGroupsBulkUpdateWithHttpInfo(WritableSiteGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<SiteGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SiteGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsBulkUpdateRequestBuilder(WritableSiteGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSiteGroupsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return SiteGroup
   * @throws ApiException if fails to make API call
   */
  public SiteGroup dcimSiteGroupsCreate(WritableSiteGroup data) throws ApiException {
    ApiResponse<SiteGroup> localVarResponse = dcimSiteGroupsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;SiteGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SiteGroup> dcimSiteGroupsCreateWithHttpInfo(WritableSiteGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsCreate", localVarResponse);
        }
        return new ApiResponse<SiteGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SiteGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsCreateRequestBuilder(WritableSiteGroup data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSiteGroupsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimSiteGroupsDelete(Integer id) throws ApiException {
    dcimSiteGroupsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimSiteGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSiteGroupsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimSiteGroupsList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimSiteGroupsList200Response dcimSiteGroupsList(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimSiteGroupsList200Response> localVarResponse = dcimSiteGroupsListWithHttpInfo(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param parentId  (optional)
   * @param parent  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param parentIdN  (optional)
   * @param parentN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimSiteGroupsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimSiteGroupsList200Response> dcimSiteGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsListRequestBuilder(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsList", localVarResponse);
        }
        return new ApiResponse<DcimSiteGroupsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimSiteGroupsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsListRequestBuilder(String id, String name, String slug, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id", parentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent", parent));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent_id__n", parentIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parent__n", parentN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @param data  (required)
   * @return SiteGroup
   * @throws ApiException if fails to make API call
   */
  public SiteGroup dcimSiteGroupsPartialUpdate(Integer id, WritableSiteGroup data) throws ApiException {
    ApiResponse<SiteGroup> localVarResponse = dcimSiteGroupsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;SiteGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SiteGroup> dcimSiteGroupsPartialUpdateWithHttpInfo(Integer id, WritableSiteGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<SiteGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SiteGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsPartialUpdateRequestBuilder(Integer id, WritableSiteGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSiteGroupsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSiteGroupsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @return SiteGroup
   * @throws ApiException if fails to make API call
   */
  public SiteGroup dcimSiteGroupsRead(Integer id) throws ApiException {
    ApiResponse<SiteGroup> localVarResponse = dcimSiteGroupsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @return ApiResponse&lt;SiteGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SiteGroup> dcimSiteGroupsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsRead", localVarResponse);
        }
        return new ApiResponse<SiteGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SiteGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSiteGroupsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @param data  (required)
   * @return SiteGroup
   * @throws ApiException if fails to make API call
   */
  public SiteGroup dcimSiteGroupsUpdate(Integer id, WritableSiteGroup data) throws ApiException {
    ApiResponse<SiteGroup> localVarResponse = dcimSiteGroupsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site group. (required)
   * @param data  (required)
   * @return ApiResponse&lt;SiteGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SiteGroup> dcimSiteGroupsUpdateWithHttpInfo(Integer id, WritableSiteGroup data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSiteGroupsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSiteGroupsUpdate", localVarResponse);
        }
        return new ApiResponse<SiteGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SiteGroup>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSiteGroupsUpdateRequestBuilder(Integer id, WritableSiteGroup data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSiteGroupsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSiteGroupsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/site-groups/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimSitesBulkDelete() throws ApiException {
    dcimSitesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimSitesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Site
   * @throws ApiException if fails to make API call
   */
  public Site dcimSitesBulkPartialUpdate(WritableSite data) throws ApiException {
    ApiResponse<Site> localVarResponse = dcimSitesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Site&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Site> dcimSitesBulkPartialUpdateWithHttpInfo(WritableSite data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Site>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Site>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesBulkPartialUpdateRequestBuilder(WritableSite data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSitesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Site
   * @throws ApiException if fails to make API call
   */
  public Site dcimSitesBulkUpdate(WritableSite data) throws ApiException {
    ApiResponse<Site> localVarResponse = dcimSitesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Site&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Site> dcimSitesBulkUpdateWithHttpInfo(WritableSite data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Site>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Site>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesBulkUpdateRequestBuilder(WritableSite data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSitesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Site
   * @throws ApiException if fails to make API call
   */
  public Site dcimSitesCreate(WritableSite data) throws ApiException {
    ApiResponse<Site> localVarResponse = dcimSitesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Site&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Site> dcimSitesCreateWithHttpInfo(WritableSite data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesCreate", localVarResponse);
        }
        return new ApiResponse<Site>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Site>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesCreateRequestBuilder(WritableSite data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSitesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimSitesDelete(Integer id) throws ApiException {
    dcimSitesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimSitesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSitesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param facility  (optional)
   * @param latitude  (optional)
   * @param longitude  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param status  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param asn  (optional)
   * @param asnId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param facilityN  (optional)
   * @param facilityIc  (optional)
   * @param facilityNic  (optional)
   * @param facilityIew  (optional)
   * @param facilityNiew  (optional)
   * @param facilityIsw  (optional)
   * @param facilityNisw  (optional)
   * @param facilityIe  (optional)
   * @param facilityNie  (optional)
   * @param latitudeN  (optional)
   * @param latitudeLte  (optional)
   * @param latitudeLt  (optional)
   * @param latitudeGte  (optional)
   * @param latitudeGt  (optional)
   * @param longitudeN  (optional)
   * @param longitudeLte  (optional)
   * @param longitudeLt  (optional)
   * @param longitudeGte  (optional)
   * @param longitudeGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param statusN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param asnN  (optional)
   * @param asnIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimSitesList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimSitesList200Response dcimSitesList(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimSitesList200Response> localVarResponse = dcimSitesListWithHttpInfo(id, name, slug, facility, latitude, longitude, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param facility  (optional)
   * @param latitude  (optional)
   * @param longitude  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param status  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param groupId  (optional)
   * @param group  (optional)
   * @param asn  (optional)
   * @param asnId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param facilityN  (optional)
   * @param facilityIc  (optional)
   * @param facilityNic  (optional)
   * @param facilityIew  (optional)
   * @param facilityNiew  (optional)
   * @param facilityIsw  (optional)
   * @param facilityNisw  (optional)
   * @param facilityIe  (optional)
   * @param facilityNie  (optional)
   * @param latitudeN  (optional)
   * @param latitudeLte  (optional)
   * @param latitudeLt  (optional)
   * @param latitudeGte  (optional)
   * @param latitudeGt  (optional)
   * @param longitudeN  (optional)
   * @param longitudeLte  (optional)
   * @param longitudeLt  (optional)
   * @param longitudeGte  (optional)
   * @param longitudeGt  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param statusN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param groupIdN  (optional)
   * @param groupN  (optional)
   * @param asnN  (optional)
   * @param asnIdN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimSitesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimSitesList200Response> dcimSitesListWithHttpInfo(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesListRequestBuilder(id, name, slug, facility, latitude, longitude, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesList", localVarResponse);
        }
        return new ApiResponse<DcimSitesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimSitesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesListRequestBuilder(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility", facility));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latitude", latitude));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("longitude", longitude));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group", group));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn", asn));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn_id", asnId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__n", facilityN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__ic", facilityIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__nic", facilityNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__iew", facilityIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__niew", facilityNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__isw", facilityIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__nisw", facilityNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__ie", facilityIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("facility__nie", facilityNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latitude__n", latitudeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latitude__lte", latitudeLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latitude__lt", latitudeLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latitude__gte", latitudeGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latitude__gt", latitudeGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("longitude__n", longitudeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("longitude__lte", longitudeLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("longitude__lt", longitudeLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("longitude__gte", longitudeGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("longitude__gt", longitudeGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id__n", groupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group__n", groupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__n", asnN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn_id__n", asnIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @param data  (required)
   * @return Site
   * @throws ApiException if fails to make API call
   */
  public Site dcimSitesPartialUpdate(Integer id, WritableSite data) throws ApiException {
    ApiResponse<Site> localVarResponse = dcimSitesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Site&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Site> dcimSitesPartialUpdateWithHttpInfo(Integer id, WritableSite data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Site>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Site>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesPartialUpdateRequestBuilder(Integer id, WritableSite data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSitesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSitesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @return Site
   * @throws ApiException if fails to make API call
   */
  public Site dcimSitesRead(Integer id) throws ApiException {
    ApiResponse<Site> localVarResponse = dcimSitesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @return ApiResponse&lt;Site&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Site> dcimSitesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesRead", localVarResponse);
        }
        return new ApiResponse<Site>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Site>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSitesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @param data  (required)
   * @return Site
   * @throws ApiException if fails to make API call
   */
  public Site dcimSitesUpdate(Integer id, WritableSite data) throws ApiException {
    ApiResponse<Site> localVarResponse = dcimSitesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this site. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Site&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Site> dcimSitesUpdateWithHttpInfo(Integer id, WritableSite data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimSitesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimSitesUpdate", localVarResponse);
        }
        return new ApiResponse<Site>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Site>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimSitesUpdateRequestBuilder(Integer id, WritableSite data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimSitesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimSitesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/sites/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void dcimVirtualChassisBulkDelete() throws ApiException {
    dcimVirtualChassisBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimVirtualChassisBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VirtualChassis
   * @throws ApiException if fails to make API call
   */
  public VirtualChassis dcimVirtualChassisBulkPartialUpdate(WritableVirtualChassis data) throws ApiException {
    ApiResponse<VirtualChassis> localVarResponse = dcimVirtualChassisBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VirtualChassis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualChassis> dcimVirtualChassisBulkPartialUpdateWithHttpInfo(WritableVirtualChassis data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualChassis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualChassis>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisBulkPartialUpdateRequestBuilder(WritableVirtualChassis data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimVirtualChassisBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VirtualChassis
   * @throws ApiException if fails to make API call
   */
  public VirtualChassis dcimVirtualChassisBulkUpdate(WritableVirtualChassis data) throws ApiException {
    ApiResponse<VirtualChassis> localVarResponse = dcimVirtualChassisBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VirtualChassis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualChassis> dcimVirtualChassisBulkUpdateWithHttpInfo(WritableVirtualChassis data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisBulkUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualChassis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualChassis>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisBulkUpdateRequestBuilder(WritableVirtualChassis data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimVirtualChassisBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return VirtualChassis
   * @throws ApiException if fails to make API call
   */
  public VirtualChassis dcimVirtualChassisCreate(WritableVirtualChassis data) throws ApiException {
    ApiResponse<VirtualChassis> localVarResponse = dcimVirtualChassisCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;VirtualChassis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualChassis> dcimVirtualChassisCreateWithHttpInfo(WritableVirtualChassis data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisCreate", localVarResponse);
        }
        return new ApiResponse<VirtualChassis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualChassis>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisCreateRequestBuilder(WritableVirtualChassis data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimVirtualChassisCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @throws ApiException if fails to make API call
   */
  public void dcimVirtualChassisDelete(Integer id) throws ApiException {
    dcimVirtualChassisDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> dcimVirtualChassisDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimVirtualChassisDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param domain  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param masterId  (optional)
   * @param master  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param domainN  (optional)
   * @param domainIc  (optional)
   * @param domainNic  (optional)
   * @param domainIew  (optional)
   * @param domainNiew  (optional)
   * @param domainIsw  (optional)
   * @param domainNisw  (optional)
   * @param domainIe  (optional)
   * @param domainNie  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param tagN  (optional)
   * @param masterIdN  (optional)
   * @param masterN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return DcimVirtualChassisList200Response
   * @throws ApiException if fails to make API call
   */
  public DcimVirtualChassisList200Response dcimVirtualChassisList(String id, String domain, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, Integer limit, Integer offset) throws ApiException {
    ApiResponse<DcimVirtualChassisList200Response> localVarResponse = dcimVirtualChassisListWithHttpInfo(id, domain, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param domain  (optional)
   * @param name  (optional)
   * @param created  (optional)
   * @param createdGte  (optional)
   * @param createdLte  (optional)
   * @param lastUpdated  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedLte  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param masterId  (optional)
   * @param master  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param domainN  (optional)
   * @param domainIc  (optional)
   * @param domainNic  (optional)
   * @param domainIew  (optional)
   * @param domainNiew  (optional)
   * @param domainIsw  (optional)
   * @param domainNisw  (optional)
   * @param domainIe  (optional)
   * @param domainNie  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param tagN  (optional)
   * @param masterIdN  (optional)
   * @param masterN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;DcimVirtualChassisList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DcimVirtualChassisList200Response> dcimVirtualChassisListWithHttpInfo(String id, String domain, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisListRequestBuilder(id, domain, name, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisList", localVarResponse);
        }
        return new ApiResponse<DcimVirtualChassisList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DcimVirtualChassisList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisListRequestBuilder(String id, String domain, String name, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain", domain));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("master_id", masterId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("master", master));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__n", domainN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__ic", domainIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__nic", domainNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__iew", domainIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__niew", domainNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__isw", domainIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__nisw", domainNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__ie", domainIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("domain__nie", domainNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("master_id__n", masterIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("master__n", masterN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @param data  (required)
   * @return VirtualChassis
   * @throws ApiException if fails to make API call
   */
  public VirtualChassis dcimVirtualChassisPartialUpdate(Integer id, WritableVirtualChassis data) throws ApiException {
    ApiResponse<VirtualChassis> localVarResponse = dcimVirtualChassisPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VirtualChassis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualChassis> dcimVirtualChassisPartialUpdateWithHttpInfo(Integer id, WritableVirtualChassis data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisPartialUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualChassis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualChassis>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisPartialUpdateRequestBuilder(Integer id, WritableVirtualChassis data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimVirtualChassisPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimVirtualChassisPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @return VirtualChassis
   * @throws ApiException if fails to make API call
   */
  public VirtualChassis dcimVirtualChassisRead(Integer id) throws ApiException {
    ApiResponse<VirtualChassis> localVarResponse = dcimVirtualChassisReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @return ApiResponse&lt;VirtualChassis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualChassis> dcimVirtualChassisReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisRead", localVarResponse);
        }
        return new ApiResponse<VirtualChassis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualChassis>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimVirtualChassisRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @param data  (required)
   * @return VirtualChassis
   * @throws ApiException if fails to make API call
   */
  public VirtualChassis dcimVirtualChassisUpdate(Integer id, WritableVirtualChassis data) throws ApiException {
    ApiResponse<VirtualChassis> localVarResponse = dcimVirtualChassisUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this virtual chassis. (required)
   * @param data  (required)
   * @return ApiResponse&lt;VirtualChassis&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualChassis> dcimVirtualChassisUpdateWithHttpInfo(Integer id, WritableVirtualChassis data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = dcimVirtualChassisUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("dcimVirtualChassisUpdate", localVarResponse);
        }
        return new ApiResponse<VirtualChassis>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualChassis>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder dcimVirtualChassisUpdateRequestBuilder(Integer id, WritableVirtualChassis data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling dcimVirtualChassisUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling dcimVirtualChassisUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/dcim/virtual-chassis/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
