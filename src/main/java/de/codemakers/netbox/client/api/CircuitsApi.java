/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiClient;
import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.ApiResponse;
import de.codemakers.netbox.client.Pair;

import de.codemakers.netbox.client.model.Circuit;
import de.codemakers.netbox.client.model.CircuitTermination;
import de.codemakers.netbox.client.model.CircuitType;
import de.codemakers.netbox.client.model.CircuitsCircuitTerminationsList200Response;
import de.codemakers.netbox.client.model.CircuitsCircuitTypesList200Response;
import de.codemakers.netbox.client.model.CircuitsCircuitsList200Response;
import de.codemakers.netbox.client.model.CircuitsProviderNetworksList200Response;
import de.codemakers.netbox.client.model.CircuitsProvidersList200Response;
import de.codemakers.netbox.client.model.Provider;
import de.codemakers.netbox.client.model.ProviderNetwork;
import de.codemakers.netbox.client.model.WritableCircuit;
import de.codemakers.netbox.client.model.WritableCircuitTermination;
import de.codemakers.netbox.client.model.WritableProvider;
import de.codemakers.netbox.client.model.WritableProviderNetwork;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T15:10:46.540964900+02:00[Europe/Berlin]")
public class CircuitsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CircuitsApi() {
    this(new ApiClient());
  }

  public CircuitsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void circuitsCircuitTerminationsBulkDelete() throws ApiException {
    circuitsCircuitTerminationsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsCircuitTerminationsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CircuitTermination
   * @throws ApiException if fails to make API call
   */
  public CircuitTermination circuitsCircuitTerminationsBulkPartialUpdate(WritableCircuitTermination data) throws ApiException {
    ApiResponse<CircuitTermination> localVarResponse = circuitsCircuitTerminationsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CircuitTermination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitTermination> circuitsCircuitTerminationsBulkPartialUpdateWithHttpInfo(WritableCircuitTermination data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitTermination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitTermination>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsBulkPartialUpdateRequestBuilder(WritableCircuitTermination data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTerminationsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CircuitTermination
   * @throws ApiException if fails to make API call
   */
  public CircuitTermination circuitsCircuitTerminationsBulkUpdate(WritableCircuitTermination data) throws ApiException {
    ApiResponse<CircuitTermination> localVarResponse = circuitsCircuitTerminationsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CircuitTermination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitTermination> circuitsCircuitTerminationsBulkUpdateWithHttpInfo(WritableCircuitTermination data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitTermination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitTermination>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsBulkUpdateRequestBuilder(WritableCircuitTermination data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTerminationsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CircuitTermination
   * @throws ApiException if fails to make API call
   */
  public CircuitTermination circuitsCircuitTerminationsCreate(WritableCircuitTermination data) throws ApiException {
    ApiResponse<CircuitTermination> localVarResponse = circuitsCircuitTerminationsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CircuitTermination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitTermination> circuitsCircuitTerminationsCreateWithHttpInfo(WritableCircuitTermination data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsCreate", localVarResponse);
        }
        return new ApiResponse<CircuitTermination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitTermination>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsCreateRequestBuilder(WritableCircuitTermination data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTerminationsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @throws ApiException if fails to make API call
   */
  public void circuitsCircuitTerminationsDelete(Integer id) throws ApiException {
    circuitsCircuitTerminationsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsCircuitTerminationsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTerminationsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param termSide  (optional)
   * @param portSpeed  (optional)
   * @param upstreamSpeed  (optional)
   * @param xconnectId  (optional)
   * @param description  (optional)
   * @param cableEnd  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param circuitId  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param providerNetworkId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param termSideN  (optional)
   * @param portSpeedN  (optional)
   * @param portSpeedLte  (optional)
   * @param portSpeedLt  (optional)
   * @param portSpeedGte  (optional)
   * @param portSpeedGt  (optional)
   * @param upstreamSpeedN  (optional)
   * @param upstreamSpeedLte  (optional)
   * @param upstreamSpeedLt  (optional)
   * @param upstreamSpeedGte  (optional)
   * @param upstreamSpeedGt  (optional)
   * @param xconnectIdN  (optional)
   * @param xconnectIdIc  (optional)
   * @param xconnectIdNic  (optional)
   * @param xconnectIdIew  (optional)
   * @param xconnectIdNiew  (optional)
   * @param xconnectIdIsw  (optional)
   * @param xconnectIdNisw  (optional)
   * @param xconnectIdIe  (optional)
   * @param xconnectIdNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param cableEndN  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param circuitIdN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param providerNetworkIdN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return CircuitsCircuitTerminationsList200Response
   * @throws ApiException if fails to make API call
   */
  public CircuitsCircuitTerminationsList200Response circuitsCircuitTerminationsList(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<CircuitsCircuitTerminationsList200Response> localVarResponse = circuitsCircuitTerminationsListWithHttpInfo(id, termSide, portSpeed, upstreamSpeed, xconnectId, description, cableEnd, created, lastUpdated, q, tag, cabled, circuitId, siteId, site, providerNetworkId, idN, idLte, idLt, idGte, idGt, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, circuitIdN, siteIdN, siteN, providerNetworkIdN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param termSide  (optional)
   * @param portSpeed  (optional)
   * @param upstreamSpeed  (optional)
   * @param xconnectId  (optional)
   * @param description  (optional)
   * @param cableEnd  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param cabled  (optional)
   * @param circuitId  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param providerNetworkId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param termSideN  (optional)
   * @param portSpeedN  (optional)
   * @param portSpeedLte  (optional)
   * @param portSpeedLt  (optional)
   * @param portSpeedGte  (optional)
   * @param portSpeedGt  (optional)
   * @param upstreamSpeedN  (optional)
   * @param upstreamSpeedLte  (optional)
   * @param upstreamSpeedLt  (optional)
   * @param upstreamSpeedGte  (optional)
   * @param upstreamSpeedGt  (optional)
   * @param xconnectIdN  (optional)
   * @param xconnectIdIc  (optional)
   * @param xconnectIdNic  (optional)
   * @param xconnectIdIew  (optional)
   * @param xconnectIdNiew  (optional)
   * @param xconnectIdIsw  (optional)
   * @param xconnectIdNisw  (optional)
   * @param xconnectIdIe  (optional)
   * @param xconnectIdNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param cableEndN  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param circuitIdN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param providerNetworkIdN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;CircuitsCircuitTerminationsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitsCircuitTerminationsList200Response> circuitsCircuitTerminationsListWithHttpInfo(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsListRequestBuilder(id, termSide, portSpeed, upstreamSpeed, xconnectId, description, cableEnd, created, lastUpdated, q, tag, cabled, circuitId, siteId, site, providerNetworkId, idN, idLte, idLt, idGte, idGt, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, circuitIdN, siteIdN, siteN, providerNetworkIdN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsList", localVarResponse);
        }
        return new ApiResponse<CircuitsCircuitTerminationsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitsCircuitTerminationsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsListRequestBuilder(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("term_side", termSide));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port_speed", portSpeed));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("upstream_speed", upstreamSpeed));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id", xconnectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cable_end", cableEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cabled", cabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("circuit_id", circuitId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_network_id", providerNetworkId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("term_side__n", termSideN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port_speed__n", portSpeedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port_speed__lte", portSpeedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port_speed__lt", portSpeedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port_speed__gte", portSpeedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port_speed__gt", portSpeedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("upstream_speed__n", upstreamSpeedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("upstream_speed__lte", upstreamSpeedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("upstream_speed__lt", upstreamSpeedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("upstream_speed__gte", upstreamSpeedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("upstream_speed__gt", upstreamSpeedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__n", xconnectIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__ic", xconnectIdIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__nic", xconnectIdNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__iew", xconnectIdIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__niew", xconnectIdNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__isw", xconnectIdIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__nisw", xconnectIdNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__ie", xconnectIdIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("xconnect_id__nie", xconnectIdNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cable_end__n", cableEndN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("circuit_id__n", circuitIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_network_id__n", providerNetworkIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @param data  (required)
   * @return CircuitTermination
   * @throws ApiException if fails to make API call
   */
  public CircuitTermination circuitsCircuitTerminationsPartialUpdate(Integer id, WritableCircuitTermination data) throws ApiException {
    ApiResponse<CircuitTermination> localVarResponse = circuitsCircuitTerminationsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CircuitTermination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitTermination> circuitsCircuitTerminationsPartialUpdateWithHttpInfo(Integer id, WritableCircuitTermination data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitTermination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitTermination>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsPartialUpdateRequestBuilder(Integer id, WritableCircuitTermination data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTerminationsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTerminationsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Return all CablePaths which traverse a given pass-through port.
   * @param id A unique integer value identifying this circuit termination. (required)
   * @return CircuitTermination
   * @throws ApiException if fails to make API call
   */
  public CircuitTermination circuitsCircuitTerminationsPaths(Integer id) throws ApiException {
    ApiResponse<CircuitTermination> localVarResponse = circuitsCircuitTerminationsPathsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Return all CablePaths which traverse a given pass-through port.
   * @param id A unique integer value identifying this circuit termination. (required)
   * @return ApiResponse&lt;CircuitTermination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitTermination> circuitsCircuitTerminationsPathsWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsPathsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsPaths", localVarResponse);
        }
        return new ApiResponse<CircuitTermination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitTermination>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsPathsRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTerminationsPaths");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/{id}/paths/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @return CircuitTermination
   * @throws ApiException if fails to make API call
   */
  public CircuitTermination circuitsCircuitTerminationsRead(Integer id) throws ApiException {
    ApiResponse<CircuitTermination> localVarResponse = circuitsCircuitTerminationsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @return ApiResponse&lt;CircuitTermination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitTermination> circuitsCircuitTerminationsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsRead", localVarResponse);
        }
        return new ApiResponse<CircuitTermination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitTermination>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTerminationsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @param data  (required)
   * @return CircuitTermination
   * @throws ApiException if fails to make API call
   */
  public CircuitTermination circuitsCircuitTerminationsUpdate(Integer id, WritableCircuitTermination data) throws ApiException {
    ApiResponse<CircuitTermination> localVarResponse = circuitsCircuitTerminationsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit termination. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CircuitTermination&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitTermination> circuitsCircuitTerminationsUpdateWithHttpInfo(Integer id, WritableCircuitTermination data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTerminationsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTerminationsUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitTermination>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitTermination>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTerminationsUpdateRequestBuilder(Integer id, WritableCircuitTermination data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTerminationsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTerminationsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-terminations/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void circuitsCircuitTypesBulkDelete() throws ApiException {
    circuitsCircuitTypesBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsCircuitTypesBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CircuitType
   * @throws ApiException if fails to make API call
   */
  public CircuitType circuitsCircuitTypesBulkPartialUpdate(CircuitType data) throws ApiException {
    ApiResponse<CircuitType> localVarResponse = circuitsCircuitTypesBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CircuitType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitType> circuitsCircuitTypesBulkPartialUpdateWithHttpInfo(CircuitType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesBulkPartialUpdateRequestBuilder(CircuitType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTypesBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CircuitType
   * @throws ApiException if fails to make API call
   */
  public CircuitType circuitsCircuitTypesBulkUpdate(CircuitType data) throws ApiException {
    ApiResponse<CircuitType> localVarResponse = circuitsCircuitTypesBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CircuitType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitType> circuitsCircuitTypesBulkUpdateWithHttpInfo(CircuitType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesBulkUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesBulkUpdateRequestBuilder(CircuitType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTypesBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return CircuitType
   * @throws ApiException if fails to make API call
   */
  public CircuitType circuitsCircuitTypesCreate(CircuitType data) throws ApiException {
    ApiResponse<CircuitType> localVarResponse = circuitsCircuitTypesCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;CircuitType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitType> circuitsCircuitTypesCreateWithHttpInfo(CircuitType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesCreate", localVarResponse);
        }
        return new ApiResponse<CircuitType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesCreateRequestBuilder(CircuitType data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTypesCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @throws ApiException if fails to make API call
   */
  public void circuitsCircuitTypesDelete(Integer id) throws ApiException {
    circuitsCircuitTypesDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsCircuitTypesDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTypesDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return CircuitsCircuitTypesList200Response
   * @throws ApiException if fails to make API call
   */
  public CircuitsCircuitTypesList200Response circuitsCircuitTypesList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<CircuitsCircuitTypesList200Response> localVarResponse = circuitsCircuitTypesListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;CircuitsCircuitTypesList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitsCircuitTypesList200Response> circuitsCircuitTypesListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesListRequestBuilder(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesList", localVarResponse);
        }
        return new ApiResponse<CircuitsCircuitTypesList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitsCircuitTypesList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesListRequestBuilder(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @param data  (required)
   * @return CircuitType
   * @throws ApiException if fails to make API call
   */
  public CircuitType circuitsCircuitTypesPartialUpdate(Integer id, CircuitType data) throws ApiException {
    ApiResponse<CircuitType> localVarResponse = circuitsCircuitTypesPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CircuitType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitType> circuitsCircuitTypesPartialUpdateWithHttpInfo(Integer id, CircuitType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesPartialUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesPartialUpdateRequestBuilder(Integer id, CircuitType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTypesPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTypesPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @return CircuitType
   * @throws ApiException if fails to make API call
   */
  public CircuitType circuitsCircuitTypesRead(Integer id) throws ApiException {
    ApiResponse<CircuitType> localVarResponse = circuitsCircuitTypesReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @return ApiResponse&lt;CircuitType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitType> circuitsCircuitTypesReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesRead", localVarResponse);
        }
        return new ApiResponse<CircuitType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTypesRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @param data  (required)
   * @return CircuitType
   * @throws ApiException if fails to make API call
   */
  public CircuitType circuitsCircuitTypesUpdate(Integer id, CircuitType data) throws ApiException {
    ApiResponse<CircuitType> localVarResponse = circuitsCircuitTypesUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit type. (required)
   * @param data  (required)
   * @return ApiResponse&lt;CircuitType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitType> circuitsCircuitTypesUpdateWithHttpInfo(Integer id, CircuitType data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitTypesUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitTypesUpdate", localVarResponse);
        }
        return new ApiResponse<CircuitType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitType>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitTypesUpdateRequestBuilder(Integer id, CircuitType data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitTypesUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitTypesUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuit-types/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void circuitsCircuitsBulkDelete() throws ApiException {
    circuitsCircuitsBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsCircuitsBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Circuit
   * @throws ApiException if fails to make API call
   */
  public Circuit circuitsCircuitsBulkPartialUpdate(WritableCircuit data) throws ApiException {
    ApiResponse<Circuit> localVarResponse = circuitsCircuitsBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Circuit&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Circuit> circuitsCircuitsBulkPartialUpdateWithHttpInfo(WritableCircuit data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Circuit>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Circuit>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsBulkPartialUpdateRequestBuilder(WritableCircuit data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitsBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Circuit
   * @throws ApiException if fails to make API call
   */
  public Circuit circuitsCircuitsBulkUpdate(WritableCircuit data) throws ApiException {
    ApiResponse<Circuit> localVarResponse = circuitsCircuitsBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Circuit&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Circuit> circuitsCircuitsBulkUpdateWithHttpInfo(WritableCircuit data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Circuit>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Circuit>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsBulkUpdateRequestBuilder(WritableCircuit data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitsBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Circuit
   * @throws ApiException if fails to make API call
   */
  public Circuit circuitsCircuitsCreate(WritableCircuit data) throws ApiException {
    ApiResponse<Circuit> localVarResponse = circuitsCircuitsCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Circuit&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Circuit> circuitsCircuitsCreateWithHttpInfo(WritableCircuit data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsCreate", localVarResponse);
        }
        return new ApiResponse<Circuit>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Circuit>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsCreateRequestBuilder(WritableCircuit data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @throws ApiException if fails to make API call
   */
  public void circuitsCircuitsDelete(Integer id) throws ApiException {
    circuitsCircuitsDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsCircuitsDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param cid  (optional)
   * @param description  (optional)
   * @param installDate  (optional)
   * @param terminationDate  (optional)
   * @param commitRate  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param providerId  (optional)
   * @param provider  (optional)
   * @param providerNetworkId  (optional)
   * @param typeId  (optional)
   * @param type  (optional)
   * @param status  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param cidN  (optional)
   * @param cidIc  (optional)
   * @param cidNic  (optional)
   * @param cidIew  (optional)
   * @param cidNiew  (optional)
   * @param cidIsw  (optional)
   * @param cidNisw  (optional)
   * @param cidIe  (optional)
   * @param cidNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param installDateN  (optional)
   * @param installDateLte  (optional)
   * @param installDateLt  (optional)
   * @param installDateGte  (optional)
   * @param installDateGt  (optional)
   * @param terminationDateN  (optional)
   * @param terminationDateLte  (optional)
   * @param terminationDateLt  (optional)
   * @param terminationDateGte  (optional)
   * @param terminationDateGt  (optional)
   * @param commitRateN  (optional)
   * @param commitRateLte  (optional)
   * @param commitRateLt  (optional)
   * @param commitRateGte  (optional)
   * @param commitRateGt  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param providerIdN  (optional)
   * @param providerN  (optional)
   * @param providerNetworkIdN  (optional)
   * @param typeIdN  (optional)
   * @param typeN  (optional)
   * @param statusN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return CircuitsCircuitsList200Response
   * @throws ApiException if fails to make API call
   */
  public CircuitsCircuitsList200Response circuitsCircuitsList(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<CircuitsCircuitsList200Response> localVarResponse = circuitsCircuitsListWithHttpInfo(id, cid, description, installDate, terminationDate, commitRate, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, providerId, provider, providerNetworkId, typeId, type, status, regionId, region, siteGroupId, siteGroup, siteId, site, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, terminationDateN, terminationDateLte, terminationDateLt, terminationDateGte, terminationDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, providerIdN, providerN, providerNetworkIdN, typeIdN, typeN, statusN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param cid  (optional)
   * @param description  (optional)
   * @param installDate  (optional)
   * @param terminationDate  (optional)
   * @param commitRate  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param tenantGroupId  (optional)
   * @param tenantGroup  (optional)
   * @param tenantId  (optional)
   * @param tenant  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param providerId  (optional)
   * @param provider  (optional)
   * @param providerNetworkId  (optional)
   * @param typeId  (optional)
   * @param type  (optional)
   * @param status  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param cidN  (optional)
   * @param cidIc  (optional)
   * @param cidNic  (optional)
   * @param cidIew  (optional)
   * @param cidNiew  (optional)
   * @param cidIsw  (optional)
   * @param cidNisw  (optional)
   * @param cidIe  (optional)
   * @param cidNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param installDateN  (optional)
   * @param installDateLte  (optional)
   * @param installDateLt  (optional)
   * @param installDateGte  (optional)
   * @param installDateGt  (optional)
   * @param terminationDateN  (optional)
   * @param terminationDateLte  (optional)
   * @param terminationDateLt  (optional)
   * @param terminationDateGte  (optional)
   * @param terminationDateGt  (optional)
   * @param commitRateN  (optional)
   * @param commitRateLte  (optional)
   * @param commitRateLt  (optional)
   * @param commitRateGte  (optional)
   * @param commitRateGt  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param tenantGroupIdN  (optional)
   * @param tenantGroupN  (optional)
   * @param tenantIdN  (optional)
   * @param tenantN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param providerIdN  (optional)
   * @param providerN  (optional)
   * @param providerNetworkIdN  (optional)
   * @param typeIdN  (optional)
   * @param typeN  (optional)
   * @param statusN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;CircuitsCircuitsList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitsCircuitsList200Response> circuitsCircuitsListWithHttpInfo(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsListRequestBuilder(id, cid, description, installDate, terminationDate, commitRate, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, providerId, provider, providerNetworkId, typeId, type, status, regionId, region, siteGroupId, siteGroup, siteId, site, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, terminationDateN, terminationDateLte, terminationDateLt, terminationDateGte, terminationDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, providerIdN, providerN, providerNetworkIdN, typeIdN, typeN, statusN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsList", localVarResponse);
        }
        return new ApiResponse<CircuitsCircuitsList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitsCircuitsList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsListRequestBuilder(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid", cid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("install_date", installDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_date", terminationDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("commit_rate", commitRate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id", tenantGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group", tenantGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant", tenant));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_id", providerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider", provider));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_network_id", providerNetworkId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type_id", typeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__n", cidN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__ic", cidIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__nic", cidNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__iew", cidIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__niew", cidNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__isw", cidIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__nisw", cidNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__ie", cidIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cid__nie", cidNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("install_date__n", installDateN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("install_date__lte", installDateLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("install_date__lt", installDateLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("install_date__gte", installDateGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("install_date__gt", installDateGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_date__n", terminationDateN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_date__lte", terminationDateLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_date__lt", terminationDateLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_date__gte", terminationDateGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("termination_date__gt", terminationDateGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("commit_rate__n", commitRateN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("commit_rate__lte", commitRateLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("commit_rate__lt", commitRateLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("commit_rate__gte", commitRateGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("commit_rate__gt", commitRateGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group_id__n", tenantGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_group__n", tenantGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant_id__n", tenantIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenant__n", tenantN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_id__n", providerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider__n", providerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_network_id__n", providerNetworkIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type_id__n", typeIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type__n", typeN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status__n", statusN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @param data  (required)
   * @return Circuit
   * @throws ApiException if fails to make API call
   */
  public Circuit circuitsCircuitsPartialUpdate(Integer id, WritableCircuit data) throws ApiException {
    ApiResponse<Circuit> localVarResponse = circuitsCircuitsPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Circuit&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Circuit> circuitsCircuitsPartialUpdateWithHttpInfo(Integer id, WritableCircuit data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Circuit>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Circuit>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsPartialUpdateRequestBuilder(Integer id, WritableCircuit data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitsPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitsPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @return Circuit
   * @throws ApiException if fails to make API call
   */
  public Circuit circuitsCircuitsRead(Integer id) throws ApiException {
    ApiResponse<Circuit> localVarResponse = circuitsCircuitsReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @return ApiResponse&lt;Circuit&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Circuit> circuitsCircuitsReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsRead", localVarResponse);
        }
        return new ApiResponse<Circuit>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Circuit>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitsRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @param data  (required)
   * @return Circuit
   * @throws ApiException if fails to make API call
   */
  public Circuit circuitsCircuitsUpdate(Integer id, WritableCircuit data) throws ApiException {
    ApiResponse<Circuit> localVarResponse = circuitsCircuitsUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this circuit. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Circuit&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Circuit> circuitsCircuitsUpdateWithHttpInfo(Integer id, WritableCircuit data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsCircuitsUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsCircuitsUpdate", localVarResponse);
        }
        return new ApiResponse<Circuit>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Circuit>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsCircuitsUpdateRequestBuilder(Integer id, WritableCircuit data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsCircuitsUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsCircuitsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/circuits/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void circuitsProviderNetworksBulkDelete() throws ApiException {
    circuitsProviderNetworksBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsProviderNetworksBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ProviderNetwork
   * @throws ApiException if fails to make API call
   */
  public ProviderNetwork circuitsProviderNetworksBulkPartialUpdate(WritableProviderNetwork data) throws ApiException {
    ApiResponse<ProviderNetwork> localVarResponse = circuitsProviderNetworksBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ProviderNetwork&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProviderNetwork> circuitsProviderNetworksBulkPartialUpdateWithHttpInfo(WritableProviderNetwork data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ProviderNetwork>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProviderNetwork>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksBulkPartialUpdateRequestBuilder(WritableProviderNetwork data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProviderNetworksBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ProviderNetwork
   * @throws ApiException if fails to make API call
   */
  public ProviderNetwork circuitsProviderNetworksBulkUpdate(WritableProviderNetwork data) throws ApiException {
    ApiResponse<ProviderNetwork> localVarResponse = circuitsProviderNetworksBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ProviderNetwork&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProviderNetwork> circuitsProviderNetworksBulkUpdateWithHttpInfo(WritableProviderNetwork data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksBulkUpdate", localVarResponse);
        }
        return new ApiResponse<ProviderNetwork>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProviderNetwork>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksBulkUpdateRequestBuilder(WritableProviderNetwork data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProviderNetworksBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return ProviderNetwork
   * @throws ApiException if fails to make API call
   */
  public ProviderNetwork circuitsProviderNetworksCreate(WritableProviderNetwork data) throws ApiException {
    ApiResponse<ProviderNetwork> localVarResponse = circuitsProviderNetworksCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;ProviderNetwork&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProviderNetwork> circuitsProviderNetworksCreateWithHttpInfo(WritableProviderNetwork data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksCreate", localVarResponse);
        }
        return new ApiResponse<ProviderNetwork>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProviderNetwork>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksCreateRequestBuilder(WritableProviderNetwork data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProviderNetworksCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @throws ApiException if fails to make API call
   */
  public void circuitsProviderNetworksDelete(Integer id) throws ApiException {
    circuitsProviderNetworksDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsProviderNetworksDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProviderNetworksDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param serviceId  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param providerId  (optional)
   * @param provider  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param serviceIdN  (optional)
   * @param serviceIdIc  (optional)
   * @param serviceIdNic  (optional)
   * @param serviceIdIew  (optional)
   * @param serviceIdNiew  (optional)
   * @param serviceIdIsw  (optional)
   * @param serviceIdNisw  (optional)
   * @param serviceIdIe  (optional)
   * @param serviceIdNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param providerIdN  (optional)
   * @param providerN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return CircuitsProviderNetworksList200Response
   * @throws ApiException if fails to make API call
   */
  public CircuitsProviderNetworksList200Response circuitsProviderNetworksList(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<CircuitsProviderNetworksList200Response> localVarResponse = circuitsProviderNetworksListWithHttpInfo(id, name, serviceId, description, created, lastUpdated, q, tag, providerId, provider, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, serviceIdN, serviceIdIc, serviceIdNic, serviceIdIew, serviceIdNiew, serviceIdIsw, serviceIdNisw, serviceIdIe, serviceIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, providerIdN, providerN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param serviceId  (optional)
   * @param description  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param providerId  (optional)
   * @param provider  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param serviceIdN  (optional)
   * @param serviceIdIc  (optional)
   * @param serviceIdNic  (optional)
   * @param serviceIdIew  (optional)
   * @param serviceIdNiew  (optional)
   * @param serviceIdIsw  (optional)
   * @param serviceIdNisw  (optional)
   * @param serviceIdIe  (optional)
   * @param serviceIdNie  (optional)
   * @param descriptionN  (optional)
   * @param descriptionIc  (optional)
   * @param descriptionNic  (optional)
   * @param descriptionIew  (optional)
   * @param descriptionNiew  (optional)
   * @param descriptionIsw  (optional)
   * @param descriptionNisw  (optional)
   * @param descriptionIe  (optional)
   * @param descriptionNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param providerIdN  (optional)
   * @param providerN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;CircuitsProviderNetworksList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitsProviderNetworksList200Response> circuitsProviderNetworksListWithHttpInfo(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksListRequestBuilder(id, name, serviceId, description, created, lastUpdated, q, tag, providerId, provider, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, serviceIdN, serviceIdIc, serviceIdNic, serviceIdIew, serviceIdNiew, serviceIdIsw, serviceIdNisw, serviceIdIe, serviceIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, providerIdN, providerN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksList", localVarResponse);
        }
        return new ApiResponse<CircuitsProviderNetworksList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitsProviderNetworksList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksListRequestBuilder(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id", serviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_id", providerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider", provider));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__n", serviceIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__ic", serviceIdIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__nic", serviceIdNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__iew", serviceIdIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__niew", serviceIdNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__isw", serviceIdIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__nisw", serviceIdNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__ie", serviceIdIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("service_id__nie", serviceIdNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__n", descriptionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ic", descriptionIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nic", descriptionNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__iew", descriptionIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__niew", descriptionNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__isw", descriptionIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nisw", descriptionNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__ie", descriptionIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description__nie", descriptionNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider_id__n", providerIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("provider__n", providerN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @param data  (required)
   * @return ProviderNetwork
   * @throws ApiException if fails to make API call
   */
  public ProviderNetwork circuitsProviderNetworksPartialUpdate(Integer id, WritableProviderNetwork data) throws ApiException {
    ApiResponse<ProviderNetwork> localVarResponse = circuitsProviderNetworksPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ProviderNetwork&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProviderNetwork> circuitsProviderNetworksPartialUpdateWithHttpInfo(Integer id, WritableProviderNetwork data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksPartialUpdate", localVarResponse);
        }
        return new ApiResponse<ProviderNetwork>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProviderNetwork>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksPartialUpdateRequestBuilder(Integer id, WritableProviderNetwork data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProviderNetworksPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProviderNetworksPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @return ProviderNetwork
   * @throws ApiException if fails to make API call
   */
  public ProviderNetwork circuitsProviderNetworksRead(Integer id) throws ApiException {
    ApiResponse<ProviderNetwork> localVarResponse = circuitsProviderNetworksReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @return ApiResponse&lt;ProviderNetwork&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProviderNetwork> circuitsProviderNetworksReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksRead", localVarResponse);
        }
        return new ApiResponse<ProviderNetwork>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProviderNetwork>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProviderNetworksRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @param data  (required)
   * @return ProviderNetwork
   * @throws ApiException if fails to make API call
   */
  public ProviderNetwork circuitsProviderNetworksUpdate(Integer id, WritableProviderNetwork data) throws ApiException {
    ApiResponse<ProviderNetwork> localVarResponse = circuitsProviderNetworksUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider network. (required)
   * @param data  (required)
   * @return ApiResponse&lt;ProviderNetwork&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProviderNetwork> circuitsProviderNetworksUpdateWithHttpInfo(Integer id, WritableProviderNetwork data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProviderNetworksUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProviderNetworksUpdate", localVarResponse);
        }
        return new ApiResponse<ProviderNetwork>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProviderNetwork>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProviderNetworksUpdateRequestBuilder(Integer id, WritableProviderNetwork data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProviderNetworksUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProviderNetworksUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/provider-networks/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @throws ApiException if fails to make API call
   */
  public void circuitsProvidersBulkDelete() throws ApiException {
    circuitsProvidersBulkDeleteWithHttpInfo();
  }

  /**
   * 
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsProvidersBulkDeleteWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersBulkDeleteRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersBulkDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersBulkDeleteRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Provider
   * @throws ApiException if fails to make API call
   */
  public Provider circuitsProvidersBulkPartialUpdate(WritableProvider data) throws ApiException {
    ApiResponse<Provider> localVarResponse = circuitsProvidersBulkPartialUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Provider&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Provider> circuitsProvidersBulkPartialUpdateWithHttpInfo(WritableProvider data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersBulkPartialUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersBulkPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Provider>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Provider>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersBulkPartialUpdateRequestBuilder(WritableProvider data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProvidersBulkPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Provider
   * @throws ApiException if fails to make API call
   */
  public Provider circuitsProvidersBulkUpdate(WritableProvider data) throws ApiException {
    ApiResponse<Provider> localVarResponse = circuitsProvidersBulkUpdateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Provider&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Provider> circuitsProvidersBulkUpdateWithHttpInfo(WritableProvider data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersBulkUpdateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersBulkUpdate", localVarResponse);
        }
        return new ApiResponse<Provider>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Provider>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersBulkUpdateRequestBuilder(WritableProvider data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProvidersBulkUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param data  (required)
   * @return Provider
   * @throws ApiException if fails to make API call
   */
  public Provider circuitsProvidersCreate(WritableProvider data) throws ApiException {
    ApiResponse<Provider> localVarResponse = circuitsProvidersCreateWithHttpInfo(data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param data  (required)
   * @return ApiResponse&lt;Provider&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Provider> circuitsProvidersCreateWithHttpInfo(WritableProvider data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersCreateRequestBuilder(data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersCreate", localVarResponse);
        }
        return new ApiResponse<Provider>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Provider>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersCreateRequestBuilder(WritableProvider data) throws ApiException {
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProvidersCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @throws ApiException if fails to make API call
   */
  public void circuitsProvidersDelete(Integer id) throws ApiException {
    circuitsProvidersDeleteWithHttpInfo(id);
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> circuitsProvidersDeleteWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersDelete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersDeleteRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProvidersDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param asn  (optional)
   * @param account  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param asnId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param asnN  (optional)
   * @param asnLte  (optional)
   * @param asnLt  (optional)
   * @param asnGte  (optional)
   * @param asnGt  (optional)
   * @param accountN  (optional)
   * @param accountIc  (optional)
   * @param accountNic  (optional)
   * @param accountIew  (optional)
   * @param accountNiew  (optional)
   * @param accountIsw  (optional)
   * @param accountNisw  (optional)
   * @param accountIe  (optional)
   * @param accountNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param asnIdN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return CircuitsProvidersList200Response
   * @throws ApiException if fails to make API call
   */
  public CircuitsProvidersList200Response circuitsProvidersList(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
    ApiResponse<CircuitsProvidersList200Response> localVarResponse = circuitsProvidersListWithHttpInfo(id, name, slug, asn, account, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, asnIdN, ordering, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * 
   * Overrides ListModelMixin to allow processing ExportTemplates.
   * @param id  (optional)
   * @param name  (optional)
   * @param slug  (optional)
   * @param asn  (optional)
   * @param account  (optional)
   * @param created  (optional)
   * @param lastUpdated  (optional)
   * @param q  (optional)
   * @param tag  (optional)
   * @param contact  (optional)
   * @param contactRole  (optional)
   * @param contactGroup  (optional)
   * @param regionId  (optional)
   * @param region  (optional)
   * @param siteGroupId  (optional)
   * @param siteGroup  (optional)
   * @param siteId  (optional)
   * @param site  (optional)
   * @param asnId  (optional)
   * @param idN  (optional)
   * @param idLte  (optional)
   * @param idLt  (optional)
   * @param idGte  (optional)
   * @param idGt  (optional)
   * @param nameN  (optional)
   * @param nameIc  (optional)
   * @param nameNic  (optional)
   * @param nameIew  (optional)
   * @param nameNiew  (optional)
   * @param nameIsw  (optional)
   * @param nameNisw  (optional)
   * @param nameIe  (optional)
   * @param nameNie  (optional)
   * @param slugN  (optional)
   * @param slugIc  (optional)
   * @param slugNic  (optional)
   * @param slugIew  (optional)
   * @param slugNiew  (optional)
   * @param slugIsw  (optional)
   * @param slugNisw  (optional)
   * @param slugIe  (optional)
   * @param slugNie  (optional)
   * @param asnN  (optional)
   * @param asnLte  (optional)
   * @param asnLt  (optional)
   * @param asnGte  (optional)
   * @param asnGt  (optional)
   * @param accountN  (optional)
   * @param accountIc  (optional)
   * @param accountNic  (optional)
   * @param accountIew  (optional)
   * @param accountNiew  (optional)
   * @param accountIsw  (optional)
   * @param accountNisw  (optional)
   * @param accountIe  (optional)
   * @param accountNie  (optional)
   * @param createdN  (optional)
   * @param createdLte  (optional)
   * @param createdLt  (optional)
   * @param createdGte  (optional)
   * @param createdGt  (optional)
   * @param lastUpdatedN  (optional)
   * @param lastUpdatedLte  (optional)
   * @param lastUpdatedLt  (optional)
   * @param lastUpdatedGte  (optional)
   * @param lastUpdatedGt  (optional)
   * @param tagN  (optional)
   * @param contactN  (optional)
   * @param contactRoleN  (optional)
   * @param contactGroupN  (optional)
   * @param regionIdN  (optional)
   * @param regionN  (optional)
   * @param siteGroupIdN  (optional)
   * @param siteGroupN  (optional)
   * @param siteIdN  (optional)
   * @param siteN  (optional)
   * @param asnIdN  (optional)
   * @param ordering Which field to use when ordering the results. (optional)
   * @param limit Number of results to return per page. (optional)
   * @param offset The initial index from which to return the results. (optional)
   * @return ApiResponse&lt;CircuitsProvidersList200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CircuitsProvidersList200Response> circuitsProvidersListWithHttpInfo(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersListRequestBuilder(id, name, slug, asn, account, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, asnIdN, ordering, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersList", localVarResponse);
        }
        return new ApiResponse<CircuitsProvidersList200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CircuitsProvidersList200Response>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersListRequestBuilder(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug", slug));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn", asn));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account", account));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated", lastUpdated));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("q", q));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact", contact));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role", contactRole));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group", contactGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id", regionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region", region));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id", siteGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group", siteGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id", siteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site", site));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn_id", asnId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__n", idN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lte", idLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__lt", idLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gte", idGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id__gt", idGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__n", nameN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ic", nameIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nic", nameNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__iew", nameIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__niew", nameNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__isw", nameIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nisw", nameNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__ie", nameIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name__nie", nameNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__n", slugN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ic", slugIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nic", slugNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__iew", slugIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__niew", slugNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__isw", slugIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nisw", slugNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__ie", slugIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("slug__nie", slugNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__n", asnN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__lte", asnLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__lt", asnLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__gte", asnGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn__gt", asnGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__n", accountN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__ic", accountIc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__nic", accountNic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__iew", accountIew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__niew", accountNiew));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__isw", accountIsw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__nisw", accountNisw));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__ie", accountIe));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("account__nie", accountNie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__n", createdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lte", createdLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__lt", createdLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gte", createdGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created__gt", createdGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__n", lastUpdatedN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lte", lastUpdatedLte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__lt", lastUpdatedLt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gte", lastUpdatedGte));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("last_updated__gt", lastUpdatedGt));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag__n", tagN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact__n", contactN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_role__n", contactRoleN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("contact_group__n", contactGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region_id__n", regionIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("region__n", regionN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group_id__n", siteGroupIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_group__n", siteGroupN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site_id__n", siteIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("site__n", siteN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("asn_id__n", asnIdN));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ordering", ordering));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @param data  (required)
   * @return Provider
   * @throws ApiException if fails to make API call
   */
  public Provider circuitsProvidersPartialUpdate(Integer id, WritableProvider data) throws ApiException {
    ApiResponse<Provider> localVarResponse = circuitsProvidersPartialUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Provider&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Provider> circuitsProvidersPartialUpdateWithHttpInfo(Integer id, WritableProvider data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersPartialUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersPartialUpdate", localVarResponse);
        }
        return new ApiResponse<Provider>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Provider>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersPartialUpdateRequestBuilder(Integer id, WritableProvider data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProvidersPartialUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProvidersPartialUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @return Provider
   * @throws ApiException if fails to make API call
   */
  public Provider circuitsProvidersRead(Integer id) throws ApiException {
    ApiResponse<Provider> localVarResponse = circuitsProvidersReadWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @return ApiResponse&lt;Provider&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Provider> circuitsProvidersReadWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersReadRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersRead", localVarResponse);
        }
        return new ApiResponse<Provider>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Provider>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersReadRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProvidersRead");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @param data  (required)
   * @return Provider
   * @throws ApiException if fails to make API call
   */
  public Provider circuitsProvidersUpdate(Integer id, WritableProvider data) throws ApiException {
    ApiResponse<Provider> localVarResponse = circuitsProvidersUpdateWithHttpInfo(id, data);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id A unique integer value identifying this provider. (required)
   * @param data  (required)
   * @return ApiResponse&lt;Provider&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Provider> circuitsProvidersUpdateWithHttpInfo(Integer id, WritableProvider data) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = circuitsProvidersUpdateRequestBuilder(id, data);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("circuitsProvidersUpdate", localVarResponse);
        }
        return new ApiResponse<Provider>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Provider>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder circuitsProvidersUpdateRequestBuilder(Integer id, WritableProvider data) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling circuitsProvidersUpdate");
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling circuitsProvidersUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/circuits/providers/{id}/"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(data);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
